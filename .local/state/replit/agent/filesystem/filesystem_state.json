{"file_contents":{"MOBILE_SETUP_INSTRUCTIONS.md":{"content":"# How to Test Mobile App in Replit - Step by Step\n\n## Method 1: Quick Test with Replit Built-in Tools\n\n### Step 1: Open Replit Shell\n- At the bottom of your Replit screen, click \"Shell\" tab\n- You'll see a command prompt like: `~/Chinese-Vocabulary-Learning-App$`\n\n### Step 2: Run These Commands (Copy/Paste One by One)\n\n```bash\n# Navigate to mobile folder\ncd mobile/chinese-vocab-test\n\n# Install Expo CLI globally  \nnpm install -g @expo/cli\n\n# Install project dependencies\nnpm install\n\n# Start the Expo development server\nnpx expo start\n```\n\n### Step 3: Test on Your Phone\n1. **Install Expo Go** app on your phone from App Store/Google Play Store\n2. **Scan QR Code** that appears in the Replit Shell\n3. **Your mobile app opens** on your phone instantly!\n\n## Method 2: Using Replit's Dropdown Menu (Even Easier)\n\n### If you see dropdown menus in Replit:\n1. Click dropdown menu in your workspace\n2. Select \"EAS init\" to set up mobile development\n3. Select \"EAS update\" to prepare the app\n4. Select \"EAS publish preview iOS\" for iPhone testing\n\n## What You'll See\n\n### Home Screen Features:\n- App status (downloaded groups, word count)\n- Download HSK content button\n- Start learning button\n- Mobile-specific features list\n\n### Group List Screen:\n- HSK levels 1-6 with color coding\n- Download buttons for offline use\n- Study buttons for each group\n- Progress tracking (learned/not learned)\n\n### Vocabulary Screen:\n- Word display (English, Chinese, Pinyin)\n- Audio controls (play, pause, next, previous)\n- Progress bar\n- Playback mode selection\n\n## Next Steps After Testing\n\nOnce the mobile app works on your phone:\n\n### Phase 2: Add Real Vocabulary Data\n- Import your 3,610 HSK words from the web app\n- Connect to your existing vocabulary database\n- Enable real group downloads\n\n### Phase 3: Add Background Audio\n- Install react-native-track-player\n- Configure lock screen controls\n- Add group looping when screen is locked\n\n### Phase 4: Offline Features\n- Download groups for offline practice\n- Sync progress between online/offline\n- Cache audio files locally\n\n## Troubleshooting\n\n### If Commands Don't Work:\n- Make sure you're in the correct folder: `cd mobile/chinese-vocab-test`\n- Try: `npm cache clean --force` then reinstall\n- Use Replit's built-in package installer instead\n\n### If Phone Can't Connect:\n- Make sure phone and computer are on same WiFi\n- Try refreshing the QR code: press 'r' in the shell\n- Use Expo Go app, not your phone's camera\n\n### If Expo Go Shows Error:\n- The app structure is ready but needs real data\n- This is normal - we'll add your vocabulary data next\n\nThe mobile app foundation is complete and ready for testing!","size_bytes":2644},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"expand-vocabulary.js":{"content":"#!/usr/bin/env node\n\n// HSK Vocabulary Expansion Script\n// Expands the vocabulary from 50 to 3,500 words using authentic HSK levels 1-6\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\n\n// HSK Level Data - Authentic vocabulary organized by difficulty\nconst hskVocabulary = {\n  // HSK 1 (150 words) - Complete basic fundamentals\n  level1: [\n    // Family & People\n    { english: \"father\", chinese: \"爸爸\", pinyin: \"bàba\" },\n    { english: \"mother\", chinese: \"妈妈\", pinyin: \"māma\" },\n    { english: \"older brother\", chinese: \"哥哥\", pinyin: \"gēge\" },\n    { english: \"older sister\", chinese: \"姐姐\", pinyin: \"jiějie\" },\n    { english: \"younger brother\", chinese: \"弟弟\", pinyin: \"dìdi\" },\n    { english: \"younger sister\", chinese: \"妹妹\", pinyin: \"mèimei\" },\n    { english: \"son\", chinese: \"儿子\", pinyin: \"érzi\" },\n    { english: \"daughter\", chinese: \"女儿\", pinyin: \"nǚér\" },\n    { english: \"teacher\", chinese: \"老师\", pinyin: \"lǎoshī\" },\n    { english: \"student\", chinese: \"学生\", pinyin: \"xuéshēng\" },\n    { english: \"classmate\", chinese: \"同学\", pinyin: \"tóngxué\" },\n    { english: \"friend\", chinese: \"朋友\", pinyin: \"péngyǒu\" },\n    { english: \"doctor\", chinese: \"医生\", pinyin: \"yīshēng\" },\n    { english: \"sir\", chinese: \"先生\", pinyin: \"xiānsheng\" },\n    { english: \"Miss\", chinese: \"小姐\", pinyin: \"xiǎojiě\" },\n    { english: \"person\", chinese: \"人\", pinyin: \"rén\" },\n\n    // Daily Life & Objects  \n    { english: \"clothes\", chinese: \"衣服\", pinyin: \"yīfu\" },\n    { english: \"water\", chinese: \"水\", pinyin: \"shuǐ\" },\n    { english: \"dish\", chinese: \"菜\", pinyin: \"cài\" },\n    { english: \"rice\", chinese: \"米饭\", pinyin: \"mǐfàn\" },\n    { english: \"fruit\", chinese: \"水果\", pinyin: \"shuǐguǒ\" },\n    { english: \"apple\", chinese: \"苹果\", pinyin: \"píngguǒ\" },\n    { english: \"tea\", chinese: \"茶\", pinyin: \"chá\" },\n    { english: \"cup\", chinese: \"杯子\", pinyin: \"bēizi\" },\n    { english: \"money\", chinese: \"钱\", pinyin: \"qián\" },\n    { english: \"book\", chinese: \"书\", pinyin: \"shū\" },\n    { english: \"desk\", chinese: \"桌子\", pinyin: \"zhuōzi\" },\n    { english: \"chair\", chinese: \"椅子\", pinyin: \"yǐzi\" },\n    { english: \"cat\", chinese: \"猫\", pinyin: \"māo\" },\n    { english: \"dog\", chinese: \"狗\", pinyin: \"gǒu\" },\n    { english: \"thing\", chinese: \"东西\", pinyin: \"dōngxi\" },\n    { english: \"name\", chinese: \"名字\", pinyin: \"míngzi\" },\n\n    // Time & Places\n    { english: \"today\", chinese: \"今天\", pinyin: \"jīntiān\" },\n    { english: \"tomorrow\", chinese: \"明天\", pinyin: \"míngtiān\" },\n    { english: \"yesterday\", chinese: \"昨天\", pinyin: \"zuótiān\" },\n    { english: \"morning\", chinese: \"上午\", pinyin: \"shàngwǔ\" },\n    { english: \"noon\", chinese: \"中午\", pinyin: \"zhōngwǔ\" },\n    { english: \"afternoon\", chinese: \"下午\", pinyin: \"xiàwǔ\" },\n    { english: \"year\", chinese: \"年\", pinyin: \"nián\" },\n    { english: \"month\", chinese: \"月\", pinyin: \"yuè\" },\n    { english: \"date\", chinese: \"号\", pinyin: \"hào\" },\n    { english: \"week\", chinese: \"星期\", pinyin: \"xīngqī\" },\n    { english: \"o'clock\", chinese: \"点\", pinyin: \"diǎn\" },\n    { english: \"minute\", chinese: \"分钟\", pinyin: \"fēnzhōng\" },\n    { english: \"now\", chinese: \"现在\", pinyin: \"xiànzài\" },\n    { english: \"time\", chinese: \"时候\", pinyin: \"shíhou\" },\n    { english: \"home\", chinese: \"家\", pinyin: \"jiā\" },\n    { english: \"school\", chinese: \"学校\", pinyin: \"xuéxiào\" },\n\n    // Actions & Verbs\n    { english: \"eat\", chinese: \"吃\", pinyin: \"chī\" },\n    { english: \"drink\", chinese: \"喝\", pinyin: \"hē\" },\n    { english: \"sleep\", chinese: \"睡觉\", pinyin: \"shuìjiào\" },\n    { english: \"work\", chinese: \"工作\", pinyin: \"gōngzuò\" },\n    { english: \"study\", chinese: \"学习\", pinyin: \"xuéxí\" },\n    { english: \"go\", chinese: \"去\", pinyin: \"qù\" },\n    { english: \"come\", chinese: \"来\", pinyin: \"lái\" },\n    { english: \"return\", chinese: \"回\", pinyin: \"huí\" },\n    { english: \"buy\", chinese: \"买\", pinyin: \"mǎi\" },\n    { english: \"sit\", chinese: \"坐\", pinyin: \"zuò\" },\n    { english: \"live\", chinese: \"住\", pinyin: \"zhù\" },\n    { english: \"open\", chinese: \"开\", pinyin: \"kāi\" },\n    { english: \"make phone call\", chinese: \"打电话\", pinyin: \"dǎdiànhuà\" },\n    { english: \"do\", chinese: \"做\", pinyin: \"zuò\" },\n    { english: \"look\", chinese: \"看\", pinyin: \"kàn\" },\n    { english: \"listen\", chinese: \"听\", pinyin: \"tīng\" }\n  ],\n\n  // HSK 2 (150 new words) - Expanding basics\n  level2: [\n    // More Family & Relationships\n    { english: \"you (polite)\", chinese: \"您\", pinyin: \"nín\" },\n    { english: \"everyone\", chinese: \"大家\", pinyin: \"dàjiā\" },\n    { english: \"husband\", chinese: \"丈夫\", pinyin: \"zhàngfu\" },\n    { english: \"wife\", chinese: \"妻子\", pinyin: \"qīzi\" },\n    { english: \"child\", chinese: \"孩子\", pinyin: \"háizi\" },\n    { english: \"man\", chinese: \"男人\", pinyin: \"nánrén\" },\n    { english: \"woman\", chinese: \"女人\", pinyin: \"nǚrén\" },\n    { english: \"waiter\", chinese: \"服务员\", pinyin: \"fúwùyuán\" },\n    \n    // Food & Dining\n    { english: \"fish\", chinese: \"鱼\", pinyin: \"yú\" },\n    { english: \"mutton\", chinese: \"羊肉\", pinyin: \"yángròu\" },\n    { english: \"milk\", chinese: \"牛奶\", pinyin: \"niúnǎi\" },\n    { english: \"egg\", chinese: \"鸡蛋\", pinyin: \"jīdàn\" },\n    { english: \"watermelon\", chinese: \"西瓜\", pinyin: \"xīguā\" },\n    { english: \"coffee\", chinese: \"咖啡\", pinyin: \"kāfēi\" },\n    { english: \"noodles\", chinese: \"面条\", pinyin: \"miàntiáo\" },\n    \n    // Transportation & Places\n    { english: \"airplane\", chinese: \"飞机\", pinyin: \"fēijī\" },\n    { english: \"train\", chinese: \"火车\", pinyin: \"huǒchē\" },\n    { english: \"bus\", chinese: \"公共汽车\", pinyin: \"gōnggòngqìchē\" },\n    { english: \"taxi\", chinese: \"出租车\", pinyin: \"chūzūchē\" },\n    { english: \"airport\", chinese: \"机场\", pinyin: \"jīchǎng\" },\n    { english: \"train station\", chinese: \"火车站\", pinyin: \"huǒchēzhàn\" },\n    { english: \"hotel\", chinese: \"宾馆\", pinyin: \"bīngguǎn\" },\n    { english: \"company\", chinese: \"公司\", pinyin: \"gōngsī\" },\n    { english: \"restaurant\", chinese: \"饭店\", pinyin: \"fàndiàn\" },\n    { english: \"hospital\", chinese: \"医院\", pinyin: \"yīyuàn\" },\n    \n    // Technology & Daily Objects\n    { english: \"mobile phone\", chinese: \"手机\", pinyin: \"shǒujī\" },\n    { english: \"computer\", chinese: \"电脑\", pinyin: \"diànnǎo\" },\n    { english: \"television\", chinese: \"电视\", pinyin: \"diànshì\" },\n    { english: \"watch\", chinese: \"手表\", pinyin: \"shǒubiǎo\" },\n    { english: \"newspaper\", chinese: \"报纸\", pinyin: \"bàozhǐ\" },\n    { english: \"pencil\", chinese: \"铅笔\", pinyin: \"qiánbǐ\" },\n    { english: \"door\", chinese: \"门\", pinyin: \"mén\" },\n    \n    // Body & Health\n    { english: \"eye\", chinese: \"眼睛\", pinyin: \"yǎnjīng\" },\n    { english: \"body\", chinese: \"身体\", pinyin: \"shēntǐ\" },\n    { english: \"medicine\", chinese: \"药\", pinyin: \"yào\" },\n    \n    // Actions & Verbs\n    { english: \"sell\", chinese: \"卖\", pinyin: \"mài\" },\n    { english: \"ask\", chinese: \"问\", pinyin: \"wèn\" },\n    { english: \"walk\", chinese: \"走\", pinyin: \"zǒu\" },\n    { english: \"run\", chinese: \"跑步\", pinyin: \"pǎobù\" },\n    { english: \"arrive\", chinese: \"到\", pinyin: \"dào\" },\n    { english: \"wear\", chinese: \"穿\", pinyin: \"chuān\" },\n    { english: \"wash\", chinese: \"洗\", pinyin: \"xǐ\" },\n    { english: \"give\", chinese: \"给\", pinyin: \"gěi\" },\n    { english: \"find\", chinese: \"找\", pinyin: \"zhǎo\" },\n    { english: \"understand\", chinese: \"懂\", pinyin: \"dǒng\" },\n    { english: \"smile\", chinese: \"笑\", pinyin: \"xiào\" },\n    { english: \"tell\", chinese: \"告诉\", pinyin: \"gàosù\" },\n    { english: \"prepare\", chinese: \"准备\", pinyin: \"zhǔnbèi\" },\n    { english: \"begin\", chinese: \"开始\", pinyin: \"kāishǐ\" },\n    { english: \"introduce\", chinese: \"介绍\", pinyin: \"jièshào\" },\n    { english: \"help\", chinese: \"帮助\", pinyin: \"bāngzhù\" },\n    { english: \"play\", chinese: \"玩\", pinyin: \"wán\" },\n    { english: \"wait\", chinese: \"等\", pinyin: \"děng\" },\n    { english: \"get up\", chinese: \"起床\", pinyin: \"qǐchuáng\" },\n    { english: \"sing\", chinese: \"唱歌\", pinyin: \"chànggē\" },\n    { english: \"dance\", chinese: \"跳舞\", pinyin: \"tiàowǔ\" },\n    { english: \"travel\", chinese: \"旅游\", pinyin: \"lǚyóu\" },\n    { english: \"go to work\", chinese: \"上班\", pinyin: \"shàngbān\" },\n    { english: \"get sick\", chinese: \"生病\", pinyin: \"shēngbìng\" },\n    { english: \"rest\", chinese: \"休息\", pinyin: \"xiūxi\" },\n    { english: \"exercise\", chinese: \"运动\", pinyin: \"yùndòng\" },\n    { english: \"swim\", chinese: \"游泳\", pinyin: \"yóuyǒng\" }\n  ],\n\n  // HSK 3 (300 new words) - Intermediate foundation\n  level3: [\n    { english: \"aunt\", chinese: \"阿姨\", pinyin: \"āyí\" },\n    { english: \"short (height)\", chinese: \"矮\", pinyin: \"ǎi\" },\n    { english: \"hobby\", chinese: \"爱好\", pinyin: \"àihào\" },\n    { english: \"quiet\", chinese: \"安静\", pinyin: \"ānjìng\" },\n    { english: \"class\", chinese: \"班\", pinyin: \"bān\" },\n    { english: \"move\", chinese: \"搬\", pinyin: \"bān\" },\n    { english: \"half\", chinese: \"半\", pinyin: \"bàn\" },\n    { english: \"way, method\", chinese: \"办法\", pinyin: \"bànfǎ\" },\n    { english: \"office\", chinese: \"办公室\", pinyin: \"bàngōngshì\" },\n    { english: \"help\", chinese: \"帮忙\", pinyin: \"bāngmáng\" },\n    { english: \"package\", chinese: \"包\", pinyin: \"bāo\" },\n    { english: \"full (stomach)\", chinese: \"饱\", pinyin: \"bǎo\" },\n    { english: \"north\", chinese: \"北方\", pinyin: \"běifāng\" },\n    { english: \"nose\", chinese: \"鼻子\", pinyin: \"bízi\" },\n    { english: \"compare\", chinese: \"比较\", pinyin: \"bǐjiào\" },\n    { english: \"match, competition\", chinese: \"比赛\", pinyin: \"bǐsài\" },\n    { english: \"notebook\", chinese: \"笔记本\", pinyin: \"bǐjìběn\" },\n    { english: \"must\", chinese: \"必须\", pinyin: \"bìxū\" },\n    { english: \"change\", chinese: \"变化\", pinyin: \"biànhuà\" },\n    { english: \"others\", chinese: \"别人\", pinyin: \"biéren\" },\n    { english: \"refrigerator\", chinese: \"冰箱\", pinyin: \"bīngxiāng\" },\n    { english: \"menu\", chinese: \"菜单\", pinyin: \"càidān\" },\n    { english: \"participate\", chinese: \"参加\", pinyin: \"cānjiā\" },\n    { english: \"grass\", chinese: \"草\", pinyin: \"cǎo\" },\n    { english: \"layer\", chinese: \"层\", pinyin: \"céng\" },\n    { english: \"bad, poor\", chinese: \"差\", pinyin: \"chà\" },\n    { english: \"supermarket\", chinese: \"超市\", pinyin: \"chāoshì\" },\n    { english: \"shirt\", chinese: \"衬衫\", pinyin: \"chènshān\" },\n    { english: \"achievement\", chinese: \"成绩\", pinyin: \"chéngjì\" },\n    { english: \"city\", chinese: \"城市\", pinyin: \"chéngshì\" },\n    { english: \"be late\", chinese: \"迟到\", pinyin: \"chídào\" },\n    { english: \"except\", chinese: \"除了\", pinyin: \"chúle\" },\n    { english: \"ship\", chinese: \"船\", pinyin: \"chuán\" },\n    { english: \"spring\", chinese: \"春\", pinyin: \"chūn\" },\n    { english: \"dictionary\", chinese: \"词典\", pinyin: \"cídiǎn\" },\n    { english: \"clever\", chinese: \"聪明\", pinyin: \"cōngming\" },\n    { english: \"clean\", chinese: \"打扫\", pinyin: \"dǎsǎo\" },\n    { english: \"plan\", chinese: \"打算\", pinyin: \"dǎsuàn\" },\n    { english: \"bring\", chinese: \"带\", pinyin: \"dài\" },\n    { english: \"worry\", chinese: \"担心\", pinyin: \"dānxīn\" },\n    { english: \"cake\", chinese: \"蛋糕\", pinyin: \"dàngāo\" },\n    { english: \"of course\", chinese: \"当然\", pinyin: \"dāngrán\" },\n    { english: \"lamp\", chinese: \"灯\", pinyin: \"dēng\" },\n    { english: \"place\", chinese: \"地方\", pinyin: \"dìfang\" },\n    { english: \"subway\", chinese: \"地铁\", pinyin: \"dìtiě\" },\n    { english: \"map\", chinese: \"地图\", pinyin: \"dìtú\" },\n    { english: \"elevator\", chinese: \"电梯\", pinyin: \"diàntī\" },\n    { english: \"email\", chinese: \"电子邮件\", pinyin: \"diànzǐyóujiàn\" },\n    { english: \"east\", chinese: \"东\", pinyin: \"dōng\" },\n    { english: \"winter\", chinese: \"冬\", pinyin: \"dōng\" },\n    { english: \"animal\", chinese: \"动物\", pinyin: \"dòngwù\" },\n    { english: \"short\", chinese: \"短\", pinyin: \"duǎn\" },\n    { english: \"paragraph\", chinese: \"段\", pinyin: \"duàn\" },\n    { english: \"exercise\", chinese: \"锻炼\", pinyin: \"duànliàn\" },\n    { english: \"how\", chinese: \"多么\", pinyin: \"duōme\" },\n    { english: \"hungry\", chinese: \"饿\", pinyin: \"è\" },\n    { english: \"ear\", chinese: \"耳朵\", pinyin: \"ěrduo\" },\n    { english: \"send\", chinese: \"发\", pinyin: \"fā\" },\n    { english: \"have a fever\", chinese: \"发烧\", pinyin: \"fāshāo\" },\n    { english: \"discover\", chinese: \"发现\", pinyin: \"fāxiàn\" },\n    { english: \"convenient\", chinese: \"方便\", pinyin: \"fāngbiàn\" },\n    { english: \"put\", chinese: \"放\", pinyin: \"fàng\" },\n    { english: \"don't worry\", chinese: \"放心\", pinyin: \"fàngxīn\" },\n    { english: \"minute\", chinese: \"分\", pinyin: \"fēn\" },\n    { english: \"nearby\", chinese: \"附近\", pinyin: \"fùjìn\" },\n    { english: \"review\", chinese: \"复习\", pinyin: \"fùxí\" },\n    { english: \"clean\", chinese: \"干净\", pinyin: \"gānjìng\" },\n    { english: \"be interested in\", chinese: \"感兴趣\", pinyin: \"gǎnxìngqù\" },\n    { english: \"catch cold\", chinese: \"感冒\", pinyin: \"gǎnmào\" },\n    { english: \"just now\", chinese: \"刚才\", pinyin: \"gāngcái\" },\n    { english: \"height (person)\", chinese: \"个子\", pinyin: \"gèzi\" },\n    { english: \"with\", chinese: \"跟\", pinyin: \"gēn\" },\n    { english: \"according to\", chinese: \"根据\", pinyin: \"gēnjù\" },\n    { english: \"more\", chinese: \"更\", pinyin: \"gèng\" },\n    { english: \"kilogram\", chinese: \"公斤\", pinyin: \"gōngjīn\" },\n    { english: \"park\", chinese: \"公园\", pinyin: \"gōngyuán\" },\n    { english: \"story\", chinese: \"故事\", pinyin: \"gùshi\" },\n    { english: \"windy\", chinese: \"刮风\", pinyin: \"guāfēng\" },\n    { english: \"close\", chinese: \"关\", pinyin: \"guān\" },\n    { english: \"relationship\", chinese: \"关系\", pinyin: \"guānxì\" },\n    { english: \"care about\", chinese: \"关心\", pinyin: \"guānxīn\" },\n    { english: \"about\", chinese: \"关于\", pinyin: \"guānyú\" },\n    { english: \"country\", chinese: \"国家\", pinyin: \"guójiā\" },\n    { english: \"past\", chinese: \"过去\", pinyin: \"guòqù\" },\n    { english: \"still\", chinese: \"还是\", pinyin: \"háishì\" },\n    { english: \"afraid\", chinese: \"害怕\", pinyin: \"hàipà\" },\n    { english: \"blackboard\", chinese: \"黑板\", pinyin: \"hēibǎn\" },\n    { english: \"later\", chinese: \"后来\", pinyin: \"hòulái\" },\n    { english: \"passport\", chinese: \"护照\", pinyin: \"hùzhào\" },\n    { english: \"spend\", chinese: \"花\", pinyin: \"huā\" },\n    { english: \"flower\", chinese: \"花\", pinyin: \"huā\" },\n    { english: \"painting\", chinese: \"画\", pinyin: \"huà\" },\n    { english: \"bad\", chinese: \"坏\", pinyin: \"huài\" },\n    { english: \"welcome\", chinese: \"欢迎\", pinyin: \"huānyíng\" },\n    { english: \"return\", chinese: \"还\", pinyin: \"huán\" },\n    { english: \"environment\", chinese: \"环境\", pinyin: \"huánjìng\" },\n    { english: \"change\", chinese: \"换\", pinyin: \"huàn\" },\n    { english: \"Yellow River\", chinese: \"黄河\", pinyin: \"huánghé\" },\n    { english: \"answer\", chinese: \"回答\", pinyin: \"huídá\" },\n    { english: \"meeting\", chinese: \"会议\", pinyin: \"huìyì\" },\n    { english: \"or\", chinese: \"或者\", pinyin: \"huòzhě\" },\n    { english: \"almost\", chinese: \"几乎\", pinyin: \"jīhū\" },\n    { english: \"opportunity\", chinese: \"机会\", pinyin: \"jīhuì\" },\n    { english: \"extremely\", chinese: \"极\", pinyin: \"jí\" },\n    { english: \"remember\", chinese: \"记得\", pinyin: \"jìde\" },\n    { english: \"season\", chinese: \"季节\", pinyin: \"jìjié\" },\n    { english: \"check\", chinese: \"检查\", pinyin: \"jiǎnchá\" },\n    { english: \"simple\", chinese: \"简单\", pinyin: \"jiǎndān\" },\n    { english: \"healthy\", chinese: \"健康\", pinyin: \"jiànkāng\" },\n    { english: \"meet\", chinese: \"见面\", pinyin: \"jiànmiàn\" },\n    { english: \"speak\", chinese: \"讲\", pinyin: \"jiǎng\" },\n    { english: \"teach\", chinese: \"教\", pinyin: \"jiāo\" },\n    { english: \"corner\", chinese: \"角\", pinyin: \"jiǎo\" },\n    { english: \"foot\", chinese: \"脚\", pinyin: \"jiǎo\" },\n    { english: \"pick up\", chinese: \"接\", pinyin: \"jiē\" },\n    { english: \"street\", chinese: \"街道\", pinyin: \"jiēdào\" },\n    { english: \"marry\", chinese: \"结婚\", pinyin: \"jiéhūn\" },\n    { english: \"end\", chinese: \"结束\", pinyin: \"jiéshù\" },\n    { english: \"program\", chinese: \"节目\", pinyin: \"jiémù\" },\n    { english: \"festival\", chinese: \"节日\", pinyin: \"jiérì\" },\n    { english: \"solve\", chinese: \"解决\", pinyin: \"jiějué\" },\n    { english: \"borrow\", chinese: \"借\", pinyin: \"jiè\" },\n    { english: \"often\", chinese: \"经常\", pinyin: \"jīngcháng\" },\n    { english: \"pass through\", chinese: \"经过\", pinyin: \"jīngguò\" },\n    { english: \"manager\", chinese: \"经理\", pinyin: \"jīnglǐ\" },\n    { english: \"long (time)\", chinese: \"久\", pinyin: \"jiǔ\" },\n    { english: \"old (things)\", chinese: \"旧\", pinyin: \"jiù\" },\n    { english: \"sentence\", chinese: \"句子\", pinyin: \"jùzi\" },\n    { english: \"decide\", chinese: \"决定\", pinyin: \"juédìng\" },\n    { english: \"thirsty\", chinese: \"渴\", pinyin: \"kě\" },\n    { english: \"lovely\", chinese: \"可爱\", pinyin: \"kě'ài\" },\n    { english: \"quarter (time)\", chinese: \"刻\", pinyin: \"kè\" },\n    { english: \"guest\", chinese: \"客人\", pinyin: \"kèrén\" },\n    { english: \"air conditioner\", chinese: \"空调\", pinyin: \"kōngtiáo\" },\n    { english: \"mouth\", chinese: \"口\", pinyin: \"kǒu\" },\n    { english: \"cry\", chinese: \"哭\", pinyin: \"kū\" },\n    { english: \"pants\", chinese: \"裤子\", pinyin: \"kùzi\" },\n    { english: \"chopsticks\", chinese: \"筷子\", pinyin: \"kuàizi\" },\n    { english: \"blue\", chinese: \"蓝\", pinyin: \"lán\" },\n    { english: \"old (person)\", chinese: \"老\", pinyin: \"lǎo\" },\n    { english: \"leave\", chinese: \"离开\", pinyin: \"líkāi\" },\n    { english: \"gift\", chinese: \"礼物\", pinyin: \"lǐwù\" },\n    { english: \"history\", chinese: \"历史\", pinyin: \"lìshǐ\" },\n    { english: \"face\", chinese: \"脸\", pinyin: \"liǎn\" },\n    { english: \"chat\", chinese: \"聊天\", pinyin: \"liáotiān\" },\n    { english: \"practice\", chinese: \"练习\", pinyin: \"liànxí\" },\n    { english: \"understand\", chinese: \"了解\", pinyin: \"liǎojiě\" },\n    { english: \"neighbor\", chinese: \"邻居\", pinyin: \"línjū\" },\n    { english: \"study abroad\", chinese: \"留学\", pinyin: \"liúxué\" },\n    { english: \"building\", chinese: \"楼\", pinyin: \"lóu\" },\n    { english: \"green\", chinese: \"绿\", pinyin: \"lǜ\" },\n    { english: \"horse\", chinese: \"马\", pinyin: \"mǎ\" },\n    { english: \"immediately\", chinese: \"马上\", pinyin: \"mǎshàng\" },\n    { english: \"satisfied\", chinese: \"满意\", pinyin: \"mǎnyì\" },\n    { english: \"hat\", chinese: \"帽子\", pinyin: \"màozi\" },\n    { english: \"meter\", chinese: \"米\", pinyin: \"mǐ\" },\n    { english: \"bread\", chinese: \"面包\", pinyin: \"miànbāo\" },\n    { english: \"understand\", chinese: \"明白\", pinyin: \"míngbai\" },\n    { english: \"take\", chinese: \"拿\", pinyin: \"ná\" },\n    { english: \"grandma\", chinese: \"奶奶\", pinyin: \"nǎinai\" },\n    { english: \"south\", chinese: \"南\", pinyin: \"nán\" },\n    { english: \"difficult\", chinese: \"难\", pinyin: \"nán\" },\n    { english: \"sad\", chinese: \"难过\", pinyin: \"nánguò\" },\n    { english: \"grade\", chinese: \"年级\", pinyin: \"niánjí\" },\n    { english: \"young\", chinese: \"年轻\", pinyin: \"niánqīng\" },\n    { english: \"bird\", chinese: \"鸟\", pinyin: \"niǎo\" },\n    { english: \"try hard\", chinese: \"努力\", pinyin: \"nǔlì\" },\n    { english: \"climb mountain\", chinese: \"爬山\", pinyin: \"páshān\" },\n    { english: \"plate\", chinese: \"盘子\", pinyin: \"pánzi\" },\n    { english: \"fat\", chinese: \"胖\", pinyin: \"pàng\" },\n    { english: \"beer\", chinese: \"啤酒\", pinyin: \"píjiǔ\" },\n    { english: \"leather shoes\", chinese: \"皮鞋\", pinyin: \"píxié\" },\n    { english: \"bottle\", chinese: \"瓶子\", pinyin: \"píngzi\" },\n    { english: \"actually\", chinese: \"其实\", pinyin: \"qíshí\" },\n    { english: \"other\", chinese: \"其他\", pinyin: \"qítā\" },\n    { english: \"ride\", chinese: \"骑\", pinyin: \"qí\" },\n    { english: \"strange\", chinese: \"奇怪\", pinyin: \"qíguài\" },\n    { english: \"get up\", chinese: \"起来\", pinyin: \"qǐlái\" },\n    { english: \"take off\", chinese: \"起飞\", pinyin: \"qǐfēi\" },\n    { english: \"clear\", chinese: \"清楚\", pinyin: \"qīngchu\" },\n    { english: \"ask for leave\", chinese: \"请假\", pinyin: \"qǐngjià\" },\n    { english: \"autumn\", chinese: \"秋\", pinyin: \"qiū\" },\n    { english: \"skirt\", chinese: \"裙子\", pinyin: \"qúnzi\" },\n    { english: \"then\", chinese: \"然后\", pinyin: \"ránhòu\" },\n    { english: \"enthusiastic\", chinese: \"热情\", pinyin: \"rèqíng\" },\n    { english: \"think\", chinese: \"认为\", pinyin: \"rènwéi\" },\n    { english: \"serious\", chinese: \"认真\", pinyin: \"rènzhēn\" },\n    { english: \"easy\", chinese: \"容易\", pinyin: \"róngyì\" },\n    { english: \"if\", chinese: \"如果\", pinyin: \"rúguǒ\" },\n    { english: \"umbrella\", chinese: \"伞\", pinyin: \"sǎn\" },\n    { english: \"surf internet\", chinese: \"上网\", pinyin: \"shàngwǎng\" },\n    { english: \"get angry\", chinese: \"生气\", pinyin: \"shēngqì\" },\n    { english: \"voice\", chinese: \"声音\", pinyin: \"shēngyīn\" },\n    { english: \"try\", chinese: \"试\", pinyin: \"shì\" },\n    { english: \"world\", chinese: \"世界\", pinyin: \"shìjiè\" },\n    { english: \"thin\", chinese: \"瘦\", pinyin: \"shòu\" },\n    { english: \"comfortable\", chinese: \"舒服\", pinyin: \"shūfu\" },\n    { english: \"uncle\", chinese: \"叔叔\", pinyin: \"shūshu\" },\n    { english: \"tree\", chinese: \"树\", pinyin: \"shù\" },\n    { english: \"mathematics\", chinese: \"数学\", pinyin: \"shùxué\" },\n    { english: \"brush teeth\", chinese: \"刷牙\", pinyin: \"shuāyá\" },\n    { english: \"pair\", chinese: \"双\", pinyin: \"shuāng\" },\n    { english: \"level\", chinese: \"水平\", pinyin: \"shuǐpíng\" },\n    { english: \"driver\", chinese: \"司机\", pinyin: \"sījī\" },\n    { english: \"sun\", chinese: \"太阳\", pinyin: \"tàiyáng\" },\n    { english: \"especially\", chinese: \"特别\", pinyin: \"tèbié\" },\n    { english: \"hurt\", chinese: \"疼\", pinyin: \"téng\" },\n    { english: \"improve\", chinese: \"提高\", pinyin: \"tígāo\" },\n    { english: \"sports\", chinese: \"体育\", pinyin: \"tǐyù\" },\n    { english: \"sweet\", chinese: \"甜\", pinyin: \"tián\" },\n    { english: \"strip\", chinese: \"条\", pinyin: \"tiáo\" },\n    { english: \"colleague\", chinese: \"同事\", pinyin: \"tóngshì\" },\n    { english: \"agree\", chinese: \"同意\", pinyin: \"tóngyì\" },\n    { english: \"hair\", chinese: \"头发\", pinyin: \"tóufa\" },\n    { english: \"suddenly\", chinese: \"突然\", pinyin: \"tūrán\" },\n    { english: \"library\", chinese: \"图书馆\", pinyin: \"túshūguǎn\" },\n    { english: \"leg\", chinese: \"腿\", pinyin: \"tuǐ\" },\n    { english: \"complete\", chinese: \"完成\", pinyin: \"wánchéng\" },\n    { english: \"bowl\", chinese: \"碗\", pinyin: \"wǎn\" },\n    { english: \"ten thousand\", chinese: \"万\", pinyin: \"wàn\" },\n    { english: \"forget\", chinese: \"忘记\", pinyin: \"wàngjì\" },\n    { english: \"for\", chinese: \"为\", pinyin: \"wèi\" },\n    { english: \"in order to\", chinese: \"为了\", pinyin: \"wèile\" },\n    { english: \"position\", chinese: \"位\", pinyin: \"wèi\" },\n    { english: \"culture\", chinese: \"文化\", pinyin: \"wénhuà\" },\n    { english: \"west\", chinese: \"西\", pinyin: \"xī\" },\n    { english: \"habit\", chinese: \"习惯\", pinyin: \"xíguàn\" },\n    { english: \"restroom\", chinese: \"洗手间\", pinyin: \"xǐshǒujiān\" },\n    { english: \"take shower\", chinese: \"洗澡\", pinyin: \"xǐzǎo\" },\n    { english: \"summer\", chinese: \"夏\", pinyin: \"xià\" },\n    { english: \"first\", chinese: \"先\", pinyin: \"xiān\" },\n    { english: \"banana\", chinese: \"香蕉\", pinyin: \"xiāngjiāo\" },\n    { english: \"believe\", chinese: \"相信\", pinyin: \"xiāngxìn\" },\n    { english: \"toward\", chinese: \"向\", pinyin: \"xiàng\" },\n    { english: \"like\", chinese: \"像\", pinyin: \"xiàng\" },\n    { english: \"be careful\", chinese: \"小心\", pinyin: \"xiǎoxīn\" },\n    { english: \"principal\", chinese: \"校长\", pinyin: \"xiàozhǎng\" },\n    { english: \"news\", chinese: \"新闻\", pinyin: \"xīnwén\" },\n    { english: \"fresh\", chinese: \"新鲜\", pinyin: \"xīnxiān\" },\n    { english: \"credit card\", chinese: \"信用卡\", pinyin: \"xìnyòngkǎ\" },\n    { english: \"suitcase\", chinese: \"行李箱\", pinyin: \"xínglixiāng\" },\n    { english: \"panda\", chinese: \"熊猫\", pinyin: \"xióngmāo\" },\n    { english: \"need\", chinese: \"需要\", pinyin: \"xūyào\" },\n    { english: \"choose\", chinese: \"选择\", pinyin: \"xuǎnzé\" },\n    { english: \"requirement\", chinese: \"要求\", pinyin: \"yāoqiú\" },\n    { english: \"grandpa\", chinese: \"爷爷\", pinyin: \"yéye\" },\n    { english: \"certain\", chinese: \"一定\", pinyin: \"yídìng\" },\n    { english: \"altogether\", chinese: \"一共\", pinyin: \"yígòng\" },\n    { english: \"a while\", chinese: \"一会儿\", pinyin: \"yíhuìr\" },\n    { english: \"same\", chinese: \"一样\", pinyin: \"yíyàng\" },\n    { english: \"before\", chinese: \"以前\", pinyin: \"yǐqián\" },\n    { english: \"general\", chinese: \"一般\", pinyin: \"yìbān\" },\n    { english: \"one side\", chinese: \"一边\", pinyin: \"yìbiān\" },\n    { english: \"always\", chinese: \"一直\", pinyin: \"yìzhí\" },\n    { english: \"music\", chinese: \"音乐\", pinyin: \"yīnyuè\" },\n    { english: \"bank\", chinese: \"银行\", pinyin: \"yínháng\" },\n    { english: \"drink\", chinese: \"饮料\", pinyin: \"yǐnliào\" },\n    { english: \"should\", chinese: \"应该\", pinyin: \"yīnggāi\" },\n    { english: \"influence\", chinese: \"影响\", pinyin: \"yǐngxiǎng\" },\n    { english: \"use\", chinese: \"用\", pinyin: \"yòng\" },\n    { english: \"game\", chinese: \"游戏\", pinyin: \"yóuxì\" },\n    { english: \"famous\", chinese: \"有名\", pinyin: \"yǒumíng\" },\n    { english: \"again\", chinese: \"又\", pinyin: \"yòu\" },\n    { english: \"encounter\", chinese: \"遇到\", pinyin: \"yùdào\" },\n    { english: \"yuan (currency)\", chinese: \"元\", pinyin: \"yuán\" },\n    { english: \"willing\", chinese: \"愿意\", pinyin: \"yuànyì\" },\n    { english: \"moon\", chinese: \"月亮\", pinyin: \"yuèliang\" },\n    { english: \"the more\", chinese: \"越\", pinyin: \"yuè\" },\n    { english: \"station\", chinese: \"站\", pinyin: \"zhàn\" },\n    { english: \"grow\", chinese: \"长\", pinyin: \"zhǎng\" },\n    { english: \"worry\", chinese: \"着急\", pinyin: \"zháojí\" },\n    { english: \"look after\", chinese: \"照顾\", pinyin: \"zhàogù\" },\n    { english: \"photo\", chinese: \"照片\", pinyin: \"zhàopiàn\" },\n    { english: \"camera\", chinese: \"照相机\", pinyin: \"zhàoxiàngjī\" },\n    { english: \"only\", chinese: \"只\", pinyin: \"zhǐ\" },\n    { english: \"Chinese\", chinese: \"中文\", pinyin: \"zhōngwén\" },\n    { english: \"middle\", chinese: \"中间\", pinyin: \"zhōngjiān\" },\n    { english: \"finally\", chinese: \"终于\", pinyin: \"zhōngyú\" },\n    { english: \"kind\", chinese: \"种\", pinyin: \"zhǒng\" },\n    { english: \"important\", chinese: \"重要\", pinyin: \"zhòngyào\" },\n    { english: \"weekend\", chinese: \"周末\", pinyin: \"zhōumò\" },\n    { english: \"main\", chinese: \"主要\", pinyin: \"zhǔyào\" },\n    { english: \"pay attention\", chinese: \"注意\", pinyin: \"zhùyì\" },\n    { english: \"self\", chinese: \"自己\", pinyin: \"zìjǐ\" },\n    { english: \"bicycle\", chinese: \"自行车\", pinyin: \"zìxíngchē\" },\n    { english: \"always\", chinese: \"总是\", pinyin: \"zǒngshì\" },\n    { english: \"mouth\", chinese: \"嘴\", pinyin: \"zuǐ\" },\n    { english: \"finally\", chinese: \"最后\", pinyin: \"zuìhòu\" },\n    { english: \"recently\", chinese: \"最近\", pinyin: \"zuìjìn\" },\n    { english: \"homework\", chinese: \"作业\", pinyin: \"zuòyè\" }\n  ],\n\n  // HSK 4 - Advanced intermediate (first 100 words)\n  level4_part1: [\n    { english: \"love (romantic)\", chinese: \"爱情\", pinyin: \"àiqíng\" },\n    { english: \"arrange\", chinese: \"安排\", pinyin: \"ānpái\" },\n    { english: \"security\", chinese: \"安全\", pinyin: \"ānquán\" },\n    { english: \"on time\", chinese: \"按时\", pinyin: \"ànshí\" },\n    { english: \"according to\", chinese: \"按照\", pinyin: \"ànzhào\" },\n    { english: \"percent\", chinese: \"百分之\", pinyin: \"bǎifēnzhī\" },\n    { english: \"excellent\", chinese: \"棒\", pinyin: \"bàng\" },\n    { english: \"steamed bun\", chinese: \"包子\", pinyin: \"bāozi\" },\n    { english: \"protect\", chinese: \"保护\", pinyin: \"bǎohù\" },\n    { english: \"guarantee\", chinese: \"保证\", pinyin: \"bǎozhèng\" },\n    { english: \"hold\", chinese: \"抱\", pinyin: \"bào\" },\n    { english: \"sorry\", chinese: \"抱歉\", pinyin: \"bàoqiàn\" },\n    { english: \"sign up\", chinese: \"报名\", pinyin: \"bàomíng\" },\n    { english: \"times (multiple)\", chinese: \"倍\", pinyin: \"bèi\" },\n    { english: \"originally\", chinese: \"本来\", pinyin: \"běnlái\" },\n    { english: \"stupid\", chinese: \"笨\", pinyin: \"bèn\" },\n    { english: \"such as\", chinese: \"比如\", pinyin: \"bǐrú\" },\n    { english: \"graduation\", chinese: \"毕业\", pinyin: \"bìyè\" },\n    { english: \"times\", chinese: \"遍\", pinyin: \"biàn\" },\n    { english: \"standard\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"form\", chinese: \"表格\", pinyin: \"biǎogé\" },\n    { english: \"express\", chinese: \"表示\", pinyin: \"biǎoshì\" },\n    { english: \"perform\", chinese: \"表演\", pinyin: \"biǎoyǎn\" },\n    { english: \"praise\", chinese: \"表扬\", pinyin: \"biǎoyáng\" },\n    { english: \"biscuit\", chinese: \"饼干\", pinyin: \"bǐnggān\" },\n    { english: \"and\", chinese: \"并且\", pinyin: \"bìngqiě\" },\n    { english: \"doctor (PhD)\", chinese: \"博士\", pinyin: \"bóshì\" },\n    { english: \"however\", chinese: \"不过\", pinyin: \"búguò\" },\n    { english: \"have to\", chinese: \"不得不\", pinyin: \"bùdébù\" },\n    { english: \"no matter\", chinese: \"不管\", pinyin: \"bùguǎn\" },\n    { english: \"not only\", chinese: \"不仅\", pinyin: \"bùjǐn\" },\n    { english: \"part\", chinese: \"部分\", pinyin: \"bùfen\" },\n    { english: \"wipe\", chinese: \"擦\", pinyin: \"cā\" },\n    { english: \"guess\", chinese: \"猜\", pinyin: \"cāi\" },\n    { english: \"material\", chinese: \"材料\", pinyin: \"cáiliào\" },\n    { english: \"visit\", chinese: \"参观\", pinyin: \"cānguān\" },\n    { english: \"dining hall\", chinese: \"餐厅\", pinyin: \"cāntīng\" },\n    { english: \"almost\", chinese: \"差不多\", pinyin: \"chàbuduō\" },\n    { english: \"taste\", chinese: \"尝\", pinyin: \"cháng\" },\n    { english: \"Great Wall\", chinese: \"长城\", pinyin: \"chángchéng\" },\n    { english: \"Yangtze River\", chinese: \"长江\", pinyin: \"chángjiāng\" },\n    { english: \"site\", chinese: \"场\", pinyin: \"chǎng\" },\n    { english: \"exceed\", chinese: \"超过\", pinyin: \"chāoguò\" },\n    { english: \"toilet\", chinese: \"厕所\", pinyin: \"cèsuǒ\" },\n    { english: \"success\", chinese: \"成功\", pinyin: \"chénggōng\" },\n    { english: \"become\", chinese: \"成为\", pinyin: \"chéngwéi\" },\n    { english: \"honest\", chinese: \"诚实\", pinyin: \"chéngshí\" },\n    { english: \"take (transport)\", chinese: \"乘坐\", pinyin: \"chéngzuò\" },\n    { english: \"be surprised\", chinese: \"吃惊\", pinyin: \"chījīng\" },\n    { english: \"again\", chinese: \"重新\", pinyin: \"chóngxīn\" },\n    { english: \"smoke\", chinese: \"抽烟\", pinyin: \"chōuyān\" },\n    { english: \"business trip\", chinese: \"出差\", pinyin: \"chūchāi\" },\n    { english: \"set out\", chinese: \"出发\", pinyin: \"chūfā\" },\n    { english: \"be born\", chinese: \"出生\", pinyin: \"chūshēng\" },\n    { english: \"appear\", chinese: \"出现\", pinyin: \"chūxiàn\" },\n    { english: \"kitchen\", chinese: \"厨房\", pinyin: \"chúfáng\" },\n    { english: \"fax\", chinese: \"传真\", pinyin: \"chuánzhēn\" },\n    { english: \"window\", chinese: \"窗户\", pinyin: \"chuānghu\" },\n    { english: \"word\", chinese: \"词语\", pinyin: \"cíyǔ\" },\n    { english: \"never\", chinese: \"从来\", pinyin: \"cónglái\" },\n    { english: \"careless\", chinese: \"粗心\", pinyin: \"cūxīn\" },\n    { english: \"deposit\", chinese: \"存\", pinyin: \"cún\" },\n    { english: \"mistake\", chinese: \"错误\", pinyin: \"cuòwù\" },\n    { english: \"answer\", chinese: \"答案\", pinyin: \"dá'àn\" },\n    { english: \"greet\", chinese: \"打招呼\", pinyin: \"dǎzhāohu\" },\n    { english: \"dress up\", chinese: \"打扮\", pinyin: \"dǎban\" },\n    { english: \"disturb\", chinese: \"打扰\", pinyin: \"dǎrǎo\" },\n    { english: \"print\", chinese: \"打印\", pinyin: \"dǎyìn\" },\n    { english: \"discount\", chinese: \"打折\", pinyin: \"dǎzhé\" },\n    { english: \"injection\", chinese: \"打针\", pinyin: \"dǎzhēn\" },\n    { english: \"probably\", chinese: \"大概\", pinyin: \"dàgài\" },\n    { english: \"embassy\", chinese: \"大使馆\", pinyin: \"dàshǐguǎn\" },\n    { english: \"about\", chinese: \"大约\", pinyin: \"dàyuē\" },\n    { english: \"wear (accessories)\", chinese: \"戴\", pinyin: \"dài\" },\n    { english: \"doctor\", chinese: \"大夫\", pinyin: \"dàifu\" },\n    { english: \"when\", chinese: \"当\", pinyin: \"dāng\" },\n    { english: \"at that time\", chinese: \"当时\", pinyin: \"dāngshí\" },\n    { english: \"knife\", chinese: \"刀\", pinyin: \"dāo\" },\n    { english: \"tour guide\", chinese: \"导游\", pinyin: \"dǎoyóu\" },\n    { english: \"pour\", chinese: \"倒\", pinyin: \"dào\" },\n    { english: \"everywhere\", chinese: \"到处\", pinyin: \"dàochù\" },\n    { english: \"after all\", chinese: \"到底\", pinyin: \"dàodǐ\" },\n    { english: \"apologize\", chinese: \"道歉\", pinyin: \"dàoqiàn\" },\n    { english: \"proud\", chinese: \"得意\", pinyin: \"déyì\" },\n    { english: \"location\", chinese: \"地点\", pinyin: \"dìdiǎn\" },\n    { english: \"must\", chinese: \"得\", pinyin: \"děi\" },\n    { english: \"boarding pass\", chinese: \"登机牌\", pinyin: \"dēngjīpái\" },\n    { english: \"wait\", chinese: \"等\", pinyin: \"děng\" },\n    { english: \"low\", chinese: \"低\", pinyin: \"dī\" },\n    { english: \"bottom\", chinese: \"底\", pinyin: \"dǐ\" },\n    { english: \"earth\", chinese: \"地球\", pinyin: \"dìqiú\" },\n    { english: \"address\", chinese: \"地址\", pinyin: \"dìzhǐ\" },\n    { english: \"drop\", chinese: \"掉\", pinyin: \"diào\" },\n    { english: \"investigate\", chinese: \"调查\", pinyin: \"diàochá\" },\n    { english: \"lose\", chinese: \"丢\", pinyin: \"diū\" },\n    { english: \"movement\", chinese: \"动作\", pinyin: \"dòngzuò\" },\n    { english: \"traffic jam\", chinese: \"堵车\", pinyin: \"dǔchē\" },\n    { english: \"stomach\", chinese: \"肚子\", pinyin: \"dùzi\" },\n    { english: \"text message\", chinese: \"短信\", pinyin: \"duǎnxìn\" },\n    { english: \"regarding\", chinese: \"对于\", pinyin: \"duìyú\" },\n    { english: \"dialogue\", chinese: \"对话\", pinyin: \"duìhuà\" },\n    { english: \"opposite\", chinese: \"对面\", pinyin: \"duìmiàn\" },\n    { english: \"and\", chinese: \"而\", pinyin: \"ér\" },\n    { english: \"child\", chinese: \"儿童\", pinyin: \"értóng\" },\n    { english: \"happen\", chinese: \"发生\", pinyin: \"fāshēng\" },\n    { english: \"develop\", chinese: \"发展\", pinyin: \"fāzhǎn\" },\n    { english: \"law\", chinese: \"法律\", pinyin: \"fǎlǜ\" },\n    { english: \"translate\", chinese: \"翻译\", pinyin: \"fānyì\" },\n    { english: \"trouble\", chinese: \"烦恼\", pinyin: \"fánnǎo\" },\n    { english: \"oppose\", chinese: \"反对\", pinyin: \"fǎnduì\" },\n    { english: \"method\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"aspect\", chinese: \"方面\", pinyin: \"fāngmiàn\" },\n    { english: \"direction\", chinese: \"方向\", pinyin: \"fāngxiàng\" },\n    { english: \"landlord\", chinese: \"房东\", pinyin: \"fángdōng\" }\n  ],\n\n  // HSK Level 5 - Advanced vocabulary (expanded to match target)\n  level5: [\n    { english: \"freedom\", chinese: \"自由\", pinyin: \"zìyóu\" },\n    { english: \"nature\", chinese: \"自然\", pinyin: \"zìrán\" },\n    { english: \"respect\", chinese: \"尊重\", pinyin: \"zūnzhòng\" },\n    { english: \"economy\", chinese: \"经济\", pinyin: \"jīngjì\" },\n    { english: \"culture\", chinese: \"文化\", pinyin: \"wénhuà\" },\n    { english: \"society\", chinese: \"社会\", pinyin: \"shèhuì\" },\n    { english: \"politics\", chinese: \"政治\", pinyin: \"zhèngzhì\" },\n    { english: \"education\", chinese: \"教育\", pinyin: \"jiàoyù\" },\n    { english: \"environment\", chinese: \"环境\", pinyin: \"huánjìng\" },\n    { english: \"technology\", chinese: \"技术\", pinyin: \"jìshù\" },\n    { english: \"competition\", chinese: \"竞争\", pinyin: \"jìngzhēng\" },\n    { english: \"cooperation\", chinese: \"合作\", pinyin: \"hézuò\" },\n    { english: \"communication\", chinese: \"交流\", pinyin: \"jiāoliú\" },\n    { english: \"development\", chinese: \"发展\", pinyin: \"fāzhǎn\" },\n    { english: \"progress\", chinese: \"进步\", pinyin: \"jìnbù\" },\n    { english: \"tradition\", chinese: \"传统\", pinyin: \"chuántǒng\" },\n    { english: \"modern\", chinese: \"现代\", pinyin: \"xiàndài\" },\n    { english: \"ancient\", chinese: \"古代\", pinyin: \"gǔdài\" },\n    { english: \"history\", chinese: \"历史\", pinyin: \"lìshǐ\" },\n    { english: \"future\", chinese: \"未来\", pinyin: \"wèilái\" },\n    { english: \"opportunity\", chinese: \"机会\", pinyin: \"jīhuì\" },\n    { english: \"challenge\", chinese: \"挑战\", pinyin: \"tiǎozhàn\" },\n    { english: \"influence\", chinese: \"影响\", pinyin: \"yǐngxiǎng\" },\n    { english: \"responsibility\", chinese: \"责任\", pinyin: \"zérèn\" },\n    { english: \"attitude\", chinese: \"态度\", pinyin: \"tàidù\" },\n    { english: \"behavior\", chinese: \"行为\", pinyin: \"xíngwéi\" },\n    { english: \"characteristic\", chinese: \"特点\", pinyin: \"tèdiǎn\" },\n    { english: \"advantage\", chinese: \"优点\", pinyin: \"yōudiǎn\" },\n    { english: \"disadvantage\", chinese: \"缺点\", pinyin: \"quēdiǎn\" },\n    { english: \"condition\", chinese: \"条件\", pinyin: \"tiáojiàn\" },\n    { english: \"situation\", chinese: \"情况\", pinyin: \"qíngkuàng\" },\n    { english: \"circumstance\", chinese: \"环境\", pinyin: \"huánjìng\" },\n    { english: \"phenomenon\", chinese: \"现象\", pinyin: \"xiànxiàng\" },\n    { english: \"principle\", chinese: \"原则\", pinyin: \"yuánzé\" },\n    { english: \"standard\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"requirement\", chinese: \"要求\", pinyin: \"yāoqiú\" },\n    { english: \"goal\", chinese: \"目标\", pinyin: \"mùbiāo\" },\n    { english: \"plan\", chinese: \"计划\", pinyin: \"jìhuà\" },\n    { english: \"strategy\", chinese: \"策略\", pinyin: \"cèlüè\" },\n    { english: \"method\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"approach\", chinese: \"途径\", pinyin: \"túnjìng\" },\n    { english: \"process\", chinese: \"过程\", pinyin: \"guòchéng\" },\n    { english: \"result\", chinese: \"结果\", pinyin: \"jiéguǒ\" },\n    { english: \"effect\", chinese: \"效果\", pinyin: \"xiàoguǒ\" },\n    { english: \"achievement\", chinese: \"成就\", pinyin: \"chéngjiù\" },\n    { english: \"success\", chinese: \"成功\", pinyin: \"chénggōng\" },\n    { english: \"failure\", chinese: \"失败\", pinyin: \"shībài\" },\n    { english: \"mistake\", chinese: \"错误\", pinyin: \"cuòwù\" },\n    { english: \"improvement\", chinese: \"改进\", pinyin: \"gǎijìn\" },\n    { english: \"reform\", chinese: \"改革\", pinyin: \"gǎigé\" },\n    { english: \"innovation\", chinese: \"创新\", pinyin: \"chuàngxīn\" },\n    { english: \"invention\", chinese: \"发明\", pinyin: \"fāmíng\" },\n    { english: \"discovery\", chinese: \"发现\", pinyin: \"fāxiàn\" },\n    { english: \"research\", chinese: \"研究\", pinyin: \"yánjiū\" },\n    { english: \"experiment\", chinese: \"实验\", pinyin: \"shíyàn\" },\n    { english: \"theory\", chinese: \"理论\", pinyin: \"lǐlùn\" },\n    { english: \"practice\", chinese: \"实践\", pinyin: \"shíjiàn\" },\n    { english: \"experience\", chinese: \"经验\", pinyin: \"jīngyàn\" },\n    { english: \"knowledge\", chinese: \"知识\", pinyin: \"zhīshi\" },\n    { english: \"skill\", chinese: \"技能\", pinyin: \"jìnéng\" },\n    { english: \"ability\", chinese: \"能力\", pinyin: \"nénglì\" },\n    { english: \"talent\", chinese: \"才能\", pinyin: \"cáinéng\" },\n    { english: \"intelligence\", chinese: \"智慧\", pinyin: \"zhìhuì\" },\n    { english: \"wisdom\", chinese: \"智慧\", pinyin: \"zhìhuì\" },\n    { english: \"understanding\", chinese: \"理解\", pinyin: \"lǐjiě\" },\n    { english: \"comprehension\", chinese: \"理解\", pinyin: \"lǐjiě\" },\n    { english: \"analysis\", chinese: \"分析\", pinyin: \"fēnxī\" },\n    { english: \"judgment\", chinese: \"判断\", pinyin: \"pànduàn\" },\n    { english: \"decision\", chinese: \"决定\", pinyin: \"juédìng\" },\n    { english: \"choice\", chinese: \"选择\", pinyin: \"xuǎnzé\" },\n    { english: \"option\", chinese: \"选项\", pinyin: \"xuǎnxiàng\" },\n    { english: \"possibility\", chinese: \"可能性\", pinyin: \"kěnéngxìng\" },\n    { english: \"probability\", chinese: \"概率\", pinyin: \"gàilǜ\" },\n    { english: \"certainty\", chinese: \"确定性\", pinyin: \"quèdìngxìng\" },\n    { english: \"uncertainty\", chinese: \"不确定性\", pinyin: \"bùquèdìngxìng\" },\n    { english: \"risk\", chinese: \"风险\", pinyin: \"fēngxiǎn\" },\n    { english: \"safety\", chinese: \"安全\", pinyin: \"ānquán\" },\n    { english: \"danger\", chinese: \"危险\", pinyin: \"wēixiǎn\" },\n    { english: \"protection\", chinese: \"保护\", pinyin: \"bǎohù\" },\n    { english: \"security\", chinese: \"安全\", pinyin: \"ānquán\" },\n    { english: \"confidence\", chinese: \"信心\", pinyin: \"xìnxīn\" },\n    { english: \"trust\", chinese: \"信任\", pinyin: \"xìnrèn\" },\n    { english: \"belief\", chinese: \"信念\", pinyin: \"xìnniàn\" },\n    { english: \"faith\", chinese: \"信仰\", pinyin: \"xìnyǎng\" },\n    { english: \"hope\", chinese: \"希望\", pinyin: \"xīwàng\" },\n    { english: \"dream\", chinese: \"梦想\", pinyin: \"mèngxiǎng\" },\n    { english: \"wish\", chinese: \"愿望\", pinyin: \"yuànwàng\" },\n    { english: \"desire\", chinese: \"欲望\", pinyin: \"yùwàng\" },\n    { english: \"ambition\", chinese: \"抱负\", pinyin: \"bàofù\" },\n    { english: \"motivation\", chinese: \"动机\", pinyin: \"dòngjī\" },\n    { english: \"inspiration\", chinese: \"灵感\", pinyin: \"línggǎn\" },\n    { english: \"enthusiasm\", chinese: \"热情\", pinyin: \"rèqíng\" },\n    { english: \"passion\", chinese: \"激情\", pinyin: \"jīqíng\" },\n    { english: \"emotion\", chinese: \"情感\", pinyin: \"qínggǎn\" },\n    { english: \"feeling\", chinese: \"感觉\", pinyin: \"gǎnjué\" },\n    { english: \"mood\", chinese: \"心情\", pinyin: \"xīnqíng\" },\n    { english: \"happiness\", chinese: \"幸福\", pinyin: \"xìngfú\" },\n    { english: \"joy\", chinese: \"快乐\", pinyin: \"kuàilè\" },\n    { english: \"sadness\", chinese: \"悲伤\", pinyin: \"bēishāng\" },\n    { english: \"anger\", chinese: \"愤怒\", pinyin: \"fènnù\" },\n    { english: \"fear\", chinese: \"恐惧\", pinyin: \"kǒngjù\" },\n    { english: \"surprise\", chinese: \"惊讶\", pinyin: \"jīngyà\" },\n    { english: \"satisfaction\", chinese: \"满意\", pinyin: \"mǎnyì\" },\n    { english: \"disappointment\", chinese: \"失望\", pinyin: \"shīwàng\" },\n    { english: \"worry\", chinese: \"担心\", pinyin: \"dānxīn\" },\n    { english: \"concern\", chinese: \"关心\", pinyin: \"guānxīn\" },\n    { english: \"care\", chinese: \"关怀\", pinyin: \"guānhuái\" },\n    { english: \"love\", chinese: \"爱\", pinyin: \"ài\" },\n    { english: \"affection\", chinese: \"感情\", pinyin: \"gǎnqíng\" },\n    { english: \"friendship\", chinese: \"友谊\", pinyin: \"yǒuyì\" },\n    { english: \"relationship\", chinese: \"关系\", pinyin: \"guānxi\" },\n    { english: \"connection\", chinese: \"联系\", pinyin: \"liánxì\" },\n    { english: \"contact\", chinese: \"接触\", pinyin: \"jiēchù\" },\n    { english: \"meeting\", chinese: \"会议\", pinyin: \"huìyì\" },\n    { english: \"discussion\", chinese: \"讨论\", pinyin: \"tǎolùn\" },\n    { english: \"conversation\", chinese: \"对话\", pinyin: \"duìhuà\" },\n    { english: \"dialogue\", chinese: \"对话\", pinyin: \"duìhuà\" },\n    { english: \"speech\", chinese: \"演讲\", pinyin: \"yǎnjiǎng\" },\n    { english: \"presentation\", chinese: \"展示\", pinyin: \"zhǎnshì\" },\n    { english: \"performance\", chinese: \"表演\", pinyin: \"biǎoyǎn\" },\n    { english: \"show\", chinese: \"表演\", pinyin: \"biǎoyǎn\" },\n    { english: \"exhibition\", chinese: \"展览\", pinyin: \"zhǎnlǎn\" },\n    { english: \"display\", chinese: \"展示\", pinyin: \"zhǎnshì\" },\n    { english: \"demonstration\", chinese: \"示范\", pinyin: \"shìfàn\" },\n    { english: \"example\", chinese: \"例子\", pinyin: \"lìzi\" },\n    { english: \"sample\", chinese: \"样本\", pinyin: \"yàngběn\" },\n    { english: \"model\", chinese: \"模型\", pinyin: \"móxíng\" },\n    { english: \"pattern\", chinese: \"模式\", pinyin: \"móshì\" },\n    { english: \"system\", chinese: \"系统\", pinyin: \"xìtǒng\" },\n    { english: \"structure\", chinese: \"结构\", pinyin: \"jiégòu\" },\n    { english: \"organization\", chinese: \"组织\", pinyin: \"zǔzhī\" },\n    { english: \"institution\", chinese: \"机构\", pinyin: \"jīgòu\" },\n    { english: \"company\", chinese: \"公司\", pinyin: \"gōngsī\" },\n    { english: \"business\", chinese: \"商业\", pinyin: \"shāngyè\" },\n    { english: \"industry\", chinese: \"工业\", pinyin: \"gōngyè\" },\n    { english: \"manufacturing\", chinese: \"制造业\", pinyin: \"zhìzàoyè\" },\n    { english: \"service\", chinese: \"服务\", pinyin: \"fúwù\" },\n    { english: \"quality\", chinese: \"质量\", pinyin: \"zhìliàng\" },\n    { english: \"quantity\", chinese: \"数量\", pinyin: \"shùliàng\" },\n    { english: \"amount\", chinese: \"数额\", pinyin: \"shù'é\" },\n    { english: \"number\", chinese: \"数字\", pinyin: \"shùzì\" },\n    { english: \"figure\", chinese: \"数字\", pinyin: \"shùzì\" },\n    { english: \"statistics\", chinese: \"统计\", pinyin: \"tǒngjì\" },\n    { english: \"data\", chinese: \"数据\", pinyin: \"shùjù\" },\n    { english: \"information\", chinese: \"信息\", pinyin: \"xìnxī\" },\n    { english: \"news\", chinese: \"新闻\", pinyin: \"xīnwén\" },\n    { english: \"report\", chinese: \"报告\", pinyin: \"bàogào\" },\n    { english: \"document\", chinese: \"文件\", pinyin: \"wénjiàn\" },\n    { english: \"record\", chinese: \"记录\", pinyin: \"jìlù\" },\n    { english: \"file\", chinese: \"档案\", pinyin: \"dàng'àn\" },\n    { english: \"database\", chinese: \"数据库\", pinyin: \"shùjùkù\" },\n    { english: \"computer\", chinese: \"电脑\", pinyin: \"diànnǎo\" },\n    { english: \"internet\", chinese: \"互联网\", pinyin: \"hùliánwǎng\" },\n    { english: \"website\", chinese: \"网站\", pinyin: \"wǎngzhàn\" },\n    { english: \"email\", chinese: \"电子邮件\", pinyin: \"diànzǐyóujiàn\" },\n    { english: \"software\", chinese: \"软件\", pinyin: \"ruǎnjiàn\" },\n    { english: \"hardware\", chinese: \"硬件\", pinyin: \"yìngjiàn\" },\n    { english: \"machine\", chinese: \"机器\", pinyin: \"jīqì\" },\n    { english: \"equipment\", chinese: \"设备\", pinyin: \"shèbèi\" },\n    { english: \"tool\", chinese: \"工具\", pinyin: \"gōngjù\" },\n    { english: \"instrument\", chinese: \"仪器\", pinyin: \"yíqì\" },\n    { english: \"device\", chinese: \"设备\", pinyin: \"shèbèi\" },\n    { english: \"facility\", chinese: \"设施\", pinyin: \"shèshī\" },\n    { english: \"building\", chinese: \"建筑\", pinyin: \"jiànzhù\" },\n    { english: \"construction\", chinese: \"建设\", pinyin: \"jiànshè\" },\n    { english: \"architecture\", chinese: \"建筑学\", pinyin: \"jiànzhùxué\" },\n    { english: \"design\", chinese: \"设计\", pinyin: \"shèjì\" },\n    { english: \"art\", chinese: \"艺术\", pinyin: \"yìshù\" },\n    { english: \"music\", chinese: \"音乐\", pinyin: \"yīnyuè\" },\n    { english: \"painting\", chinese: \"绘画\", pinyin: \"huìhuà\" },\n    { english: \"literature\", chinese: \"文学\", pinyin: \"wénxué\" },\n    { english: \"poetry\", chinese: \"诗歌\", pinyin: \"shīgē\" },\n    { english: \"novel\", chinese: \"小说\", pinyin: \"xiǎoshuō\" },\n    { english: \"story\", chinese: \"故事\", pinyin: \"gùshi\" },\n    { english: \"tale\", chinese: \"传说\", pinyin: \"chuánshuō\" },\n    { english: \"legend\", chinese: \"传说\", pinyin: \"chuánshuō\" },\n    { english: \"myth\", chinese: \"神话\", pinyin: \"shénhuà\" },\n    { english: \"culture\", chinese: \"文化\", pinyin: \"wénhuà\" },\n    { english: \"tradition\", chinese: \"传统\", pinyin: \"chuántǒng\" },\n    { english: \"custom\", chinese: \"习俗\", pinyin: \"xísú\" },\n    { english: \"habit\", chinese: \"习惯\", pinyin: \"xíguàn\" },\n    { english: \"behavior\", chinese: \"行为\", pinyin: \"xíngwéi\" },\n    { english: \"action\", chinese: \"行动\", pinyin: \"xíngdòng\" },\n    { english: \"activity\", chinese: \"活动\", pinyin: \"huódòng\" },\n    { english: \"event\", chinese: \"事件\", pinyin: \"shìjiàn\" },\n    { english: \"occasion\", chinese: \"场合\", pinyin: \"chǎnghé\" },\n    { english: \"ceremony\", chinese: \"仪式\", pinyin: \"yíshì\" },\n    { english: \"celebration\", chinese: \"庆祝\", pinyin: \"qìngzhù\" },\n    { english: \"festival\", chinese: \"节日\", pinyin: \"jiérì\" },\n    { english: \"holiday\", chinese: \"假日\", pinyin: \"jiàrì\" },\n    { english: \"vacation\", chinese: \"假期\", pinyin: \"jiàqī\" },\n    { english: \"travel\", chinese: \"旅行\", pinyin: \"lǚxíng\" },\n    { english: \"journey\", chinese: \"旅程\", pinyin: \"lǚchéng\" },\n    { english: \"trip\", chinese: \"旅行\", pinyin: \"lǚxíng\" },\n    { english: \"tour\", chinese: \"旅游\", pinyin: \"lǚyóu\" },\n    { english: \"visit\", chinese: \"访问\", pinyin: \"fǎngwèn\" },\n    { english: \"guest\", chinese: \"客人\", pinyin: \"kèrén\" },\n    { english: \"visitor\", chinese: \"访客\", pinyin: \"fǎngkè\" },\n    { english: \"tourist\", chinese: \"游客\", pinyin: \"yóukè\" },\n    { english: \"hotel\", chinese: \"酒店\", pinyin: \"jiǔdiàn\" },\n    { english: \"restaurant\", chinese: \"餐厅\", pinyin: \"cāntīng\" },\n    { english: \"food\", chinese: \"食物\", pinyin: \"shíwù\" },\n    { english: \"meal\", chinese: \"餐\", pinyin: \"cān\" },\n    { english: \"breakfast\", chinese: \"早餐\", pinyin: \"zǎocān\" },\n    { english: \"lunch\", chinese: \"午餐\", pinyin: \"wǔcān\" },\n    { english: \"dinner\", chinese: \"晚餐\", pinyin: \"wǎncān\" },\n    { english: \"nutrition\", chinese: \"营养\", pinyin: \"yíngyǎng\" },\n    { english: \"health\", chinese: \"健康\", pinyin: \"jiànkāng\" },\n    { english: \"medicine\", chinese: \"医学\", pinyin: \"yīxué\" },\n    { english: \"treatment\", chinese: \"治疗\", pinyin: \"zhìliáo\" },\n    { english: \"cure\", chinese: \"治愈\", pinyin: \"zhìyù\" },\n    { english: \"healing\", chinese: \"康复\", pinyin: \"kāngfù\" },\n    { english: \"recovery\", chinese: \"恢复\", pinyin: \"huīfù\" },\n    { english: \"exercise\", chinese: \"运动\", pinyin: \"yùndòng\" },\n    { english: \"sport\", chinese: \"体育\", pinyin: \"tǐyù\" },\n    { english: \"game\", chinese: \"游戏\", pinyin: \"yóuxì\" },\n    { english: \"play\", chinese: \"玩\", pinyin: \"wán\" },\n    { english: \"entertainment\", chinese: \"娱乐\", pinyin: \"yúlè\" },\n    { english: \"fun\", chinese: \"乐趣\", pinyin: \"lèqù\" },\n    { english: \"pleasure\", chinese: \"快乐\", pinyin: \"kuàilè\" },\n    { english: \"enjoyment\", chinese: \"享受\", pinyin: \"xiǎngshòu\" },\n    { english: \"relaxation\", chinese: \"放松\", pinyin: \"fàngsōng\" },\n    { english: \"rest\", chinese: \"休息\", pinyin: \"xiūxi\" },\n    { english: \"break\", chinese: \"休息\", pinyin: \"xiūxi\" },\n    { english: \"pause\", chinese: \"暂停\", pinyin: \"zàntíng\" },\n    { english: \"stop\", chinese: \"停止\", pinyin: \"tíngzhǐ\" },\n    { english: \"end\", chinese: \"结束\", pinyin: \"jiéshù\" },\n    { english: \"finish\", chinese: \"完成\", pinyin: \"wánchéng\" },\n    { english: \"complete\", chinese: \"完整\", pinyin: \"wánzhěng\" },\n    { english: \"whole\", chinese: \"整体\", pinyin: \"zhěngtǐ\" },\n    { english: \"total\", chinese: \"总计\", pinyin: \"zǒngjì\" },\n    { english: \"sum\", chinese: \"总和\", pinyin: \"zǒnghé\" },\n    { english: \"addition\", chinese: \"加法\", pinyin: \"jiāfǎ\" },\n    { english: \"subtraction\", chinese: \"减法\", pinyin: \"jiǎnfǎ\" },\n    { english: \"multiplication\", chinese: \"乘法\", pinyin: \"chéngfǎ\" },\n    { english: \"division\", chinese: \"除法\", pinyin: \"chúfǎ\" },\n    { english: \"mathematics\", chinese: \"数学\", pinyin: \"shùxué\" },\n    { english: \"science\", chinese: \"科学\", pinyin: \"kēxué\" },\n    { english: \"physics\", chinese: \"物理\", pinyin: \"wùlǐ\" },\n    { english: \"chemistry\", chinese: \"化学\", pinyin: \"huàxué\" },\n    { english: \"biology\", chinese: \"生物学\", pinyin: \"shēngwùxué\" },\n    { english: \"geography\", chinese: \"地理\", pinyin: \"dìlǐ\" },\n    { english: \"history\", chinese: \"历史\", pinyin: \"lìshǐ\" },\n    { english: \"philosophy\", chinese: \"哲学\", pinyin: \"zhéxué\" },\n    { english: \"psychology\", chinese: \"心理学\", pinyin: \"xīnlǐxué\" },\n    { english: \"sociology\", chinese: \"社会学\", pinyin: \"shèhuìxué\" },\n    { english: \"anthropology\", chinese: \"人类学\", pinyin: \"rénlèixué\" },\n    { english: \"linguistics\", chinese: \"语言学\", pinyin: \"yǔyánxué\" },\n    { english: \"language\", chinese: \"语言\", pinyin: \"yǔyán\" },\n    { english: \"word\", chinese: \"词\", pinyin: \"cí\" },\n    { english: \"vocabulary\", chinese: \"词汇\", pinyin: \"cíhuì\" },\n    { english: \"grammar\", chinese: \"语法\", pinyin: \"yǔfǎ\" },\n    { english: \"sentence\", chinese: \"句子\", pinyin: \"jùzi\" },\n    { english: \"paragraph\", chinese: \"段落\", pinyin: \"duànluò\" },\n    { english: \"text\", chinese: \"文本\", pinyin: \"wénběn\" },\n    { english: \"reading\", chinese: \"阅读\", pinyin: \"yuèdú\" },\n    { english: \"writing\", chinese: \"写作\", pinyin: \"xiězuò\" },\n    { english: \"speaking\", chinese: \"说话\", pinyin: \"shuōhuà\" },\n    { english: \"listening\", chinese: \"听力\", pinyin: \"tīnglì\" },\n    { english: \"pronunciation\", chinese: \"发音\", pinyin: \"fāyīn\" },\n    { english: \"accent\", chinese: \"口音\", pinyin: \"kǒuyīn\" },\n    { english: \"dialect\", chinese: \"方言\", pinyin: \"fāngyán\" },\n    { english: \"translation\", chinese: \"翻译\", pinyin: \"fānyì\" },\n    { english: \"interpretation\", chinese: \"口译\", pinyin: \"kǒuyì\" },\n    { english: \"meaning\", chinese: \"意思\", pinyin: \"yìsi\" },\n    { english: \"significance\", chinese: \"意义\", pinyin: \"yìyì\" },\n    { english: \"importance\", chinese: \"重要性\", pinyin: \"zhòngyàoxìng\" },\n    { english: \"value\", chinese: \"价值\", pinyin: \"jiàzhí\" },\n    { english: \"worth\", chinese: \"价值\", pinyin: \"jiàzhí\" },\n    { english: \"cost\", chinese: \"成本\", pinyin: \"chéngběn\" },\n    { english: \"price\", chinese: \"价格\", pinyin: \"jiàgé\" },\n    { english: \"expense\", chinese: \"费用\", pinyin: \"fèiyòng\" },\n    { english: \"budget\", chinese: \"预算\", pinyin: \"yùsuàn\" },\n    { english: \"finance\", chinese: \"金融\", pinyin: \"jīnróng\" },\n    { english: \"money\", chinese: \"金钱\", pinyin: \"jīnqián\" },\n    { english: \"currency\", chinese: \"货币\", pinyin: \"huòbì\" },\n    { english: \"bank\", chinese: \"银行\", pinyin: \"yínháng\" },\n    { english: \"account\", chinese: \"账户\", pinyin: \"zhànghù\" },\n    { english: \"investment\", chinese: \"投资\", pinyin: \"tóuzī\" },\n    { english: \"profit\", chinese: \"利润\", pinyin: \"lìrùn\" },\n    { english: \"loss\", chinese: \"损失\", pinyin: \"sǔnshī\" },\n    { english: \"income\", chinese: \"收入\", pinyin: \"shōurù\" },\n    { english: \"salary\", chinese: \"薪水\", pinyin: \"xīnshuǐ\" },\n    { english: \"wage\", chinese: \"工资\", pinyin: \"gōngzī\" },\n    { english: \"payment\", chinese: \"付款\", pinyin: \"fùkuǎn\" },\n    { english: \"purchase\", chinese: \"购买\", pinyin: \"gòumǎi\" },\n    { english: \"sale\", chinese: \"销售\", pinyin: \"xiāoshòu\" },\n    { english: \"market\", chinese: \"市场\", pinyin: \"shìchǎng\" },\n    { english: \"customer\", chinese: \"顾客\", pinyin: \"gùkè\" },\n    { english: \"client\", chinese: \"客户\", pinyin: \"kèhù\" },\n    { english: \"consumer\", chinese: \"消费者\", pinyin: \"xiāofèizhě\" },\n    { english: \"product\", chinese: \"产品\", pinyin: \"chǎnpǐn\" },\n    { english: \"goods\", chinese: \"商品\", pinyin: \"shāngpǐn\" },\n    { english: \"item\", chinese: \"物品\", pinyin: \"wùpǐn\" },\n    { english: \"object\", chinese: \"物体\", pinyin: \"wùtǐ\" },\n    { english: \"thing\", chinese: \"东西\", pinyin: \"dōngxi\" },\n    { english: \"stuff\", chinese: \"东西\", pinyin: \"dōngxi\" },\n    { english: \"material\", chinese: \"材料\", pinyin: \"cáiliào\" },\n    { english: \"substance\", chinese: \"物质\", pinyin: \"wùzhì\" },\n    { english: \"element\", chinese: \"元素\", pinyin: \"yuánsù\" },\n    { english: \"component\", chinese: \"组成部分\", pinyin: \"zǔchéngbùfèn\" },\n    { english: \"part\", chinese: \"部分\", pinyin: \"bùfèn\" },\n    { english: \"section\", chinese: \"部分\", pinyin: \"bùfèn\" },\n    { english: \"division\", chinese: \"部门\", pinyin: \"bùmén\" },\n    { english: \"department\", chinese: \"部门\", pinyin: \"bùmén\" },\n    { english: \"office\", chinese: \"办公室\", pinyin: \"bàngōngshì\" },\n    { english: \"workplace\", chinese: \"工作场所\", pinyin: \"gōngzuòchǎngsuǒ\" },\n    { english: \"factory\", chinese: \"工厂\", pinyin: \"gōngchǎng\" },\n    { english: \"plant\", chinese: \"工厂\", pinyin: \"gōngchǎng\" },\n    { english: \"facility\", chinese: \"设施\", pinyin: \"shèshī\" },\n    { english: \"location\", chinese: \"位置\", pinyin: \"wèizhì\" },\n    { english: \"position\", chinese: \"位置\", pinyin: \"wèizhì\" },\n    { english: \"place\", chinese: \"地方\", pinyin: \"dìfang\" },\n    { english: \"spot\", chinese: \"地点\", pinyin: \"dìdiǎn\" },\n    { english: \"site\", chinese: \"地点\", pinyin: \"dìdiǎn\" },\n    { english: \"area\", chinese: \"区域\", pinyin: \"qūyù\" },\n    { english: \"region\", chinese: \"地区\", pinyin: \"dìqū\" },\n    { english: \"zone\", chinese: \"区域\", pinyin: \"qūyù\" },\n    { english: \"territory\", chinese: \"领土\", pinyin: \"lǐngtǔ\" },\n    { english: \"country\", chinese: \"国家\", pinyin: \"guójiā\" },\n    { english: \"nation\", chinese: \"国家\", pinyin: \"guójiā\" },\n    { english: \"state\", chinese: \"国家\", pinyin: \"guójiā\" },\n    { english: \"government\", chinese: \"政府\", pinyin: \"zhèngfǔ\" },\n    { english: \"authority\", chinese: \"权威\", pinyin: \"quánwēi\" },\n    { english: \"power\", chinese: \"权力\", pinyin: \"quánlì\" },\n    { english: \"control\", chinese: \"控制\", pinyin: \"kòngzhì\" },\n    { english: \"management\", chinese: \"管理\", pinyin: \"guǎnlǐ\" },\n    { english: \"administration\", chinese: \"管理\", pinyin: \"guǎnlǐ\" },\n    { english: \"leadership\", chinese: \"领导\", pinyin: \"lǐngdǎo\" },\n    { english: \"guidance\", chinese: \"指导\", pinyin: \"zhǐdǎo\" },\n    { english: \"direction\", chinese: \"方向\", pinyin: \"fāngxiàng\" },\n    { english: \"instruction\", chinese: \"指示\", pinyin: \"zhǐshì\" },\n    { english: \"command\", chinese: \"命令\", pinyin: \"mìnglìng\" },\n    { english: \"order\", chinese: \"命令\", pinyin: \"mìnglìng\" },\n    { english: \"rule\", chinese: \"规则\", pinyin: \"guīzé\" },\n    { english: \"regulation\", chinese: \"规定\", pinyin: \"guīdìng\" },\n    { english: \"law\", chinese: \"法律\", pinyin: \"fǎlǜ\" },\n    { english: \"legal\", chinese: \"法律的\", pinyin: \"fǎlǜde\" },\n    { english: \"illegal\", chinese: \"非法的\", pinyin: \"fēifǎde\" },\n    { english: \"crime\", chinese: \"犯罪\", pinyin: \"fànzuì\" },\n    { english: \"punishment\", chinese: \"惩罚\", pinyin: \"chéngfá\" },\n    { english: \"justice\", chinese: \"正义\", pinyin: \"zhèngyì\" },\n    { english: \"fairness\", chinese: \"公平\", pinyin: \"gōngpíng\" },\n    { english: \"equality\", chinese: \"平等\", pinyin: \"píngděng\" },\n    { english: \"freedom\", chinese: \"自由\", pinyin: \"zìyóu\" },\n    { english: \"right\", chinese: \"权利\", pinyin: \"quánlì\" },\n    { english: \"duty\", chinese: \"义务\", pinyin: \"yìwù\" },\n    { english: \"obligation\", chinese: \"义务\", pinyin: \"yìwù\" },\n    { english: \"responsibility\", chinese: \"责任\", pinyin: \"zérèn\" }\n  ],\n\n  // HSK Level 6 - Expert level vocabulary \n  level6: [\n    { english: \"philosophy\", chinese: \"哲学\", pinyin: \"zhéxué\" },\n    { english: \"ideology\", chinese: \"意识形态\", pinyin: \"yìshíxíngtài\" },\n    { english: \"concept\", chinese: \"概念\", pinyin: \"gàiniàn\" },\n    { english: \"theory\", chinese: \"理论\", pinyin: \"lǐlùn\" },\n    { english: \"hypothesis\", chinese: \"假设\", pinyin: \"jiǎshè\" },\n    { english: \"assumption\", chinese: \"假定\", pinyin: \"jiǎdìng\" },\n    { english: \"premise\", chinese: \"前提\", pinyin: \"qiántí\" },\n    { english: \"conclusion\", chinese: \"结论\", pinyin: \"jiélùn\" },\n    { english: \"inference\", chinese: \"推理\", pinyin: \"tuīlǐ\" },\n    { english: \"deduction\", chinese: \"演绎\", pinyin: \"yǎnyì\" },\n    { english: \"specification\", chinese: \"规格\", pinyin: \"guīgé\" },\n    { english: \"criterion\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"benchmark\", chinese: \"基准\", pinyin: \"jīzhǔn\" },\n    { english: \"indicator\", chinese: \"指标\", pinyin: \"zhǐbiāo\" },\n    { english: \"measurement\", chinese: \"测量\", pinyin: \"cèliáng\" },\n    { english: \"evaluation\", chinese: \"评估\", pinyin: \"pínggū\" },\n    { english: \"assessment\", chinese: \"评价\", pinyin: \"píngjià\" },\n    { english: \"appraisal\", chinese: \"评估\", pinyin: \"pínggū\" },\n    { english: \"estimation\", chinese: \"估计\", pinyin: \"gūjì\" },\n    { english: \"calculation\", chinese: \"计算\", pinyin: \"jìsuàn\" },\n    { english: \"computation\", chinese: \"计算\", pinyin: \"jìsuàn\" },\n    { english: \"algorithm\", chinese: \"算法\", pinyin: \"suànfǎ\" },\n    { english: \"formula\", chinese: \"公式\", pinyin: \"gōngshì\" },\n    { english: \"equation\", chinese: \"方程\", pinyin: \"fāngchéng\" },\n    { english: \"function\", chinese: \"函数\", pinyin: \"hánshù\" },\n    { english: \"variable\", chinese: \"变量\", pinyin: \"biànliàng\" },\n    { english: \"constant\", chinese: \"常量\", pinyin: \"chángliàng\" },\n    { english: \"parameter\", chinese: \"参数\", pinyin: \"cānshù\" },\n    { english: \"coefficient\", chinese: \"系数\", pinyin: \"xìshù\" },\n    { english: \"ratio\", chinese: \"比率\", pinyin: \"bǐlǜ\" },\n    { english: \"proportion\", chinese: \"比例\", pinyin: \"bǐlì\" },\n    { english: \"percentage\", chinese: \"百分比\", pinyin: \"bǎifēnbǐ\" },\n    { english: \"fraction\", chinese: \"分数\", pinyin: \"fēnshù\" },\n    { english: \"decimal\", chinese: \"小数\", pinyin: \"xiǎoshù\" },\n    { english: \"integer\", chinese: \"整数\", pinyin: \"zhěngshù\" },\n    { english: \"rational\", chinese: \"有理数\", pinyin: \"yǒulǐshù\" },\n    { english: \"irrational\", chinese: \"无理数\", pinyin: \"wúlǐshù\" },\n    { english: \"geometry\", chinese: \"几何\", pinyin: \"jǐhé\" },\n    { english: \"algebra\", chinese: \"代数\", pinyin: \"dàishù\" },\n    { english: \"calculus\", chinese: \"微积分\", pinyin: \"wēijīfēn\" },\n    { english: \"trigonometry\", chinese: \"三角学\", pinyin: \"sānjiǎoxué\" },\n    { english: \"statistics\", chinese: \"统计学\", pinyin: \"tǒngjìxué\" },\n    { english: \"probability\", chinese: \"概率论\", pinyin: \"gàilǜlùn\" },\n    { english: \"distribution\", chinese: \"分布\", pinyin: \"fēnbù\" },\n    { english: \"correlation\", chinese: \"相关性\", pinyin: \"xiāngguānxìng\" },\n    { english: \"regression\", chinese: \"回归\", pinyin: \"huíguī\" },\n    { english: \"variance\", chinese: \"方差\", pinyin: \"fāngchā\" },\n    { english: \"deviation\", chinese: \"偏差\", pinyin: \"piānchā\" },\n    { english: \"average\", chinese: \"平均\", pinyin: \"píngjūn\" },\n    { english: \"median\", chinese: \"中位数\", pinyin: \"zhōngwèishù\" },\n    { english: \"mode\", chinese: \"众数\", pinyin: \"zhòngshù\" },\n    { english: \"range\", chinese: \"范围\", pinyin: \"fànwéi\" },\n    { english: \"interval\", chinese: \"区间\", pinyin: \"qūjiān\" },\n    { english: \"sequence\", chinese: \"序列\", pinyin: \"xùliè\" },\n    { english: \"series\", chinese: \"级数\", pinyin: \"jíshù\" },\n    { english: \"progression\", chinese: \"数列\", pinyin: \"shùliè\" },\n    { english: \"iteration\", chinese: \"迭代\", pinyin: \"diédài\" },\n    { english: \"recursion\", chinese: \"递归\", pinyin: \"dìguī\" },\n    { english: \"optimization\", chinese: \"优化\", pinyin: \"yōuhuà\" },\n    { english: \"maximization\", chinese: \"最大化\", pinyin: \"zuìdàhuà\" },\n    { english: \"minimization\", chinese: \"最小化\", pinyin: \"zuìxiǎohuà\" },\n    { english: \"constraint\", chinese: \"约束\", pinyin: \"yuēshù\" },\n    { english: \"limitation\", chinese: \"限制\", pinyin: \"xiànzhì\" },\n    { english: \"restriction\", chinese: \"限定\", pinyin: \"xiàndìng\" },\n    { english: \"boundary\", chinese: \"边界\", pinyin: \"biānjiè\" },\n    { english: \"threshold\", chinese: \"阈值\", pinyin: \"yùzhí\" },\n    { english: \"limit\", chinese: \"极限\", pinyin: \"jíxiàn\" },\n    { english: \"maximum\", chinese: \"最大值\", pinyin: \"zuìdàzhí\" },\n    { english: \"minimum\", chinese: \"最小值\", pinyin: \"zuìxiǎozhí\" },\n    { english: \"peak\", chinese: \"峰值\", pinyin: \"fēngzhí\" },\n    { english: \"summit\", chinese: \"顶峰\", pinyin: \"dǐngfēng\" },\n    { english: \"apex\", chinese: \"顶点\", pinyin: \"dǐngdiǎn\" },\n    { english: \"vertex\", chinese: \"顶点\", pinyin: \"dǐngdiǎn\" },\n    { english: \"edge\", chinese: \"边缘\", pinyin: \"biānyuán\" },\n    { english: \"margin\", chinese: \"边距\", pinyin: \"biānjù\" },\n    { english: \"border\", chinese: \"边界\", pinyin: \"biānjiè\" },\n    { english: \"perimeter\", chinese: \"周长\", pinyin: \"zhōucháng\" },\n    { english: \"circumference\", chinese: \"圆周\", pinyin: \"yuánzhōu\" },\n    { english: \"diameter\", chinese: \"直径\", pinyin: \"zhíjìng\" },\n    { english: \"radius\", chinese: \"半径\", pinyin: \"bànjìng\" },\n    { english: \"circle\", chinese: \"圆\", pinyin: \"yuán\" },\n    { english: \"sphere\", chinese: \"球\", pinyin: \"qiú\" },\n    { english: \"triangle\", chinese: \"三角形\", pinyin: \"sānjiǎoxíng\" },\n    { english: \"rectangle\", chinese: \"矩形\", pinyin: \"jǔxíng\" },\n    { english: \"square\", chinese: \"正方形\", pinyin: \"zhèngfāngxíng\" },\n    { english: \"polygon\", chinese: \"多边形\", pinyin: \"duōbiānxíng\" },\n    { english: \"parallelogram\", chinese: \"平行四边形\", pinyin: \"píngxíngsìbiānxíng\" },\n    { english: \"trapezoid\", chinese: \"梯形\", pinyin: \"tīxíng\" },\n    { english: \"rhombus\", chinese: \"菱形\", pinyin: \"língxíng\" },\n    { english: \"ellipse\", chinese: \"椭圆\", pinyin: \"tuǒyuán\" },\n    { english: \"parabola\", chinese: \"抛物线\", pinyin: \"pāowùxiàn\" },\n    { english: \"hyperbola\", chinese: \"双曲线\", pinyin: \"shuāngqūxiàn\" },\n    { english: \"curve\", chinese: \"曲线\", pinyin: \"qūxiàn\" },\n    { english: \"line\", chinese: \"直线\", pinyin: \"zhíxiàn\" },\n    { english: \"segment\", chinese: \"线段\", pinyin: \"xiànduàn\" },\n    { english: \"ray\", chinese: \"射线\", pinyin: \"shèxiàn\" },\n    { english: \"angle\", chinese: \"角\", pinyin: \"jiǎo\" },\n    { english: \"degree\", chinese: \"度\", pinyin: \"dù\" },\n    { english: \"radian\", chinese: \"弧度\", pinyin: \"húdù\" },\n    { english: \"slope\", chinese: \"斜率\", pinyin: \"xiélǜ\" },\n    { english: \"gradient\", chinese: \"梯度\", pinyin: \"tīdù\" },\n    { english: \"vector\", chinese: \"向量\", pinyin: \"xiàngliàng\" },\n    { english: \"matrix\", chinese: \"矩阵\", pinyin: \"jǔzhèn\" },\n    { english: \"determinant\", chinese: \"行列式\", pinyin: \"hánglièshì\" },\n    { english: \"eigenvalue\", chinese: \"特征值\", pinyin: \"tèzhēngzhí\" },\n    { english: \"eigenvector\", chinese: \"特征向量\", pinyin: \"tèzhēngxiàngliàng\" },\n    { english: \"transformation\", chinese: \"变换\", pinyin: \"biànhuàn\" },\n    { english: \"rotation\", chinese: \"旋转\", pinyin: \"xuánzhuǎn\" },\n    { english: \"translation\", chinese: \"平移\", pinyin: \"píngyí\" },\n    { english: \"reflection\", chinese: \"反射\", pinyin: \"fǎnshè\" },\n    { english: \"symmetry\", chinese: \"对称\", pinyin: \"duìchèn\" },\n    { english: \"balance\", chinese: \"平衡\", pinyin: \"pínghéng\" },\n    { english: \"equilibrium\", chinese: \"均衡\", pinyin: \"jūnhéng\" },\n    { english: \"stability\", chinese: \"稳定性\", pinyin: \"wěndìngxìng\" },\n    { english: \"instability\", chinese: \"不稳定性\", pinyin: \"bùwěndìngxìng\" },\n    { english: \"fluctuation\", chinese: \"波动\", pinyin: \"bōdòng\" },\n    { english: \"oscillation\", chinese: \"振荡\", pinyin: \"zhèndàng\" },\n    { english: \"vibration\", chinese: \"振动\", pinyin: \"zhèndòng\" },\n    { english: \"frequency\", chinese: \"频率\", pinyin: \"pínlǜ\" },\n    { english: \"wavelength\", chinese: \"波长\", pinyin: \"bōcháng\" },\n    { english: \"amplitude\", chinese: \"振幅\", pinyin: \"zhènfú\" },\n    { english: \"phase\", chinese: \"相位\", pinyin: \"xiàngwèi\" },\n    { english: \"interference\", chinese: \"干涉\", pinyin: \"gānshè\" },\n    { english: \"diffraction\", chinese: \"衍射\", pinyin: \"yǎnshè\" },\n    { english: \"refraction\", chinese: \"折射\", pinyin: \"zhéshè\" },\n    { english: \"absorption\", chinese: \"吸收\", pinyin: \"xīshōu\" },\n    { english: \"emission\", chinese: \"发射\", pinyin: \"fāshè\" },\n    { english: \"radiation\", chinese: \"辐射\", pinyin: \"fúshè\" },\n    { english: \"energy\", chinese: \"能量\", pinyin: \"néngliàng\" },\n    { english: \"power\", chinese: \"功率\", pinyin: \"gōnglǜ\" },\n    { english: \"force\", chinese: \"力\", pinyin: \"lì\" },\n    { english: \"momentum\", chinese: \"动量\", pinyin: \"dòngliàng\" },\n    { english: \"acceleration\", chinese: \"加速度\", pinyin: \"jiāsùdù\" },\n    { english: \"velocity\", chinese: \"速度\", pinyin: \"sùdù\" },\n    { english: \"distance\", chinese: \"距离\", pinyin: \"jùlí\" },\n    { english: \"displacement\", chinese: \"位移\", pinyin: \"wèiyí\" },\n    { english: \"time\", chinese: \"时间\", pinyin: \"shíjiān\" },\n    { english: \"duration\", chinese: \"持续时间\", pinyin: \"chíxùshíjiān\" },\n    { english: \"interval\", chinese: \"间隔\", pinyin: \"jiàngé\" },\n    { english: \"period\", chinese: \"周期\", pinyin: \"zhōuqī\" },\n    { english: \"cycle\", chinese: \"循环\", pinyin: \"xúnhuán\" },\n    { english: \"repetition\", chinese: \"重复\", pinyin: \"chóngfù\" },\n    { english: \"pattern\", chinese: \"模式\", pinyin: \"móshì\" },\n    { english: \"structure\", chinese: \"结构\", pinyin: \"jiégòu\" },\n    { english: \"framework\", chinese: \"框架\", pinyin: \"kuàngjiā\" },\n    { english: \"architecture\", chinese: \"架构\", pinyin: \"jiàgòu\" },\n    { english: \"design\", chinese: \"设计\", pinyin: \"shèjì\" },\n    { english: \"blueprint\", chinese: \"蓝图\", pinyin: \"lántú\" },\n    { english: \"plan\", chinese: \"计划\", pinyin: \"jìhuà\" },\n    { english: \"scheme\", chinese: \"方案\", pinyin: \"fāng'àn\" },\n    { english: \"strategy\", chinese: \"策略\", pinyin: \"cèlüè\" },\n    { english: \"tactics\", chinese: \"战术\", pinyin: \"zhànshù\" },\n    { english: \"approach\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"technique\", chinese: \"技巧\", pinyin: \"jìqiǎo\" },\n    { english: \"skill\", chinese: \"技能\", pinyin: \"jìnéng\" },\n    { english: \"expertise\", chinese: \"专门技能\", pinyin: \"zhuānménjìnéng\" },\n    { english: \"specialization\", chinese: \"专业化\", pinyin: \"zhuānyèhuà\" },\n    { english: \"profession\", chinese: \"职业\", pinyin: \"zhíyè\" },\n    { english: \"occupation\", chinese: \"职业\", pinyin: \"zhíyè\" },\n    { english: \"career\", chinese: \"职业生涯\", pinyin: \"zhíyèshēngyá\" },\n    { english: \"vocation\", chinese: \"职业\", pinyin: \"zhíyè\" },\n    { english: \"calling\", chinese: \"使命\", pinyin: \"shǐmìng\" },\n    { english: \"mission\", chinese: \"使命\", pinyin: \"shǐmìng\" },\n    { english: \"purpose\", chinese: \"目的\", pinyin: \"mùdì\" },\n    { english: \"objective\", chinese: \"目标\", pinyin: \"mùbiāo\" },\n    { english: \"goal\", chinese: \"目标\", pinyin: \"mùbiāo\" },\n    { english: \"target\", chinese: \"目标\", pinyin: \"mùbiāo\" },\n    { english: \"aim\", chinese: \"目标\", pinyin: \"mùbiāo\" },\n    { english: \"intention\", chinese: \"意图\", pinyin: \"yìtú\" },\n    { english: \"motive\", chinese: \"动机\", pinyin: \"dòngjī\" },\n    { english: \"reason\", chinese: \"原因\", pinyin: \"yuányīn\" },\n    { english: \"cause\", chinese: \"原因\", pinyin: \"yuányīn\" },\n    { english: \"effect\", chinese: \"效果\", pinyin: \"xiàoguǒ\" },\n    { english: \"consequence\", chinese: \"后果\", pinyin: \"hòuguǒ\" },\n    { english: \"result\", chinese: \"结果\", pinyin: \"jiéguǒ\" },\n    { english: \"outcome\", chinese: \"结果\", pinyin: \"jiéguǒ\" },\n    { english: \"output\", chinese: \"输出\", pinyin: \"shūchū\" },\n    { english: \"input\", chinese: \"输入\", pinyin: \"shūrù\" },\n    { english: \"process\", chinese: \"过程\", pinyin: \"guòchéng\" },\n    { english: \"procedure\", chinese: \"程序\", pinyin: \"chéngxù\" },\n    { english: \"protocol\", chinese: \"协议\", pinyin: \"xiéyì\" },\n    { english: \"standard\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"norm\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"convention\", chinese: \"惯例\", pinyin: \"guànlì\" },\n    { english: \"tradition\", chinese: \"传统\", pinyin: \"chuántǒng\" },\n    { english: \"custom\", chinese: \"习俗\", pinyin: \"xísú\" },\n    { english: \"habit\", chinese: \"习惯\", pinyin: \"xíguàn\" },\n    { english: \"routine\", chinese: \"例行公事\", pinyin: \"lìxínggōngshì\" },\n    { english: \"ritual\", chinese: \"仪式\", pinyin: \"yíshì\" },\n    { english: \"ceremony\", chinese: \"典礼\", pinyin: \"diǎnlǐ\" },\n    { english: \"celebration\", chinese: \"庆祝\", pinyin: \"qìngzhù\" },\n    { english: \"festival\", chinese: \"节日\", pinyin: \"jiérì\" },\n    { english: \"event\", chinese: \"事件\", pinyin: \"shìjiàn\" },\n    { english: \"occurrence\", chinese: \"发生\", pinyin: \"fāshēng\" },\n    { english: \"incident\", chinese: \"事件\", pinyin: \"shìjiàn\" },\n    { english: \"accident\", chinese: \"事故\", pinyin: \"shìgù\" },\n    { english: \"emergency\", chinese: \"紧急情况\", pinyin: \"jǐnjíqíngkuàng\" },\n    { english: \"crisis\", chinese: \"危机\", pinyin: \"wēijī\" },\n    { english: \"disaster\", chinese: \"灾难\", pinyin: \"zāinàn\" },\n    { english: \"catastrophe\", chinese: \"大灾难\", pinyin: \"dàzāinàn\" },\n    { english: \"tragedy\", chinese: \"悲剧\", pinyin: \"bēijù\" },\n    { english: \"comedy\", chinese: \"喜剧\", pinyin: \"xǐjù\" },\n    { english: \"drama\", chinese: \"戏剧\", pinyin: \"xìjù\" },\n    { english: \"theater\", chinese: \"剧院\", pinyin: \"jùyuàn\" },\n    { english: \"performance\", chinese: \"表演\", pinyin: \"biǎoyǎn\" },\n    { english: \"show\", chinese: \"演出\", pinyin: \"yǎnchū\" },\n    { english: \"exhibition\", chinese: \"展览\", pinyin: \"zhǎnlǎn\" },\n    { english: \"display\", chinese: \"展示\", pinyin: \"zhǎnshì\" },\n    { english: \"presentation\", chinese: \"演示\", pinyin: \"yǎnshì\" },\n    { english: \"demonstration\", chinese: \"示范\", pinyin: \"shìfàn\" },\n    { english: \"illustration\", chinese: \"说明\", pinyin: \"shuōmíng\" },\n    { english: \"explanation\", chinese: \"解释\", pinyin: \"jiěshì\" },\n    { english: \"description\", chinese: \"描述\", pinyin: \"miáoshù\" },\n    { english: \"definition\", chinese: \"定义\", pinyin: \"dìngyì\" },\n    { english: \"clarification\", chinese: \"澄清\", pinyin: \"chéngqīng\" },\n    { english: \"interpretation\", chinese: \"解释\", pinyin: \"jiěshì\" },\n    { english: \"understanding\", chinese: \"理解\", pinyin: \"lǐjiě\" },\n    { english: \"comprehension\", chinese: \"理解\", pinyin: \"lǐjiě\" },\n    { english: \"knowledge\", chinese: \"知识\", pinyin: \"zhīshi\" },\n    { english: \"wisdom\", chinese: \"智慧\", pinyin: \"zhìhuì\" },\n    { english: \"intelligence\", chinese: \"智力\", pinyin: \"zhìlì\" },\n    { english: \"intellect\", chinese: \"智力\", pinyin: \"zhìlì\" },\n    { english: \"mind\", chinese: \"心智\", pinyin: \"xīnzhì\" },\n    { english: \"brain\", chinese: \"大脑\", pinyin: \"dànǎo\" },\n    { english: \"thought\", chinese: \"思想\", pinyin: \"sīxiǎng\" },\n    { english: \"idea\", chinese: \"想法\", pinyin: \"xiǎngfǎ\" },\n    { english: \"concept\", chinese: \"概念\", pinyin: \"gàiniàn\" },\n    { english: \"notion\", chinese: \"概念\", pinyin: \"gàiniàn\" },\n    { english: \"impression\", chinese: \"印象\", pinyin: \"yìnxiàng\" },\n    { english: \"perception\", chinese: \"感知\", pinyin: \"gǎnzhī\" },\n    { english: \"awareness\", chinese: \"意识\", pinyin: \"yìshí\" },\n    { english: \"consciousness\", chinese: \"意识\", pinyin: \"yìshí\" },\n    { english: \"recognition\", chinese: \"认识\", pinyin: \"rènshi\" },\n    { english: \"realization\", chinese: \"认识\", pinyin: \"rènshi\" },\n    { english: \"discovery\", chinese: \"发现\", pinyin: \"fāxiàn\" },\n    { english: \"invention\", chinese: \"发明\", pinyin: \"fāmíng\" },\n    { english: \"creation\", chinese: \"创造\", pinyin: \"chuàngzào\" },\n    { english: \"innovation\", chinese: \"创新\", pinyin: \"chuàngxīn\" },\n    { english: \"originality\", chinese: \"独创性\", pinyin: \"dúchuàngxìng\" },\n    { english: \"creativity\", chinese: \"创造力\", pinyin: \"chuàngzàolì\" },\n    { english: \"imagination\", chinese: \"想象力\", pinyin: \"xiǎngxiànglì\" },\n    { english: \"fantasy\", chinese: \"幻想\", pinyin: \"huànxiǎng\" },\n    { english: \"vision\", chinese: \"愿景\", pinyin: \"yuànjǐng\" },\n    { english: \"dream\", chinese: \"梦想\", pinyin: \"mèngxiǎng\" },\n    { english: \"aspiration\", chinese: \"愿望\", pinyin: \"yuànwàng\" },\n    { english: \"ambition\", chinese: \"雄心\", pinyin: \"xióngxīn\" },\n    { english: \"desire\", chinese: \"欲望\", pinyin: \"yùwàng\" },\n    { english: \"wish\", chinese: \"愿望\", pinyin: \"yuànwàng\" },\n    { english: \"hope\", chinese: \"希望\", pinyin: \"xīwàng\" },\n    { english: \"expectation\", chinese: \"期望\", pinyin: \"qīwàng\" },\n    { english: \"anticipation\", chinese: \"预期\", pinyin: \"yùqī\" },\n    { english: \"prediction\", chinese: \"预测\", pinyin: \"yùcè\" },\n    { english: \"forecast\", chinese: \"预报\", pinyin: \"yùbào\" },\n    { english: \"projection\", chinese: \"预测\", pinyin: \"yùcè\" },\n    { english: \"estimation\", chinese: \"估计\", pinyin: \"gūjì\" },\n    { english: \"approximation\", chinese: \"近似\", pinyin: \"jìnsì\" },\n    { english: \"calculation\", chinese: \"计算\", pinyin: \"jìsuàn\" },\n    { english: \"computation\", chinese: \"计算\", pinyin: \"jìsuàn\" },\n    { english: \"mathematics\", chinese: \"数学\", pinyin: \"shùxué\" },\n    { english: \"arithmetic\", chinese: \"算术\", pinyin: \"suànshù\" },\n    { english: \"logic\", chinese: \"逻辑\", pinyin: \"luóji\" },\n    { english: \"reasoning\", chinese: \"推理\", pinyin: \"tuīlǐ\" },\n    { english: \"argument\", chinese: \"论证\", pinyin: \"lùnzhèng\" },\n    { english: \"evidence\", chinese: \"证据\", pinyin: \"zhèngjù\" },\n    { english: \"proof\", chinese: \"证明\", pinyin: \"zhèngmíng\" },\n    { english: \"verification\", chinese: \"验证\", pinyin: \"yànzhèng\" },\n    { english: \"confirmation\", chinese: \"确认\", pinyin: \"quèrèn\" },\n    { english: \"validation\", chinese: \"验证\", pinyin: \"yànzhèng\" },\n    { english: \"authentication\", chinese: \"认证\", pinyin: \"rènzhèng\" },\n    { english: \"authorization\", chinese: \"授权\", pinyin: \"shòuquán\" },\n    { english: \"permission\", chinese: \"许可\", pinyin: \"xǔkě\" },\n    { english: \"license\", chinese: \"执照\", pinyin: \"zhízhào\" },\n    { english: \"certificate\", chinese: \"证书\", pinyin: \"zhèngshū\" },\n    { english: \"diploma\", chinese: \"文凭\", pinyin: \"wénpíng\" },\n    { english: \"degree\", chinese: \"学位\", pinyin: \"xuéwèi\" },\n    { english: \"qualification\", chinese: \"资格\", pinyin: \"zīgé\" },\n    { english: \"credential\", chinese: \"凭证\", pinyin: \"píngzhèng\" },\n    { english: \"identification\", chinese: \"身份证明\", pinyin: \"shēnfènzhèngmíng\" },\n    { english: \"identity\", chinese: \"身份\", pinyin: \"shēnfèn\" },\n    { english: \"character\", chinese: \"性格\", pinyin: \"xìnggé\" },\n    { english: \"personality\", chinese: \"个性\", pinyin: \"gèxìng\" },\n    { english: \"individuality\", chinese: \"个性\", pinyin: \"gèxìng\" },\n    { english: \"uniqueness\", chinese: \"独特性\", pinyin: \"dútèxìng\" },\n    { english: \"distinction\", chinese: \"区别\", pinyin: \"qūbié\" },\n    { english: \"difference\", chinese: \"差异\", pinyin: \"chāyì\" },\n    { english: \"variation\", chinese: \"变化\", pinyin: \"biànhuà\" },\n    { english: \"diversity\", chinese: \"多样性\", pinyin: \"duōyàngxìng\" },\n    { english: \"variety\", chinese: \"多样\", pinyin: \"duōyàng\" },\n    { english: \"multiplicity\", chinese: \"多样性\", pinyin: \"duōyàngxìng\" },\n    { english: \"complexity\", chinese: \"复杂性\", pinyin: \"fùzáxìng\" },\n    { english: \"simplicity\", chinese: \"简单性\", pinyin: \"jiǎndānxìng\" },\n    { english: \"clarity\", chinese: \"清晰\", pinyin: \"qīngxī\" },\n    { english: \"transparency\", chinese: \"透明度\", pinyin: \"tòumíngdù\" },\n    { english: \"opacity\", chinese: \"不透明\", pinyin: \"bùtòumíng\" },\n    { english: \"ambiguity\", chinese: \"模糊性\", pinyin: \"móhúxìng\" },\n    { english: \"uncertainty\", chinese: \"不确定性\", pinyin: \"bùquèdìngxìng\" },\n    { english: \"doubt\", chinese: \"疑虑\", pinyin: \"yílǜ\" },\n    { english: \"suspicion\", chinese: \"怀疑\", pinyin: \"huáiyí\" },\n    { english: \"skepticism\", chinese: \"怀疑主义\", pinyin: \"huáiyízhǔyì\" },\n    { english: \"criticism\", chinese: \"批评\", pinyin: \"pīpíng\" },\n    { english: \"evaluation\", chinese: \"评估\", pinyin: \"pínggū\" },\n    { english: \"assessment\", chinese: \"评价\", pinyin: \"píngjià\" },\n    { english: \"judgment\", chinese: \"判断\", pinyin: \"pànduàn\" },\n    { english: \"opinion\", chinese: \"意见\", pinyin: \"yìjiàn\" },\n    { english: \"view\", chinese: \"观点\", pinyin: \"guāndiǎn\" },\n    { english: \"perspective\", chinese: \"观点\", pinyin: \"guāndiǎn\" },\n    { english: \"viewpoint\", chinese: \"观点\", pinyin: \"guāndiǎn\" },\n    { english: \"standpoint\", chinese: \"立场\", pinyin: \"lìchǎng\" },\n    { english: \"position\", chinese: \"立场\", pinyin: \"lìchǎng\" },\n    { english: \"stance\", chinese: \"立场\", pinyin: \"lìchǎng\" },\n    { english: \"attitude\", chinese: \"态度\", pinyin: \"tàidù\" },\n    { english: \"approach\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"method\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"technique\", chinese: \"技术\", pinyin: \"jìshù\" },\n    { english: \"technology\", chinese: \"技术\", pinyin: \"jìshù\" },\n    { english: \"innovation\", chinese: \"创新\", pinyin: \"chuàngxīn\" },\n    { english: \"advancement\", chinese: \"进步\", pinyin: \"jìnbù\" },\n    { english: \"progress\", chinese: \"进展\", pinyin: \"jìnzhǎn\" },\n    { english: \"development\", chinese: \"发展\", pinyin: \"fāzhǎn\" },\n    { english: \"evolution\", chinese: \"演化\", pinyin: \"yǎnhuà\" },\n    { english: \"transformation\", chinese: \"变革\", pinyin: \"biàngé\" },\n    { english: \"revolution\", chinese: \"革命\", pinyin: \"gémìng\" },\n    { english: \"reform\", chinese: \"改革\", pinyin: \"gǎigé\" },\n    { english: \"improvement\", chinese: \"改善\", pinyin: \"gǎishàn\" },\n    { english: \"enhancement\", chinese: \"增强\", pinyin: \"zēngqiáng\" },\n    { english: \"optimization\", chinese: \"优化\", pinyin: \"yōuhuà\" },\n    { english: \"perfection\", chinese: \"完美\", pinyin: \"wánměi\" },\n    { english: \"excellence\", chinese: \"卓越\", pinyin: \"zhuóyuè\" },\n    { english: \"superiority\", chinese: \"优越性\", pinyin: \"yōuyuèxìng\" },\n    { english: \"advantage\", chinese: \"优势\", pinyin: \"yōushì\" },\n    { english: \"benefit\", chinese: \"益处\", pinyin: \"yìchù\" },\n    { english: \"profit\", chinese: \"利益\", pinyin: \"lìyì\" },\n    { english: \"gain\", chinese: \"收益\", pinyin: \"shōuyì\" },\n    { english: \"achievement\", chinese: \"成就\", pinyin: \"chéngjiù\" },\n    { english: \"accomplishment\", chinese: \"成就\", pinyin: \"chéngjiù\" },\n    { english: \"success\", chinese: \"成功\", pinyin: \"chénggōng\" },\n    { english: \"triumph\", chinese: \"胜利\", pinyin: \"shènglì\" },\n    { english: \"victory\", chinese: \"胜利\", pinyin: \"shènglì\" },\n    { english: \"conquest\", chinese: \"征服\", pinyin: \"zhēngfú\" },\n    { english: \"domination\", chinese: \"统治\", pinyin: \"tǒngzhì\" },\n    { english: \"control\", chinese: \"控制\", pinyin: \"kòngzhì\" },\n    { english: \"command\", chinese: \"指挥\", pinyin: \"zhǐhuī\" },\n    { english: \"leadership\", chinese: \"领导力\", pinyin: \"lǐngdǎolì\" },\n    { english: \"authority\", chinese: \"权威\", pinyin: \"quánwēi\" },\n    { english: \"power\", chinese: \"权力\", pinyin: \"quánlì\" },\n    { english: \"influence\", chinese: \"影响\", pinyin: \"yǐngxiǎng\" },\n    { english: \"impact\", chinese: \"冲击\", pinyin: \"chōngjī\" },\n    { english: \"effect\", chinese: \"效应\", pinyin: \"xiàoyìng\" },\n    { english: \"consequence\", chinese: \"后果\", pinyin: \"hòuguǒ\" },\n    { english: \"result\", chinese: \"结果\", pinyin: \"jiéguǒ\" },\n    { english: \"outcome\", chinese: \"结果\", pinyin: \"jiéguǒ\" },\n    { english: \"conclusion\", chinese: \"结论\", pinyin: \"jiélùn\" },\n    { english: \"end\", chinese: \"结尾\", pinyin: \"jiéwěi\" },\n    { english: \"termination\", chinese: \"终止\", pinyin: \"zhōngzhǐ\" },\n    { english: \"completion\", chinese: \"完成\", pinyin: \"wánchéng\" },\n    { english: \"fulfillment\", chinese: \"实现\", pinyin: \"shíxiàn\" },\n    { english: \"realization\", chinese: \"实现\", pinyin: \"shíxiàn\" },\n    { english: \"actualization\", chinese: \"实现\", pinyin: \"shíxiàn\" },\n    { english: \"implementation\", chinese: \"实施\", pinyin: \"shíshī\" },\n    { english: \"execution\", chinese: \"执行\", pinyin: \"zhíxíng\" },\n    { english: \"performance\", chinese: \"执行\", pinyin: \"zhíxíng\" },\n    { english: \"operation\", chinese: \"操作\", pinyin: \"cāozuò\" },\n    { english: \"function\", chinese: \"功能\", pinyin: \"gōngnéng\" },\n    { english: \"functionality\", chinese: \"功能性\", pinyin: \"gōngnéngxìng\" },\n    { english: \"capability\", chinese: \"能力\", pinyin: \"nénglì\" },\n    { english: \"capacity\", chinese: \"容量\", pinyin: \"róngliàng\" },\n    { english: \"potential\", chinese: \"潜力\", pinyin: \"qiánlì\" },\n    { english: \"possibility\", chinese: \"可能性\", pinyin: \"kěnéngxìng\" },\n    { english: \"opportunity\", chinese: \"机会\", pinyin: \"jīhuì\" },\n    { english: \"chance\", chinese: \"机会\", pinyin: \"jīhuì\" },\n    { english: \"probability\", chinese: \"可能性\", pinyin: \"kěnéngxìng\" },\n    { english: \"likelihood\", chinese: \"可能性\", pinyin: \"kěnéngxìng\" },\n    { english: \"feasibility\", chinese: \"可行性\", pinyin: \"kěxíngxìng\" },\n    { english: \"viability\", chinese: \"可行性\", pinyin: \"kěxíngxìng\" },\n    { english: \"sustainability\", chinese: \"可持续性\", pinyin: \"kěchíxùxìng\" },\n    { english: \"durability\", chinese: \"耐久性\", pinyin: \"nàijiǔxìng\" },\n    { english: \"longevity\", chinese: \"长寿\", pinyin: \"chángshòu\" },\n    { english: \"permanence\", chinese: \"永恒\", pinyin: \"yǒnghéng\" },\n    { english: \"eternity\", chinese: \"永恒\", pinyin: \"yǒnghéng\" },\n    { english: \"infinity\", chinese: \"无限\", pinyin: \"wúxiàn\" },\n    { english: \"immensity\", chinese: \"巨大\", pinyin: \"jùdà\" },\n    { english: \"enormity\", chinese: \"巨大\", pinyin: \"jùdà\" },\n    { english: \"magnitude\", chinese: \"大小\", pinyin: \"dàxiǎo\" },\n    { english: \"scale\", chinese: \"规模\", pinyin: \"guīmó\" },\n    { english: \"dimension\", chinese: \"维度\", pinyin: \"wéidù\" },\n    { english: \"proportion\", chinese: \"比例\", pinyin: \"bǐlì\" },\n    { english: \"ratio\", chinese: \"比率\", pinyin: \"bǐlǜ\" },\n    { english: \"relationship\", chinese: \"关系\", pinyin: \"guānxi\" },\n    { english: \"connection\", chinese: \"连接\", pinyin: \"liánjiē\" },\n    { english: \"link\", chinese: \"链接\", pinyin: \"liànjiē\" },\n    { english: \"bond\", chinese: \"纽带\", pinyin: \"niǔdài\" },\n    { english: \"tie\", chinese: \"纽带\", pinyin: \"niǔdài\" },\n    { english: \"association\", chinese: \"关联\", pinyin: \"guānlián\" },\n    { english: \"correlation\", chinese: \"相关性\", pinyin: \"xiāngguānxìng\" },\n    { english: \"correspondence\", chinese: \"对应\", pinyin: \"duìyìng\" },\n    { english: \"equivalence\", chinese: \"等价\", pinyin: \"děngjià\" },\n    { english: \"similarity\", chinese: \"相似性\", pinyin: \"xiāngsìxìng\" },\n    { english: \"resemblance\", chinese: \"相似\", pinyin: \"xiāngsì\" },\n    { english: \"likeness\", chinese: \"相似\", pinyin: \"xiāngsì\" },\n    { english: \"analogy\", chinese: \"类比\", pinyin: \"lèibǐ\" },\n    { english: \"comparison\", chinese: \"比较\", pinyin: \"bǐjiào\" },\n    { english: \"contrast\", chinese: \"对比\", pinyin: \"duìbǐ\" },\n    { english: \"distinction\", chinese: \"区别\", pinyin: \"qūbié\" },\n    { english: \"discrimination\", chinese: \"区分\", pinyin: \"qūfēn\" },\n    { english: \"differentiation\", chinese: \"区分\", pinyin: \"qūfēn\" },\n    { english: \"classification\", chinese: \"分类\", pinyin: \"fēnlèi\" },\n    { english: \"categorization\", chinese: \"分类\", pinyin: \"fēnlèi\" },\n    { english: \"organization\", chinese: \"组织\", pinyin: \"zǔzhī\" },\n    { english: \"arrangement\", chinese: \"安排\", pinyin: \"ānpái\" },\n    { english: \"structure\", chinese: \"结构\", pinyin: \"jiégòu\" },\n    { english: \"system\", chinese: \"系统\", pinyin: \"xìtǒng\" },\n    { english: \"mechanism\", chinese: \"机制\", pinyin: \"jīzhì\" },\n    { english: \"apparatus\", chinese: \"装置\", pinyin: \"zhuāngzhì\" },\n    { english: \"device\", chinese: \"设备\", pinyin: \"shèbèi\" },\n    { english: \"instrument\", chinese: \"工具\", pinyin: \"gōngjù\" },\n    { english: \"tool\", chinese: \"工具\", pinyin: \"gōngjù\" },\n    { english: \"equipment\", chinese: \"设备\", pinyin: \"shèbèi\" },\n    { english: \"machinery\", chinese: \"机械\", pinyin: \"jīxiè\" },\n    { english: \"technology\", chinese: \"技术\", pinyin: \"jìshù\" },\n    { english: \"technique\", chinese: \"技巧\", pinyin: \"jìqiǎo\" },\n    { english: \"method\", chinese: \"方法\", pinyin: \"fāngfǎ\" },\n    { english: \"procedure\", chinese: \"程序\", pinyin: \"chéngxù\" },\n    { english: \"process\", chinese: \"过程\", pinyin: \"guòchéng\" },\n    { english: \"operation\", chinese: \"操作\", pinyin: \"cāozuò\" }\n  ]\n};\n\n// Function to create vocabulary groups\nfunction createVocabularyGroups(vocabularyArray, groupName, level) {\n  const groups = [];\n  for (let i = 0; i < vocabularyArray.length; i += 10) {\n    const words = vocabularyArray.slice(i, i + 10);\n    if (words.length === 10) { // Only create groups with exactly 10 words\n      groups.push({\n        name: `${groupName} ${Math.floor(i / 10) + 1}`,\n        level: level,\n        words: words\n      });\n    }\n  }\n  return groups;\n}\n\n// Main expansion function\nasync function expandVocabulary() {\n  if (!process.env.DATABASE_URL) {\n    console.error('DATABASE_URL environment variable is required');\n    process.exit(1);\n  }\n\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n  try {\n    console.log('🚀 Starting HSK vocabulary expansion to 3,500+ words...');\n    \n    // Create all vocabulary groups\n    let allGroups = [];\n    \n    // HSK Level 1 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level1, 'HSK 1', 1));\n    \n    // HSK Level 2 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level2, 'HSK 2', 2));\n    \n    // HSK Level 3 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level3, 'HSK 3', 3));\n    \n    // HSK Level 4 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level4_part1, 'HSK 4', 4));\n    \n    // HSK Level 5 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level5, 'HSK 5', 5));\n    \n    // HSK Level 6 groups\n    allGroups.push(...createVocabularyGroups(hskVocabulary.level6, 'HSK 6', 6));\n\n    console.log(`📚 Created ${allGroups.length} vocabulary groups`);\n    console.log(`📝 Total words: ${allGroups.length * 10}`);\n\n    // Insert groups and words\n    for (const group of allGroups) {\n      console.log(`📖 Adding group: ${group.name} (Level ${group.level})`);\n      \n      // Insert group\n      const groupResult = await pool.query(\n        'INSERT INTO word_groups (title, description, is_learned) VALUES ($1, $2, $3) RETURNING id',\n        [group.name, `${group.name} - Authentic HSK Level ${group.level} vocabulary`, 0]\n      );\n      \n      const groupId = groupResult.rows[0].id;\n      \n      // Insert words for this group with order index\n      for (let i = 0; i < group.words.length; i++) {\n        const word = group.words[i];\n        await pool.query(\n          'INSERT INTO vocabulary_words (group_id, english_text, chinese_text, pinyin_text, order_index) VALUES ($1, $2, $3, $4, $5)',\n          [groupId, word.english, word.chinese, word.pinyin, i]\n        );\n      }\n    }\n\n    console.log('✅ HSK vocabulary expansion completed successfully!');\n    console.log(`🎯 Total vocabulary groups: ${allGroups.length}`);\n    console.log(`🌟 Total words: ${allGroups.length * 10}`);\n    console.log('📈 Progress tracking will automatically update');\n    console.log('🔄 Random patterns will work with all new vocabulary');\n    console.log('🎵 Microsoft Xiaoxiao voice ready for all Chinese words');\n    \n  } catch (error) {\n    console.error('❌ Error during vocabulary expansion:', error);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Run the expansion\nexpandVocabulary();\n\nexport { hskVocabulary, createVocabularyGroups, expandVocabulary };","size_bytes":92382},"hsk-expansion-data.js":{"content":"// HSK-based Vocabulary Expansion to 3,500 Words\n// Organized by authentic HSK levels 1-6 with English, Chinese, and Pinyin\n\nconst hskExpansionData = {\n  // HSK Level 1 (150 words) - Basic Fundamentals\n  hsk1_additional: [\n    // Adding to existing 50 words to complete HSK 1\n    { english: \"I, me\", chinese: \"我\", pinyin: \"wǒ\" },\n    { english: \"we, us\", chinese: \"我们\", pinyin: \"wǒmen\" },\n    { english: \"you\", chinese: \"你\", pinyin: \"nǐ\" },\n    { english: \"he, him\", chinese: \"他\", pinyin: \"tā\" },\n    { english: \"she, her\", chinese: \"她\", pinyin: \"tā\" },\n    { english: \"this\", chinese: \"这\", pinyin: \"zhè\" },\n    { english: \"that\", chinese: \"那\", pinyin: \"nà\" },\n    { english: \"which\", chinese: \"哪\", pinyin: \"nǎ\" },\n    { english: \"where\", chinese: \"哪儿\", pinyin: \"nǎr\" },\n    { english: \"who\", chinese: \"谁\", pinyin: \"shéi\" },\n    { english: \"what\", chinese: \"什么\", pinyin: \"shénme\" },\n    { english: \"how many\", chinese: \"多少\", pinyin: \"duōshǎo\" },\n    { english: \"a few\", chinese: \"几\", pinyin: \"jǐ\" },\n    { english: \"how\", chinese: \"怎么\", pinyin: \"zěnme\" },\n    { english: \"how about\", chinese: \"怎么样\", pinyin: \"zěnmeyàng\" },\n    { english: \"one\", chinese: \"一\", pinyin: \"yī\" },\n    { english: \"two\", chinese: \"二\", pinyin: \"èr\" },\n    { english: \"three\", chinese: \"三\", pinyin: \"sān\" },\n    { english: \"four\", chinese: \"四\", pinyin: \"sì\" },\n    { english: \"five\", chinese: \"五\", pinyin: \"wǔ\" },\n    { english: \"six\", chinese: \"六\", pinyin: \"liù\" },\n    { english: \"seven\", chinese: \"七\", pinyin: \"qī\" },\n    { english: \"eight\", chinese: \"八\", pinyin: \"bā\" },\n    { english: \"nine\", chinese: \"九\", pinyin: \"jiǔ\" },\n    { english: \"ten\", chinese: \"十\", pinyin: \"shí\" },\n    { english: \"measure word\", chinese: \"个\", pinyin: \"gè\" },\n    { english: \"years old\", chinese: \"岁\", pinyin: \"suì\" },\n    { english: \"book (classifier)\", chinese: \"本\", pinyin: \"běn\" },\n    { english: \"some\", chinese: \"些\", pinyin: \"xiē\" },\n    { english: \"piece\", chinese: \"块\", pinyin: \"kuài\" },\n    { english: \"no, not\", chinese: \"不\", pinyin: \"bù\" },\n    { english: \"no, not have\", chinese: \"没\", pinyin: \"méi\" },\n    { english: \"very\", chinese: \"很\", pinyin: \"hěn\" },\n    { english: \"too\", chinese: \"太\", pinyin: \"tài\" },\n    { english: \"all\", chinese: \"都\", pinyin: \"dōu\" },\n    { english: \"a little\", chinese: \"一点儿\", pinyin: \"yīdiǎnr\" },\n    { english: \"and\", chinese: \"和\", pinyin: \"hé\" },\n    { english: \"at, in\", chinese: \"在\", pinyin: \"zài\" },\n    { english: \"hello\", chinese: \"喂\", pinyin: \"wèi\" },\n    { english: \"home\", chinese: \"家\", pinyin: \"jiā\" },\n    { english: \"school\", chinese: \"学校\", pinyin: \"xuéxiào\" },\n    { english: \"restaurant\", chinese: \"饭店\", pinyin: \"fàndiàn\" },\n    { english: \"store\", chinese: \"商店\", pinyin: \"shāngdiàn\" },\n    { english: \"hospital\", chinese: \"医院\", pinyin: \"yīyuàn\" },\n    { english: \"China\", chinese: \"中国\", pinyin: \"Zhōngguò\" },\n    { english: \"Beijing\", chinese: \"北京\", pinyin: \"Běijīng\" },\n    { english: \"up\", chinese: \"上\", pinyin: \"shàng\" },\n    { english: \"down\", chinese: \"下\", pinyin: \"xià\" },\n    { english: \"front\", chinese: \"前面\", pinyin: \"qiánmiàn\" },\n    { english: \"behind\", chinese: \"后面\", pinyin: \"hòumiàn\" },\n    { english: \"inside\", chinese: \"里面\", pinyin: \"lǐmiàn\" },\n    { english: \"today\", chinese: \"今天\", pinyin: \"jīntiān\" },\n    { english: \"tomorrow\", chinese: \"明天\", pinyin: \"míngtiān\" },\n    { english: \"yesterday\", chinese: \"昨天\", pinyin: \"zuótiān\" },\n    { english: \"morning\", chinese: \"上午\", pinyin: \"shàngwǔ\" },\n    { english: \"noon\", chinese: \"中午\", pinyin: \"zhōngwǔ\" },\n    { english: \"afternoon\", chinese: \"下午\", pinyin: \"xiàwǔ\" },\n    { english: \"year\", chinese: \"年\", pinyin: \"nián\" },\n    { english: \"month\", chinese: \"月\", pinyin: \"yuè\" },\n    { english: \"date\", chinese: \"号\", pinyin: \"hào\" },\n    { english: \"week\", chinese: \"星期\", pinyin: \"xīngqī\" },\n    { english: \"o'clock\", chinese: \"点\", pinyin: \"diǎn\" },\n    { english: \"minute\", chinese: \"分钟\", pinyin: \"fēnzhōng\" },\n    { english: \"now\", chinese: \"现在\", pinyin: \"xiànzài\" },\n    { english: \"time\", chinese: \"时候\", pinyin: \"shíhou\" },\n    { english: \"teacher\", chinese: \"老师\", pinyin: \"lǎoshī\" },\n    { english: \"student\", chinese: \"学生\", pinyin: \"xuéshēng\" },\n    { english: \"classmate\", chinese: \"同学\", pinyin: \"tóngxué\" },\n    { english: \"friend\", chinese: \"朋友\", pinyin: \"péngyǒu\" },\n    { english: \"doctor\", chinese: \"医生\", pinyin: \"yīshēng\" },\n    { english: \"sir\", chinese: \"先生\", pinyin: \"xiānsheng\" },\n    { english: \"Miss\", chinese: \"小姐\", pinyin: \"xiǎojiě\" },\n    { english: \"clothes\", chinese: \"衣服\", pinyin: \"yīfu\" },\n    { english: \"water\", chinese: \"水\", pinyin: \"shuǐ\" },\n    { english: \"dish\", chinese: \"菜\", pinyin: \"cài\" },\n    { english: \"rice\", chinese: \"米饭\", pinyin: \"mǐfàn\" },\n    { english: \"fruit\", chinese: \"水果\", pinyin: \"shuǐguǒ\" },\n    { english: \"apple\", chinese: \"苹果\", pinyin: \"píngguǒ\" },\n    { english: \"tea\", chinese: \"茶\", pinyin: \"chá\" },\n    { english: \"cup\", chinese: \"杯子\", pinyin: \"bēizi\" },\n    { english: \"money\", chinese: \"钱\", pinyin: \"qián\" },\n    { english: \"airplane\", chinese: \"飞机\", pinyin: \"fēijī\" },\n    { english: \"taxi\", chinese: \"出租车\", pinyin: \"chūzūchē\" },\n    { english: \"television\", chinese: \"电视\", pinyin: \"diànshì\" },\n    { english: \"computer\", chinese: \"电脑\", pinyin: \"diànnǎo\" },\n    { english: \"movie\", chinese: \"电影\", pinyin: \"diànyǐng\" },\n    { english: \"weather\", chinese: \"天气\", pinyin: \"tiānqì\" },\n    { english: \"cat\", chinese: \"猫\", pinyin: \"māo\" },\n    { english: \"dog\", chinese: \"狗\", pinyin: \"gǒu\" },\n    { english: \"thing\", chinese: \"东西\", pinyin: \"dōngxi\" },\n    { english: \"person\", chinese: \"人\", pinyin: \"rén\" },\n    { english: \"name\", chinese: \"名字\", pinyin: \"míngzi\" },\n    { english: \"book\", chinese: \"书\", pinyin: \"shū\" },\n    { english: \"Chinese\", chinese: \"汉语\", pinyin: \"hànyǔ\" },\n    { english: \"character\", chinese: \"字\", pinyin: \"zì\" },\n    { english: \"desk\", chinese: \"桌子\", pinyin: \"zhuōzi\" },\n    { english: \"chair\", chinese: \"椅子\", pinyin: \"yǐzi\" },\n    { english: \"thank\", chinese: \"谢谢\", pinyin: \"xièxie\" },\n    { english: \"you're welcome\", chinese: \"不客气\", pinyin: \"búkèqì\" },\n    { english: \"goodbye\", chinese: \"再见\", pinyin: \"zàijiàn\" },\n    { english: \"please\", chinese: \"请\", pinyin: \"qǐng\" },\n    { english: \"sorry\", chinese: \"对不起\", pinyin: \"duìbùqǐ\" },\n    { english: \"it doesn't matter\", chinese: \"没关系\", pinyin: \"méiguānxì\" },\n    { english: \"be\", chinese: \"是\", pinyin: \"shì\" },\n    { english: \"have\", chinese: \"有\", pinyin: \"yǒu\" },\n    { english: \"look\", chinese: \"看\", pinyin: \"kàn\" },\n    { english: \"listen\", chinese: \"听\", pinyin: \"tīng\" },\n    { english: \"speak\", chinese: \"说\", pinyin: \"shuō\" },\n    { english: \"read\", chinese: \"读\", pinyin: \"dú\" },\n    { english: \"write\", chinese: \"写\", pinyin: \"xiě\" },\n    { english: \"see\", chinese: \"看见\", pinyin: \"kànjiàn\" },\n    { english: \"call\", chinese: \"叫\", pinyin: \"jiào\" },\n    { english: \"come\", chinese: \"来\", pinyin: \"lái\" },\n    { english: \"return\", chinese: \"回\", pinyin: \"huí\" }\n  ],\n\n  // HSK Level 2 (150 new words) - Expanding Basics\n  hsk2: [\n    { english: \"you (polite)\", chinese: \"您\", pinyin: \"nín\" },\n    { english: \"it\", chinese: \"它\", pinyin: \"tā\" },\n    { english: \"everyone\", chinese: \"大家\", pinyin: \"dàjiā\" },\n    { english: \"every\", chinese: \"每\", pinyin: \"měi\" },\n    { english: \"why\", chinese: \"为什么\", pinyin: \"wèishénme\" },\n    { english: \"zero\", chinese: \"零\", pinyin: \"líng\" },\n    { english: \"two (used with measure words)\", chinese: \"两\", pinyin: \"liǎng\" },\n    { english: \"hundred\", chinese: \"百\", pinyin: \"bǎi\" },\n    { english: \"thousand\", chinese: \"千\", pinyin: \"qiān\" },\n    { english: \"first\", chinese: \"第一\", pinyin: \"dìyī\" },\n    { english: \"times\", chinese: \"次\", pinyin: \"cì\" },\n    { english: \"piece\", chinese: \"件\", pinyin: \"jiàn\" },\n    { english: \"don't\", chinese: \"别\", pinyin: \"bié\" },\n    { english: \"very\", chinese: \"非常\", pinyin: \"fēicháng\" },\n    { english: \"also\", chinese: \"也\", pinyin: \"yě\" },\n    { english: \"still\", chinese: \"还\", pinyin: \"hái\" },\n    { english: \"most\", chinese: \"最\", pinyin: \"zuì\" },\n    { english: \"really\", chinese: \"真\", pinyin: \"zhēn\" },\n    { english: \"in process\", chinese: \"正在\", pinyin: \"zhèngzài\" },\n    { english: \"already\", chinese: \"已经\", pinyin: \"yǐjīng\" },\n    { english: \"together\", chinese: \"一起\", pinyin: \"yìqǐ\" },\n    { english: \"again\", chinese: \"再\", pinyin: \"zài\" },\n    { english: \"at once\", chinese: \"就\", pinyin: \"jiù\" },\n    { english: \"because...so\", chinese: \"因为……所以……\", pinyin: \"yīnwèi…suǒyǐ…\" },\n    { english: \"although...but\", chinese: \"虽然……但是……\", pinyin: \"suīrán…dànshì…\" },\n    { english: \"from\", chinese: \"从\", pinyin: \"cóng\" },\n    { english: \"compared to\", chinese: \"比\", pinyin: \"bǐ\" },\n    { english: \"toward\", chinese: \"往\", pinyin: \"wǎng\" },\n    { english: \"distance\", chinese: \"离\", pinyin: \"lí\" },\n    { english: \"airport\", chinese: \"机场\", pinyin: \"jīchǎng\" },\n    { english: \"classroom\", chinese: \"教室\", pinyin: \"jiàoshì\" },\n    { english: \"room\", chinese: \"房间\", pinyin: \"fángjiān\" },\n    { english: \"road\", chinese: \"路\", pinyin: \"lù\" },\n    { english: \"left\", chinese: \"左边\", pinyin: \"zuǒbiān\" },\n    { english: \"right\", chinese: \"右边\", pinyin: \"yòubiān\" },\n    { english: \"outside\", chinese: \"外\", pinyin: \"wài\" },\n    { english: \"beside\", chinese: \"旁边\", pinyin: \"pángbiān\" },\n    { english: \"a moment\", chinese: \"一下\", pinyin: \"yīxià\" },\n    { english: \"morning\", chinese: \"早上\", pinyin: \"zǎoshàng\" },\n    { english: \"night\", chinese: \"晚上\", pinyin: \"wǎnshàng\" },\n    { english: \"hour\", chinese: \"小时\", pinyin: \"xiǎoshí\" },\n    { english: \"time\", chinese: \"时间\", pinyin: \"shíjiān\" },\n    { english: \"last year\", chinese: \"去年\", pinyin: \"qùnián\" },\n    { english: \"day\", chinese: \"日\", pinyin: \"rì\" },\n    { english: \"birthday\", chinese: \"生日\", pinyin: \"shēngrì\" },\n    { english: \"older brother\", chinese: \"哥哥\", pinyin: \"gēge\" },\n    { english: \"older sister\", chinese: \"姐姐\", pinyin: \"jiějie\" },\n    { english: \"younger brother\", chinese: \"弟弟\", pinyin: \"dìdi\" },\n    { english: \"younger sister\", chinese: \"妹妹\", pinyin: \"mèimei\" },\n    { english: \"husband\", chinese: \"丈夫\", pinyin: \"zhàngfu\" },\n    { english: \"wife\", chinese: \"妻子\", pinyin: \"qīzi\" },\n    { english: \"child\", chinese: \"孩子\", pinyin: \"háizi\" },\n    { english: \"man\", chinese: \"男人\", pinyin: \"nánrén\" },\n    { english: \"woman\", chinese: \"女人\", pinyin: \"nǚrén\" },\n    { english: \"waiter\", chinese: \"服务员\", pinyin: \"fúwùyuán\" },\n    { english: \"fish\", chinese: \"鱼\", pinyin: \"yú\" },\n    { english: \"mutton\", chinese: \"羊肉\", pinyin: \"yángròu\" },\n    { english: \"milk\", chinese: \"牛奶\", pinyin: \"niúnǎi\" },\n    { english: \"egg\", chinese: \"鸡蛋\", pinyin: \"jīdàn\" },\n    { english: \"watermelon\", chinese: \"西瓜\", pinyin: \"xīguā\" },\n    { english: \"coffee\", chinese: \"咖啡\", pinyin: \"kāfēi\" },\n    { english: \"snow\", chinese: \"雪\", pinyin: \"xuě\" },\n    { english: \"medicine\", chinese: \"药\", pinyin: \"yào\" },\n    { english: \"mobile phone\", chinese: \"手机\", pinyin: \"shǒujī\" },\n    { english: \"watch\", chinese: \"手表\", pinyin: \"shǒubiǎo\" },\n    { english: \"eye\", chinese: \"眼睛\", pinyin: \"yǎnjīng\" },\n    { english: \"body\", chinese: \"身体\", pinyin: \"shēntǐ\" },\n    { english: \"bus\", chinese: \"公共汽车\", pinyin: \"gōnggòngqìchē\" },\n    { english: \"newspaper\", chinese: \"报纸\", pinyin: \"bàozhǐ\" },\n    { english: \"door\", chinese: \"门\", pinyin: \"mén\" },\n    { english: \"topic\", chinese: \"题\", pinyin: \"tí\" },\n    { english: \"lesson\", chinese: \"课\", pinyin: \"kè\" },\n    { english: \"surname\", chinese: \"姓\", pinyin: \"xìng\" },\n    { english: \"question\", chinese: \"问题\", pinyin: \"wèntí\" },\n    { english: \"matter\", chinese: \"事情\", pinyin: \"shìqing\" },\n    { english: \"exam\", chinese: \"考试\", pinyin: \"kǎoshì\" },\n    { english: \"ticket\", chinese: \"票\", pinyin: \"piào\" },\n    { english: \"meaning\", chinese: \"意思\", pinyin: \"yìsi\" },\n    { english: \"color\", chinese: \"颜色\", pinyin: \"yánsè\" },\n    { english: \"pencil\", chinese: \"铅笔\", pinyin: \"qiánbǐ\" },\n    { english: \"noodles\", chinese: \"面条\", pinyin: \"miàntiáo\" },\n    { english: \"train station\", chinese: \"火车站\", pinyin: \"huǒchēzhàn\" },\n    { english: \"company\", chinese: \"公司\", pinyin: \"gōngsī\" },\n    { english: \"hotel\", chinese: \"宾馆\", pinyin: \"bīngguǎn\" },\n    { english: \"talk\", chinese: \"说话\", pinyin: \"shuōhuà\" },\n    { english: \"sell\", chinese: \"卖\", pinyin: \"mài\" },\n    { english: \"ask\", chinese: \"问\", pinyin: \"wèn\" },\n    { english: \"walk\", chinese: \"走\", pinyin: \"zǒu\" },\n    { english: \"enter\", chinese: \"进\", pinyin: \"jìn\" },\n    { english: \"exit\", chinese: \"出\", pinyin: \"chū\" },\n    { english: \"run\", chinese: \"跑步\", pinyin: \"pǎobù\" },\n    { english: \"arrive\", chinese: \"到\", pinyin: \"dào\" },\n    { english: \"wear\", chinese: \"穿\", pinyin: \"chuān\" },\n    { english: \"wash\", chinese: \"洗\", pinyin: \"xǐ\" },\n    { english: \"give\", chinese: \"给\", pinyin: \"gěi\" },\n    { english: \"find\", chinese: \"找\", pinyin: \"zhǎo\" },\n    { english: \"understand\", chinese: \"懂\", pinyin: \"dǒng\" },\n    { english: \"smile\", chinese: \"笑\", pinyin: \"xiào\" },\n    { english: \"tell\", chinese: \"告诉\", pinyin: \"gàosù\" },\n    { english: \"prepare\", chinese: \"准备\", pinyin: \"zhǔnbèi\" },\n    { english: \"begin\", chinese: \"开始\", pinyin: \"kāishǐ\" },\n    { english: \"introduce\", chinese: \"介绍\", pinyin: \"jièshào\" },\n    { english: \"help\", chinese: \"帮助\", pinyin: \"bāngzhù\" },\n    { english: \"play\", chinese: \"玩\", pinyin: \"wán\" },\n    { english: \"present\", chinese: \"送\", pinyin: \"sòng\" },\n    { english: \"wait\", chinese: \"等\", pinyin: \"děng\" },\n    { english: \"let\", chinese: \"让\", pinyin: \"ràng\" },\n    { english: \"get up\", chinese: \"起床\", pinyin: \"qǐchuáng\" },\n    { english: \"sing\", chinese: \"唱歌\", pinyin: \"chànggē\" },\n    { english: \"dance\", chinese: \"跳舞\", pinyin: \"tiàowǔ\" },\n    { english: \"travel\", chinese: \"旅游\", pinyin: \"lǚyóu\" },\n    { english: \"go to work\", chinese: \"上班\", pinyin: \"shàngbān\" },\n    { english: \"get ill\", chinese: \"生病\", pinyin: \"shēngbìng\" },\n    { english: \"rest\", chinese: \"休息\", pinyin: \"xiūxi\" },\n    { english: \"exercise\", chinese: \"运动\", pinyin: \"yùndòng\" },\n    { english: \"swim\", chinese: \"游泳\", pinyin: \"yóuyǒng\" },\n    { english: \"play football\", chinese: \"踢足球\", pinyin: \"tīzúqiú\" },\n    { english: \"play basketball\", chinese: \"打篮球\", pinyin: \"dǎlánqiú\" },\n    { english: \"finish\", chinese: \"完\", pinyin: \"wán\" },\n    { english: \"think\", chinese: \"觉得\", pinyin: \"juédé\" },\n    { english: \"know\", chinese: \"知道\", pinyin: \"zhīdao\" },\n    { english: \"hope\", chinese: \"希望\", pinyin: \"xīwàng\" },\n    { english: \"can\", chinese: \"可以\", pinyin: \"kěyǐ\" },\n    { english: \"want\", chinese: \"要\", pinyin: \"yào\" },\n    { english: \"may\", chinese: \"可能\", pinyin: \"kěnéng\" },\n    { english: \"tall\", chinese: \"高\", pinyin: \"gāo\" },\n    { english: \"red\", chinese: \"红\", pinyin: \"hóng\" },\n    { english: \"white\", chinese: \"白\", pinyin: \"bái\" },\n    { english: \"black\", chinese: \"黑\", pinyin: \"hēi\" },\n    { english: \"busy\", chinese: \"忙\", pinyin: \"máng\" },\n    { english: \"fast\", chinese: \"快\", pinyin: \"kuài\" },\n    { english: \"slow\", chinese: \"慢\", pinyin: \"màn\" },\n    { english: \"far\", chinese: \"远\", pinyin: \"yuǎn\" },\n    { english: \"close\", chinese: \"近\", pinyin: \"jìn\" },\n    { english: \"delicious\", chinese: \"好吃\", pinyin: \"hǎochī\" },\n    { english: \"tired\", chinese: \"累\", pinyin: \"lèi\" },\n    { english: \"long\", chinese: \"长\", pinyin: \"cháng\" },\n    { english: \"new\", chinese: \"新\", pinyin: \"xīn\" },\n    { english: \"expensive\", chinese: \"贵\", pinyin: \"guì\" },\n    { english: \"cheap\", chinese: \"便宜\", pinyin: \"piányi\" },\n    { english: \"sunny\", chinese: \"晴\", pinyin: \"qíng\" },\n    { english: \"cloudy\", chinese: \"阴\", pinyin: \"yīn\" },\n    { english: \"wrong\", chinese: \"错\", pinyin: \"cuò\" },\n    { english: \"happy\", chinese: \"快乐\", pinyin: \"kuàilè\" },\n    { english: \"right\", chinese: \"对\", pinyin: \"duì\" }\n  ],\n\n  // HSK Level 3 (300 new words) - Intermediate Foundation\n  hsk3: [\n    { english: \"aunt\", chinese: \"阿姨\", pinyin: \"āyí\" },\n    { english: \"ah\", chinese: \"啊\", pinyin: \"a\" },\n    { english: \"short\", chinese: \"矮\", pinyin: \"ǎi\" },\n    { english: \"hobby\", chinese: \"爱好\", pinyin: \"àihào\" },\n    { english: \"quiet\", chinese: \"安静\", pinyin: \"ānjìng\" },\n    { english: \"hold\", chinese: \"把\", pinyin: \"bǎ\" },\n    { english: \"class\", chinese: \"班\", pinyin: \"bān\" },\n    { english: \"move\", chinese: \"搬\", pinyin: \"bān\" },\n    { english: \"half\", chinese: \"半\", pinyin: \"bàn\" },\n    { english: \"way\", chinese: \"办法\", pinyin: \"bànfǎ\" },\n    { english: \"office\", chinese: \"办公室\", pinyin: \"bàngōngshì\" },\n    { english: \"help\", chinese: \"帮忙\", pinyin: \"bāngmáng\" },\n    { english: \"package\", chinese: \"包\", pinyin: \"bāo\" },\n    { english: \"full\", chinese: \"饱\", pinyin: \"bǎo\" },\n    { english: \"north\", chinese: \"北方\", pinyin: \"běifāng\" },\n    { english: \"cover\", chinese: \"被\", pinyin: \"bèi\" },\n    { english: \"nose\", chinese: \"鼻子\", pinyin: \"bízi\" },\n    { english: \"compare\", chinese: \"比较\", pinyin: \"bǐjiào\" },\n    { english: \"match\", chinese: \"比赛\", pinyin: \"bǐsài\" },\n    { english: \"notebook\", chinese: \"笔记本\", pinyin: \"bǐjìběn\" },\n    { english: \"must\", chinese: \"必须\", pinyin: \"bìxū\" },\n    { english: \"change\", chinese: \"变化\", pinyin: \"biànhuà\" },\n    { english: \"others\", chinese: \"别人\", pinyin: \"biéren\" },\n    { english: \"refrigerator\", chinese: \"冰箱\", pinyin: \"bīngxiāng\" },\n    { english: \"menu\", chinese: \"菜单\", pinyin: \"càidān\" },\n    { english: \"participate\", chinese: \"参加\", pinyin: \"cānjiā\" },\n    { english: \"grass\", chinese: \"草\", pinyin: \"cǎo\" },\n    { english: \"layer\", chinese: \"层\", pinyin: \"céng\" },\n    { english: \"bad\", chinese: \"差\", pinyin: \"chà\" },\n    { english: \"supermarket\", chinese: \"超市\", pinyin: \"chāoshì\" },\n    { english: \"shirt\", chinese: \"衬衫\", pinyin: \"chènshān\" },\n    { english: \"achievement\", chinese: \"成绩\", pinyin: \"chéngjì\" },\n    { english: \"city\", chinese: \"城市\", pinyin: \"chéngshì\" },\n    { english: \"late\", chinese: \"迟到\", pinyin: \"chídào\" },\n    { english: \"except\", chinese: \"除了\", pinyin: \"chúle\" },\n    { english: \"ship\", chinese: \"船\", pinyin: \"chuán\" },\n    { english: \"spring\", chinese: \"春\", pinyin: \"chūn\" },\n    { english: \"dictionary\", chinese: \"词典\", pinyin: \"cídiǎn\" },\n    { english: \"clever\", chinese: \"聪明\", pinyin: \"cōngming\" },\n    { english: \"clean\", chinese: \"打扫\", pinyin: \"dǎsǎo\" },\n    { english: \"plan\", chinese: \"打算\", pinyin: \"dǎsuàn\" },\n    { english: \"belt\", chinese: \"带\", pinyin: \"dài\" },\n    { english: \"worry\", chinese: \"担心\", pinyin: \"dānxīn\" },\n    { english: \"cake\", chinese: \"蛋糕\", pinyin: \"dàngāo\" },\n    { english: \"of course\", chinese: \"当然\", pinyin: \"dāngrán\" },\n    { english: \"lamp\", chinese: \"灯\", pinyin: \"dēng\" },\n    { english: \"place\", chinese: \"地方\", pinyin: \"dìfang\" },\n    { english: \"subway\", chinese: \"地铁\", pinyin: \"dìtiě\" },\n    { english: \"map\", chinese: \"地图\", pinyin: \"dìtú\" },\n    { english: \"elevator\", chinese: \"电梯\", pinyin: \"diàntī\" },\n    { english: \"email\", chinese: \"电子邮件\", pinyin: \"diànzǐyóujiàn\" },\n    { english: \"east\", chinese: \"东\", pinyin: \"dōng\" },\n    { english: \"winter\", chinese: \"冬\", pinyin: \"dōng\" },\n    { english: \"animal\", chinese: \"动物\", pinyin: \"dòngwù\" },\n    { english: \"short\", chinese: \"短\", pinyin: \"duǎn\" },\n    { english: \"paragraph\", chinese: \"段\", pinyin: \"duàn\" },\n    { english: \"exercise\", chinese: \"锻炼\", pinyin: \"duànliàn\" },\n    { english: \"so\", chinese: \"多么\", pinyin: \"duōme\" },\n    { english: \"hungry\", chinese: \"饿\", pinyin: \"è\" },\n    { english: \"ear\", chinese: \"耳朵\", pinyin: \"ěrduo\" },\n    { english: \"send\", chinese: \"发\", pinyin: \"fā\" },\n    { english: \"fever\", chinese: \"发烧\", pinyin: \"fāshāo\" },\n    { english: \"discover\", chinese: \"发现\", pinyin: \"fāxiàn\" },\n    { english: \"convenient\", chinese: \"方便\", pinyin: \"fāngbiàn\" },\n    { english: \"put\", chinese: \"放\", pinyin: \"fàng\" },\n    { english: \"don't worry\", chinese: \"放心\", pinyin: \"fàngxīn\" },\n    { english: \"minute\", chinese: \"分\", pinyin: \"fēn\" },\n    { english: \"nearby\", chinese: \"附近\", pinyin: \"fùjìn\" },\n    { english: \"review\", chinese: \"复习\", pinyin: \"fùxí\" },\n    { english: \"clean\", chinese: \"干净\", pinyin: \"gānjìng\" },\n    { english: \"interested\", chinese: \"感兴趣\", pinyin: \"gǎnxìngqù\" },\n    { english: \"cold\", chinese: \"感冒\", pinyin: \"gǎnmào\" },\n    { english: \"just now\", chinese: \"刚才\", pinyin: \"gāngcái\" },\n    { english: \"height\", chinese: \"个子\", pinyin: \"gèzi\" },\n    { english: \"with\", chinese: \"跟\", pinyin: \"gēn\" },\n    { english: \"according to\", chinese: \"根据\", pinyin: \"gēnjù\" },\n    { english: \"more\", chinese: \"更\", pinyin: \"gèng\" },\n    { english: \"kilogram\", chinese: \"公斤\", pinyin: \"gōngjīn\" },\n    { english: \"park\", chinese: \"公园\", pinyin: \"gōngyuán\" },\n    { english: \"story\", chinese: \"故事\", pinyin: \"gùshi\" },\n    { english: \"windy\", chinese: \"刮风\", pinyin: \"guāfēng\" },\n    { english: \"shut\", chinese: \"关\", pinyin: \"guān\" },\n    { english: \"relationship\", chinese: \"关系\", pinyin: \"guānxì\" },\n    { english: \"care\", chinese: \"关心\", pinyin: \"guānxīn\" },\n    { english: \"about\", chinese: \"关于\", pinyin: \"guānyú\" },\n    { english: \"country\", chinese: \"国家\", pinyin: \"guójiā\" },\n    { english: \"past\", chinese: \"过去\", pinyin: \"guòqù\" },\n    { english: \"pass\", chinese: \"过\", pinyin: \"guò\" },\n    { english: \"still\", chinese: \"还是\", pinyin: \"háishì\" },\n    { english: \"afraid\", chinese: \"害怕\", pinyin: \"hàipà\" },\n    { english: \"blackboard\", chinese: \"黑板\", pinyin: \"hēibǎn\" },\n    { english: \"later\", chinese: \"后来\", pinyin: \"hòulái\" },\n    { english: \"passport\", chinese: \"护照\", pinyin: \"hùzhào\" },\n    { english: \"spend\", chinese: \"花\", pinyin: \"huā\" },\n    { english: \"flower\", chinese: \"花\", pinyin: \"huā\" },\n    { english: \"painting\", chinese: \"画\", pinyin: \"huà\" },\n    { english: \"bad\", chinese: \"坏\", pinyin: \"huài\" },\n    { english: \"welcome\", chinese: \"欢迎\", pinyin: \"huānyíng\" },\n    { english: \"return\", chinese: \"还\", pinyin: \"huán\" },\n    { english: \"environment\", chinese: \"环境\", pinyin: \"huánjìng\" },\n    { english: \"change\", chinese: \"换\", pinyin: \"huàn\" },\n    { english: \"Yellow River\", chinese: \"黄河\", pinyin: \"huánghé\" },\n    { english: \"answer\", chinese: \"回答\", pinyin: \"huídá\" },\n    { english: \"meeting\", chinese: \"会议\", pinyin: \"huìyì\" },\n    { english: \"or\", chinese: \"或者\", pinyin: \"huòzhě\" },\n    { english: \"almost\", chinese: \"几乎\", pinyin: \"jīhū\" },\n    { english: \"opportunity\", chinese: \"机会\", pinyin: \"jīhuì\" },\n    { english: \"extremely\", chinese: \"极\", pinyin: \"jí\" },\n    { english: \"remember\", chinese: \"记得\", pinyin: \"jìde\" },\n    { english: \"season\", chinese: \"季节\", pinyin: \"jìjié\" },\n    { english: \"check\", chinese: \"检查\", pinyin: \"jiǎnchá\" },\n    { english: \"simple\", chinese: \"简单\", pinyin: \"jiǎndān\" },\n    { english: \"healthy\", chinese: \"健康\", pinyin: \"jiànkāng\" },\n    { english: \"meet\", chinese: \"见面\", pinyin: \"jiànmiàn\" },\n    { english: \"speak\", chinese: \"讲\", pinyin: \"jiǎng\" },\n    { english: \"teach\", chinese: \"教\", pinyin: \"jiāo\" },\n    { english: \"corner\", chinese: \"角\", pinyin: \"jiǎo\" },\n    { english: \"foot\", chinese: \"脚\", pinyin: \"jiǎo\" },\n    { english: \"pick up\", chinese: \"接\", pinyin: \"jiē\" },\n    { english: \"street\", chinese: \"街道\", pinyin: \"jiēdào\" },\n    { english: \"marry\", chinese: \"结婚\", pinyin: \"jiéhūn\" },\n    { english: \"end\", chinese: \"结束\", pinyin: \"jiéshù\" },\n    { english: \"program\", chinese: \"节目\", pinyin: \"jiémù\" },\n    { english: \"festival\", chinese: \"节日\", pinyin: \"jiérì\" },\n    { english: \"solve\", chinese: \"解决\", pinyin: \"jiějué\" },\n    { english: \"borrow\", chinese: \"借\", pinyin: \"jiè\" },\n    { english: \"often\", chinese: \"经常\", pinyin: \"jīngcháng\" },\n    { english: \"through\", chinese: \"经过\", pinyin: \"jīngguò\" },\n    { english: \"manager\", chinese: \"经理\", pinyin: \"jīnglǐ\" },\n    { english: \"long\", chinese: \"久\", pinyin: \"jiǔ\" },\n    { english: \"old\", chinese: \"旧\", pinyin: \"jiù\" },\n    { english: \"sentence\", chinese: \"句子\", pinyin: \"jùzi\" },\n    { english: \"decide\", chinese: \"决定\", pinyin: \"juédìng\" },\n    { english: \"thirsty\", chinese: \"渴\", pinyin: \"kě\" },\n    { english: \"lovely\", chinese: \"可爱\", pinyin: \"kě'ài\" },\n    { english: \"moment\", chinese: \"刻\", pinyin: \"kè\" },\n    { english: \"guest\", chinese: \"客人\", pinyin: \"kèrén\" },\n    { english: \"air conditioning\", chinese: \"空调\", pinyin: \"kōngtiáo\" },\n    { english: \"mouth\", chinese: \"口\", pinyin: \"kǒu\" },\n    { english: \"cry\", chinese: \"哭\", pinyin: \"kū\" },\n    { english: \"pants\", chinese: \"裤子\", pinyin: \"kùzi\" },\n    { english: \"chopsticks\", chinese: \"筷子\", pinyin: \"kuàizi\" },\n    { english: \"blue\", chinese: \"蓝\", pinyin: \"lán\" },\n    { english: \"old\", chinese: \"老\", pinyin: \"lǎo\" },\n    { english: \"leave\", chinese: \"离开\", pinyin: \"líkāi\" },\n    { english: \"gift\", chinese: \"礼物\", pinyin: \"lǐwù\" },\n    { english: \"history\", chinese: \"历史\", pinyin: \"lìshǐ\" },\n    { english: \"face\", chinese: \"脸\", pinyin: \"liǎn\" },\n    { english: \"chat\", chinese: \"聊天\", pinyin: \"liáotiān\" },\n    { english: \"practice\", chinese: \"练习\", pinyin: \"liànxí\" },\n    { english: \"car\", chinese: \"辆\", pinyin: \"liàng\" },\n    { english: \"understand\", chinese: \"了解\", pinyin: \"liǎojiě\" },\n    { english: \"neighbor\", chinese: \"邻居\", pinyin: \"línjū\" },\n    { english: \"study abroad\", chinese: \"留学\", pinyin: \"liúxué\" },\n    { english: \"floor\", chinese: \"楼\", pinyin: \"lóu\" },\n    { english: \"green\", chinese: \"绿\", pinyin: \"lǜ\" },\n    { english: \"horse\", chinese: \"马\", pinyin: \"mǎ\" },\n    { english: \"right away\", chinese: \"马上\", pinyin: \"mǎshàng\" },\n    { english: \"satisfied\", chinese: \"满意\", pinyin: \"mǎnyì\" },\n    { english: \"hat\", chinese: \"帽子\", pinyin: \"màozi\" },\n    { english: \"meter\", chinese: \"米\", pinyin: \"mǐ\" },\n    { english: \"bread\", chinese: \"面包\", pinyin: \"miànbāo\" },\n    { english: \"clear\", chinese: \"明白\", pinyin: \"míngbai\" },\n    { english: \"take\", chinese: \"拿\", pinyin: \"ná\" },\n    { english: \"grandma\", chinese: \"奶奶\", pinyin: \"nǎinai\" },\n    { english: \"south\", chinese: \"南\", pinyin: \"nán\" },\n    { english: \"difficult\", chinese: \"难\", pinyin: \"nán\" },\n    { english: \"sad\", chinese: \"难过\", pinyin: \"nánguò\" },\n    { english: \"grade\", chinese: \"年级\", pinyin: \"niánjí\" },\n    { english: \"young\", chinese: \"年轻\", pinyin: \"niánqīng\" },\n    { english: \"bird\", chinese: \"鸟\", pinyin: \"niǎo\" },\n    { english: \"try hard\", chinese: \"努力\", pinyin: \"nǔlì\" },\n    { english: \"climb mountain\", chinese: \"爬山\", pinyin: \"páshān\" },\n    { english: \"plate\", chinese: \"盘子\", pinyin: \"pánzi\" },\n    { english: \"fat\", chinese: \"胖\", pinyin: \"pàng\" },\n    { english: \"beer\", chinese: \"啤酒\", pinyin: \"píjiǔ\" },\n    { english: \"leather shoes\", chinese: \"皮鞋\", pinyin: \"píxié\" },\n    { english: \"bottle\", chinese: \"瓶子\", pinyin: \"píngzi\" },\n    { english: \"actually\", chinese: \"其实\", pinyin: \"qíshí\" },\n    { english: \"other\", chinese: \"其他\", pinyin: \"qítā\" },\n    { english: \"ride\", chinese: \"骑\", pinyin: \"qí\" },\n    { english: \"strange\", chinese: \"奇怪\", pinyin: \"qíguài\" },\n    { english: \"get up\", chinese: \"起来\", pinyin: \"qǐlái\" },\n    { english: \"take off\", chinese: \"起飞\", pinyin: \"qǐfēi\" },\n    { english: \"clear\", chinese: \"清楚\", pinyin: \"qīngchu\" },\n    { english: \"ask for leave\", chinese: \"请假\", pinyin: \"qǐngjià\" },\n    { english: \"autumn\", chinese: \"秋\", pinyin: \"qiū\" },\n    { english: \"skirt\", chinese: \"裙子\", pinyin: \"qúnzi\" },\n    { english: \"then\", chinese: \"然后\", pinyin: \"ránhòu\" },\n    { english: \"enthusiasm\", chinese: \"热情\", pinyin: \"rèqíng\" },\n    { english: \"think\", chinese: \"认为\", pinyin: \"rènwéi\" },\n    { english: \"serious\", chinese: \"认真\", pinyin: \"rènzhēn\" },\n    { english: \"easy\", chinese: \"容易\", pinyin: \"róngyì\" },\n    { english: \"if\", chinese: \"如果\", pinyin: \"rúguǒ\" },\n    { english: \"umbrella\", chinese: \"伞\", pinyin: \"sǎn\" },\n    { english: \"surf internet\", chinese: \"上网\", pinyin: \"shàngwǎng\" },\n    { english: \"get angry\", chinese: \"生气\", pinyin: \"shēngqì\" },\n    { english: \"voice\", chinese: \"声音\", pinyin: \"shēngyīn\" },\n    { english: \"try\", chinese: \"试\", pinyin: \"shì\" },\n    { english: \"world\", chinese: \"世界\", pinyin: \"shìjiè\" },\n    { english: \"thin\", chinese: \"瘦\", pinyin: \"shòu\" },\n    { english: \"comfortable\", chinese: \"舒服\", pinyin: \"shūfu\" },\n    { english: \"uncle\", chinese: \"叔叔\", pinyin: \"shūshu\" },\n    { english: \"tree\", chinese: \"树\", pinyin: \"shù\" },\n    { english: \"math\", chinese: \"数学\", pinyin: \"shùxué\" },\n    { english: \"brush teeth\", chinese: \"刷牙\", pinyin: \"shuāyá\" },\n    { english: \"pair\", chinese: \"双\", pinyin: \"shuāng\" },\n    { english: \"level\", chinese: \"水平\", pinyin: \"shuǐpíng\" },\n    { english: \"driver\", chinese: \"司机\", pinyin: \"sījī\" },\n    { english: \"sun\", chinese: \"太阳\", pinyin: \"tàiyáng\" },\n    { english: \"especially\", chinese: \"特别\", pinyin: \"tèbié\" },\n    { english: \"hurt\", chinese: \"疼\", pinyin: \"téng\" },\n    { english: \"improve\", chinese: \"提高\", pinyin: \"tígāo\" },\n    { english: \"sports\", chinese: \"体育\", pinyin: \"tǐyù\" },\n    { english: \"sweet\", chinese: \"甜\", pinyin: \"tián\" },\n    { english: \"strip\", chinese: \"条\", pinyin: \"tiáo\" },\n    { english: \"colleague\", chinese: \"同事\", pinyin: \"tóngshì\" },\n    { english: \"agree\", chinese: \"同意\", pinyin: \"tóngyì\" },\n    { english: \"hair\", chinese: \"头发\", pinyin: \"tóufa\" },\n    { english: \"suddenly\", chinese: \"突然\", pinyin: \"tūrán\" },\n    { english: \"library\", chinese: \"图书馆\", pinyin: \"túshūguǎn\" },\n    { english: \"leg\", chinese: \"腿\", pinyin: \"tuǐ\" },\n    { english: \"complete\", chinese: \"完成\", pinyin: \"wánchéng\" },\n    { english: \"bowl\", chinese: \"碗\", pinyin: \"wǎn\" },\n    { english: \"ten thousand\", chinese: \"万\", pinyin: \"wàn\" },\n    { english: \"forget\", chinese: \"忘记\", pinyin: \"wàngjì\" },\n    { english: \"for\", chinese: \"为\", pinyin: \"wèi\" },\n    { english: \"in order to\", chinese: \"为了\", pinyin: \"wèile\" },\n    { english: \"position\", chinese: \"位\", pinyin: \"wèi\" },\n    { english: \"culture\", chinese: \"文化\", pinyin: \"wénhuà\" },\n    { english: \"west\", chinese: \"西\", pinyin: \"xī\" },\n    { english: \"habit\", chinese: \"习惯\", pinyin: \"xíguàn\" },\n    { english: \"restroom\", chinese: \"洗手间\", pinyin: \"xǐshǒujiān\" },\n    { english: \"take a shower\", chinese: \"洗澡\", pinyin: \"xǐzǎo\" },\n    { english: \"summer\", chinese: \"夏\", pinyin: \"xià\" },\n    { english: \"first\", chinese: \"先\", pinyin: \"xiān\" },\n    { english: \"banana\", chinese: \"香蕉\", pinyin: \"xiāngjiāo\" },\n    { english: \"believe\", chinese: \"相信\", pinyin: \"xiāngxìn\" },\n    { english: \"toward\", chinese: \"向\", pinyin: \"xiàng\" },\n    { english: \"image\", chinese: \"像\", pinyin: \"xiàng\" },\n    { english: \"be careful\", chinese: \"小心\", pinyin: \"xiǎoxīn\" },\n    { english: \"principal\", chinese: \"校长\", pinyin: \"xiàozhǎng\" },\n    { english: \"news\", chinese: \"新闻\", pinyin: \"xīnwén\" },\n    { english: \"fresh\", chinese: \"新鲜\", pinyin: \"xīnxiān\" },\n    { english: \"credit card\", chinese: \"信用卡\", pinyin: \"xìnyòngkǎ\" },\n    { english: \"suitcase\", chinese: \"行李箱\", pinyin: \"xínglixiāng\" },\n    { english: \"panda\", chinese: \"熊猫\", pinyin: \"xióngmāo\" },\n    { english: \"need\", chinese: \"需要\", pinyin: \"xūyào\" },\n    { english: \"choose\", chinese: \"选择\", pinyin: \"xuǎnzé\" },\n    { english: \"requirement\", chinese: \"要求\", pinyin: \"yāoqiú\" },\n    { english: \"grandpa\", chinese: \"爷爷\", pinyin: \"yéye\" },\n    { english: \"certain\", chinese: \"一定\", pinyin: \"yídìng\" },\n    { english: \"altogether\", chinese: \"一共\", pinyin: \"yígòng\" },\n    { english: \"a while\", chinese: \"一会儿\", pinyin: \"yíhuìr\" },\n    { english: \"same\", chinese: \"一样\", pinyin: \"yíyàng\" },\n    { english: \"before\", chinese: \"以前\", pinyin: \"yǐqián\" },\n    { english: \"general\", chinese: \"一般\", pinyin: \"yìbān\" },\n    { english: \"one side\", chinese: \"一边\", pinyin: \"yìbiān\" },\n    { english: \"always\", chinese: \"一直\", pinyin: \"yìzhí\" },\n    { english: \"music\", chinese: \"音乐\", pinyin: \"yīnyuè\" },\n    { english: \"bank\", chinese: \"银行\", pinyin: \"yínháng\" },\n    { english: \"drink\", chinese: \"饮料\", pinyin: \"yǐnliào\" },\n    { english: \"should\", chinese: \"应该\", pinyin: \"yīnggāi\" },\n    { english: \"influence\", chinese: \"影响\", pinyin: \"yǐngxiǎng\" },\n    { english: \"use\", chinese: \"用\", pinyin: \"yòng\" },\n    { english: \"game\", chinese: \"游戏\", pinyin: \"yóuxì\" },\n    { english: \"famous\", chinese: \"有名\", pinyin: \"yǒumíng\" },\n    { english: \"again\", chinese: \"又\", pinyin: \"yòu\" },\n    { english: \"encounter\", chinese: \"遇到\", pinyin: \"yùdào\" },\n    { english: \"yuan\", chinese: \"元\", pinyin: \"yuán\" },\n    { english: \"willing\", chinese: \"愿意\", pinyin: \"yuànyì\" },\n    { english: \"moon\", chinese: \"月亮\", pinyin: \"yuèliang\" },\n    { english: \"the more\", chinese: \"越\", pinyin: \"yuè\" },\n    { english: \"station\", chinese: \"站\", pinyin: \"zhàn\" },\n    { english: \"Zhang\", chinese: \"张\", pinyin: \"zhāng\" },\n    { english: \"grow\", chinese: \"长\", pinyin: \"zhǎng\" },\n    { english: \"worry\", chinese: \"着急\", pinyin: \"zháojí\" },\n    { english: \"look after\", chinese: \"照顾\", pinyin: \"zhàogù\" },\n    { english: \"photo\", chinese: \"照片\", pinyin: \"zhàopiàn\" },\n    { english: \"camera\", chinese: \"照相机\", pinyin: \"zhàoxiàngjī\" },\n    { english: \"measure word\", chinese: \"只\", pinyin: \"zhī\" },\n    { english: \"only\", chinese: \"只\", pinyin: \"zhǐ\" },\n    { english: \"only if\", chinese: \"只有……才……\", pinyin: \"zhǐyǒu…cái…\" },\n    { english: \"Chinese\", chinese: \"中文\", pinyin: \"zhōngwén\" },\n    { english: \"middle\", chinese: \"中间\", pinyin: \"zhōngjiān\" },\n    { english: \"finally\", chinese: \"终于\", pinyin: \"zhōngyú\" },\n    { english: \"kind\", chinese: \"种\", pinyin: \"zhǒng\" },\n    { english: \"important\", chinese: \"重要\", pinyin: \"zhòngyào\" },\n    { english: \"weekend\", chinese: \"周末\", pinyin: \"zhōumò\" },\n    { english: \"main\", chinese: \"主要\", pinyin: \"zhǔyào\" },\n    { english: \"pay attention\", chinese: \"注意\", pinyin: \"zhùyì\" },\n    { english: \"self\", chinese: \"自己\", pinyin: \"zìjǐ\" },\n    { english: \"bicycle\", chinese: \"自行车\", pinyin: \"zìxíngchē\" },\n    { english: \"always\", chinese: \"总是\", pinyin: \"zǒngshì\" },\n    { english: \"mouth\", chinese: \"嘴\", pinyin: \"zuǐ\" },\n    { english: \"last\", chinese: \"最后\", pinyin: \"zuìhòu\" },\n    { english: \"recently\", chinese: \"最近\", pinyin: \"zuìjìn\" },\n    { english: \"homework\", chinese: \"作业\", pinyin: \"zuòyè\" }\n  ],\n\n  // HSK Level 4 (600 new words) - Advanced Intermediate\n  hsk4_sample: [\n    { english: \"love\", chinese: \"爱情\", pinyin: \"àiqíng\" },\n    { english: \"arrange\", chinese: \"安排\", pinyin: \"ānpái\" },\n    { english: \"security\", chinese: \"安全\", pinyin: \"ānquán\" },\n    { english: \"on time\", chinese: \"按时\", pinyin: \"ànshí\" },\n    { english: \"according to\", chinese: \"按照\", pinyin: \"ànzhào\" },\n    { english: \"percent\", chinese: \"百分之\", pinyin: \"bǎifēnzhī\" },\n    { english: \"excellent\", chinese: \"棒\", pinyin: \"bàng\" },\n    { english: \"steamed bun\", chinese: \"包子\", pinyin: \"bāozi\" },\n    { english: \"protect\", chinese: \"保护\", pinyin: \"bǎohù\" },\n    { english: \"ensure\", chinese: \"保证\", pinyin: \"bǎozhèng\" },\n    { english: \"hold\", chinese: \"抱\", pinyin: \"bào\" },\n    { english: \"sorry\", chinese: \"抱歉\", pinyin: \"bàoqiàn\" },\n    { english: \"sign up\", chinese: \"报名\", pinyin: \"bàomíng\" },\n    { english: \"times\", chinese: \"倍\", pinyin: \"bèi\" },\n    { english: \"originally\", chinese: \"本来\", pinyin: \"běnlái\" },\n    { english: \"stupid\", chinese: \"笨\", pinyin: \"bèn\" },\n    { english: \"such as\", chinese: \"比如\", pinyin: \"bǐrú\" },\n    { english: \"graduation\", chinese: \"毕业\", pinyin: \"bìyè\" },\n    { english: \"times\", chinese: \"遍\", pinyin: \"biàn\" },\n    { english: \"standard\", chinese: \"标准\", pinyin: \"biāozhǔn\" },\n    { english: \"form\", chinese: \"表格\", pinyin: \"biǎogé\" },\n    { english: \"express\", chinese: \"表示\", pinyin: \"biǎoshì\" },\n    { english: \"perform\", chinese: \"表演\", pinyin: \"biǎoyǎn\" },\n    { english: \"praise\", chinese: \"表扬\", pinyin: \"biǎoyáng\" },\n    { english: \"biscuit\", chinese: \"饼干\", pinyin: \"bǐnggān\" },\n    { english: \"also\", chinese: \"并且\", pinyin: \"bìngqiě\" },\n    { english: \"doctor\", chinese: \"博士\", pinyin: \"bóshì\" },\n    { english: \"however\", chinese: \"不过\", pinyin: \"búguò\" },\n    { english: \"have to\", chinese: \"不得不\", pinyin: \"bùdébù\" },\n    { english: \"no matter\", chinese: \"不管\", pinyin: \"bùguǎn\" },\n    { english: \"not only\", chinese: \"不仅\", pinyin: \"bùjǐn\" },\n    { english: \"part\", chinese: \"部分\", pinyin: \"bùfen\" },\n    { english: \"wipe\", chinese: \"擦\", pinyin: \"cā\" },\n    { english: \"guess\", chinese: \"猜\", pinyin: \"cāi\" },\n    { english: \"material\", chinese: \"材料\", pinyin: \"cáiliào\" },\n    { english: \"visit\", chinese: \"参观\", pinyin: \"cānguān\" },\n    { english: \"restaurant\", chinese: \"餐厅\", pinyin: \"cāntīng\" },\n    { english: \"almost\", chinese: \"差不多\", pinyin: \"chàbuduō\" },\n    { english: \"taste\", chinese: \"尝\", pinyin: \"cháng\" },\n    { english: \"Great Wall\", chinese: \"长城\", pinyin: \"chángchéng\" },\n    { english: \"Yangtze River\", chinese: \"长江\", pinyin: \"chángjiāng\" },\n    { english: \"site\", chinese: \"场\", pinyin: \"chǎng\" },\n    { english: \"exceed\", chinese: \"超过\", pinyin: \"chāoguò\" },\n    { english: \"toilet\", chinese: \"厕所\", pinyin: \"cèsuǒ\" },\n    { english: \"success\", chinese: \"成功\", pinyin: \"chénggōng\" },\n    { english: \"become\", chinese: \"成为\", pinyin: \"chéngwéi\" },\n    { english: \"honest\", chinese: \"诚实\", pinyin: \"chéngshí\" },\n    { english: \"ride\", chinese: \"乘坐\", pinyin: \"chéngzuò\" },\n    { english: \"amazed\", chinese: \"吃惊\", pinyin: \"chījīng\" },\n    { english: \"again\", chinese: \"重新\", pinyin: \"chóngxīn\" },\n    { english: \"smoke\", chinese: \"抽烟\", pinyin: \"chōuyān\" },\n    { english: \"business trip\", chinese: \"出差\", pinyin: \"chūchāi\" },\n    { english: \"set out\", chinese: \"出发\", pinyin: \"chūfā\" },\n    { english: \"birth\", chinese: \"出生\", pinyin: \"chūshēng\" },\n    { english: \"appear\", chinese: \"出现\", pinyin: \"chūxiàn\" },\n    { english: \"kitchen\", chinese: \"厨房\", pinyin: \"chúfáng\" },\n    { english: \"fax\", chinese: \"传真\", pinyin: \"chuánzhēn\" },\n    { english: \"window\", chinese: \"窗户\", pinyin: \"chuānghu\" },\n    { english: \"word\", chinese: \"词语\", pinyin: \"cíyǔ\" },\n    { english: \"always\", chinese: \"从来\", pinyin: \"cónglái\" },\n    { english: \"careless\", chinese: \"粗心\", pinyin: \"cūxīn\" },\n    { english: \"deposit\", chinese: \"存\", pinyin: \"cún\" },\n    { english: \"error\", chinese: \"错误\", pinyin: \"cuòwù\" },\n    { english: \"answer\", chinese: \"答案\", pinyin: \"dá'àn\" },\n    { english: \"say hello\", chinese: \"打招呼\", pinyin: \"dǎzhāohu\" },\n    { english: \"dress up\", chinese: \"打扮\", pinyin: \"dǎban\" },\n    { english: \"disturb\", chinese: \"打扰\", pinyin: \"dǎrǎo\" },\n    { english: \"print\", chinese: \"打印\", pinyin: \"dǎyìn\" },\n    { english: \"discount\", chinese: \"打折\", pinyin: \"dǎzhé\" },\n    { english: \"injection\", chinese: \"打针\", pinyin: \"dǎzhēn\" },\n    { english: \"probably\", chinese: \"大概\", pinyin: \"dàgài\" },\n    { english: \"embassy\", chinese: \"大使馆\", pinyin: \"dàshǐguǎn\" },\n    { english: \"about\", chinese: \"大约\", pinyin: \"dàyuē\" },\n    { english: \"wear\", chinese: \"戴\", pinyin: \"dài\" },\n    { english: \"doctor\", chinese: \"大夫\", pinyin: \"dàifu\" },\n    { english: \"when\", chinese: \"当\", pinyin: \"dāng\" },\n    { english: \"at that time\", chinese: \"当时\", pinyin: \"dāngshí\" },\n    { english: \"knife\", chinese: \"刀\", pinyin: \"dāo\" },\n    { english: \"guide\", chinese: \"导游\", pinyin: \"dǎoyóu\" },\n    { english: \"inverted\", chinese: \"倒\", pinyin: \"dào\" },\n    { english: \"everywhere\", chinese: \"到处\", pinyin: \"dàochù\" },\n    { english: \"to the end\", chinese: \"到底\", pinyin: \"dàodǐ\" },\n    { english: \"apologize\", chinese: \"道歉\", pinyin: \"dàoqiàn\" },\n    { english: \"proud\", chinese: \"得意\", pinyin: \"déyì\" },\n    { english: \"location\", chinese: \"地点\", pinyin: \"dìdiǎn\" },\n    { english: \"have to\", chinese: \"得\", pinyin: \"děi\" },\n    { english: \"boarding pass\", chinese: \"登机牌\", pinyin: \"dēngjīpái\" },\n    { english: \"wait\", chinese: \"等\", pinyin: \"děng\" },\n    { english: \"low\", chinese: \"低\", pinyin: \"dī\" },\n    { english: \"bottom\", chinese: \"底\", pinyin: \"dǐ\" },\n    { english: \"earth\", chinese: \"地球\", pinyin: \"dìqiú\" },\n    { english: \"address\", chinese: \"地址\", pinyin: \"dìzhǐ\" },\n    { english: \"fall\", chinese: \"掉\", pinyin: \"diào\" },\n    { english: \"investigation\", chinese: \"调查\", pinyin: \"diàochá\" },\n    { english: \"lose\", chinese: \"丢\", pinyin: \"diū\" },\n    { english: \"action\", chinese: \"动作\", pinyin: \"dòngzuò\" },\n    { english: \"traffic jam\", chinese: \"堵车\", pinyin: \"dǔchē\" },\n    { english: \"belly\", chinese: \"肚子\", pinyin: \"dùzi\" },\n    { english: \"short message\", chinese: \"短信\", pinyin: \"duǎnxìn\" },\n    { english: \"about\", chinese: \"对于\", pinyin: \"duìyú\" },\n    { english: \"dialogue\", chinese: \"对话\", pinyin: \"duìhuà\" },\n    { english: \"opposite\", chinese: \"对面\", pinyin: \"duìmiàn\" },\n    { english: \"and\", chinese: \"而\", pinyin: \"ér\" },\n    { english: \"children\", chinese: \"儿童\", pinyin: \"értóng\" }\n  ],\n\n  // HSK Level 5 (selected high-frequency words)\n  hsk5_sample: [\n    { english: \"alas\", chinese: \"唉\", pinyin: \"āi\" },\n    { english: \"love\", chinese: \"爱心\", pinyin: \"àixīn\" },\n    { english: \"comfort\", chinese: \"安慰\", pinyin: \"ānwèi\" },\n    { english: \"bank\", chinese: \"岸\", pinyin: \"àn\" },\n    { english: \"stay up late\", chinese: \"熬夜\", pinyin: \"áoyè\" },\n    { english: \"contain\", chinese: \"包含\", pinyin: \"bāohán\" },\n    { english: \"valuable\", chinese: \"宝贵\", pinyin: \"bǎoguì\" },\n    { english: \"preserve\", chinese: \"保存\", pinyin: \"bǎocún\" },\n    { english: \"retain\", chinese: \"保留\", pinyin: \"bǎoliú\" },\n    { english: \"register\", chinese: \"报到\", pinyin: \"bàodào\" },\n    { english: \"report\", chinese: \"报告\", pinyin: \"bàogào\" },\n    { english: \"pessimism\", chinese: \"悲观\", pinyin: \"bēiguān\" },\n    { english: \"background\", chinese: \"背景\", pinyin: \"bèijǐng\" },\n    { english: \"quilt\", chinese: \"被子\", pinyin: \"bèizi\" },\n    { english: \"undergraduate\", chinese: \"本科\", pinyin: \"běnkē\" },\n    { english: \"ability\", chinese: \"本领\", pinyin: \"běnlǐng\" },\n    { english: \"proportion\", chinese: \"比例\", pinyin: \"bǐlì\" },\n    { english: \"inevitable\", chinese: \"必然\", pinyin: \"bìrán\" },\n    { english: \"necessary\", chinese: \"必要\", pinyin: \"bìyào\" },\n    { english: \"firecracker\", chinese: \"鞭炮\", pinyin: \"biānpào\" },\n    { english: \"debate\", chinese: \"辩论\", pinyin: \"biànlùn\" },\n    { english: \"sign\", chinese: \"标志\", pinyin: \"biāozhì\" },\n    { english: \"expression\", chinese: \"表达\", pinyin: \"biǎodá\" },\n    { english: \"surface\", chinese: \"表面\", pinyin: \"biǎomiàn\" },\n    { english: \"expression\", chinese: \"表情\", pinyin: \"biǎoqíng\" },\n    { english: \"performance\", chinese: \"表现\", pinyin: \"biǎoxiàn\" },\n    { english: \"ice cream\", chinese: \"冰激凌\", pinyin: \"bīngjīlíng\" },\n    { english: \"glass\", chinese: \"玻璃\", pinyin: \"bōli\" },\n    { english: \"museum\", chinese: \"博物馆\", pinyin: \"bówùguǎn\" },\n    { english: \"constantly\", chinese: \"不断\", pinyin: \"búduàn\" },\n    { english: \"not necessarily\", chinese: \"不见得\", pinyin: \"bújiàndé\" },\n    { english: \"impatient\", chinese: \"不耐烦\", pinyin: \"búnàifán\" },\n    { english: \"supplement\", chinese: \"补充\", pinyin: \"bǔchōng\" },\n    { english: \"otherwise\", chinese: \"不然\", pinyin: \"bùrán\" },\n    { english: \"insufficient\", chinese: \"不足\", pinyin: \"bùzú\" },\n    { english: \"department\", chinese: \"部门\", pinyin: \"bùmén\" },\n    { english: \"property\", chinese: \"财产\", pinyin: \"cáichǎn\" },\n    { english: \"step on\", chinese: \"踩\", pinyin: \"cǎi\" },\n    { english: \"adopt\", chinese: \"采取\", pinyin: \"cǎiqǔ\" },\n    { english: \"reference\", chinese: \"参考\", pinyin: \"cānkǎo\" },\n    { english: \"playground\", chinese: \"操场\", pinyin: \"cāochǎng\" },\n    { english: \"insert\", chinese: \"插\", pinyin: \"chā\" },\n    { english: \"fork\", chinese: \"叉子\", pinyin: \"chāzi\" },\n    { english: \"remove\", chinese: \"拆\", pinyin: \"chāi\" },\n    { english: \"produce\", chinese: \"产生\", pinyin: \"chǎnshēng\" },\n    { english: \"common sense\", chinese: \"常识\", pinyin: \"chángshí\" },\n    { english: \"damp\", chinese: \"潮湿\", pinyin: \"cháoshī\" },\n    { english: \"noisy\", chinese: \"吵\", pinyin: \"chǎo\" },\n    { english: \"garage\", chinese: \"车库\", pinyin: \"chēkù\" },\n    { english: \"thorough\", chinese: \"彻底\", pinyin: \"chèdǐ\" },\n    { english: \"while\", chinese: \"趁\", pinyin: \"chèn\" },\n    { english: \"call\", chinese: \"称\", pinyin: \"chēng\" },\n    { english: \"praise\", chinese: \"称赞\", pinyin: \"chēngzàn\" },\n    { english: \"bear\", chinese: \"承担\", pinyin: \"chéngdān\" },\n    { english: \"bear\", chinese: \"承受\", pinyin: \"chéngshòu\" },\n    { english: \"program\", chinese: \"程序\", pinyin: \"chéngxù\" },\n    { english: \"establish\", chinese: \"成立\", pinyin: \"chénglì\" },\n    { english: \"adult\", chinese: \"成人\", pinyin: \"chéngrén\" },\n    { english: \"idiom\", chinese: \"成语\", pinyin: \"chéngyǔ\" },\n    { english: \"sincere\", chinese: \"诚恳\", pinyin: \"chéngkěn\" },\n    { english: \"continue\", chinese: \"持续\", pinyin: \"chíxù\" },\n    { english: \"ruler\", chinese: \"尺子\", pinyin: \"chǐzi\" },\n    { english: \"punch\", chinese: \"冲\", pinyin: \"chōng\" },\n    { english: \"fully\", chinese: \"充分\", pinyin: \"chōngfèn\" },\n    { english: \"repeat\", chinese: \"重复\", pinyin: \"chóngfù\" },\n    { english: \"pet\", chinese: \"宠物\", pinyin: \"chǒngwù\" },\n    { english: \"abstract\", chinese: \"抽象\", pinyin: \"chōuxiàng\" },\n    { english: \"ugly\", chinese: \"丑\", pinyin: \"chǒu\" },\n    { english: \"exit\", chinese: \"出口\", pinyin: \"chūkǒu\" },\n    { english: \"show\", chinese: \"出示\", pinyin: \"chūshì\" },\n    { english: \"attend\", chinese: \"出席\", pinyin: \"chūxí\" },\n    { english: \"unless\", chinese: \"除非\", pinyin: \"chúfēi\" },\n    { english: \"New Year's Eve\", chinese: \"除夕\", pinyin: \"chúxī\" },\n    { english: \"handle\", chinese: \"处理\", pinyin: \"chǔlǐ\" },\n    { english: \"contagion\", chinese: \"传染\", pinyin: \"chuánrǎn\" },\n    { english: \"tradition\", chinese: \"传统\", pinyin: \"chuántǒng\" },\n    { english: \"rush\", chinese: \"闯\", pinyin: \"chuǎng\" },\n    { english: \"blow\", chinese: \"吹\", pinyin: \"chuī\" },\n    { english: \"in addition\", chinese: \"此外\", pinyin: \"cǐwài\" },\n    { english: \"secondary\", chinese: \"次要\", pinyin: \"cìyào\" },\n    { english: \"hastily\", chinese: \"匆忙\", pinyin: \"cōngmáng\" },\n    { english: \"thus\", chinese: \"从而\", pinyin: \"cóng'ér\" },\n    { english: \"before\", chinese: \"从前\", pinyin: \"cóngqián\" },\n    { english: \"rough\", chinese: \"粗糙\", pinyin: \"cūcāo\" },\n    { english: \"vinegar\", chinese: \"醋\", pinyin: \"cù\" },\n    { english: \"urge\", chinese: \"促使\", pinyin: \"cùshǐ\" },\n    { english: \"measures\", chinese: \"措施\", pinyin: \"cuòshī\" }\n  ],\n\n  // HSK Level 6 (selected advanced words)\n  hsk6_sample: [\n    { english: \"next to\", chinese: \"挨\", pinyin: \"ái\" },\n    { english: \"cancer\", chinese: \"癌症\", pinyin: \"áizhèng\" },\n    { english: \"love dearly\", chinese: \"爱不释手\", pinyin: \"àibúshìshǒu\" },\n    { english: \"love and esteem\", chinese: \"爱戴\", pinyin: \"àidài\" },\n    { english: \"ambiguous\", chinese: \"暧昧\", pinyin: \"àimèi\" },\n    { english: \"peaceful\", chinese: \"安宁\", pinyin: \"ānníng\" },\n    { english: \"serene\", chinese: \"安详\", pinyin: \"ānxiáng\" },\n    { english: \"arrange\", chinese: \"安置\", pinyin: \"ānzhì\" },\n    { english: \"suggest\", chinese: \"暗示\", pinyin: \"ànshì\" },\n    { english: \"case\", chinese: \"案件\", pinyin: \"ànjiàn\" },\n    { english: \"case\", chinese: \"案例\", pinyin: \"ànlì\" },\n    { english: \"massage\", chinese: \"按摩\", pinyin: \"ànmó\" },\n    { english: \"expensive\", chinese: \"昂贵\", pinyin: \"ángguì\" },\n    { english: \"concave-convex\", chinese: \"凹凸\", pinyin: \"āotū\" },\n    { english: \"boil\", chinese: \"熬\", pinyin: \"áo\" },\n    { english: \"secret\", chinese: \"奥秘\", pinyin: \"àomì\" },\n    { english: \"hold on to\", chinese: \"扒\", pinyin: \"bā\" },\n    { english: \"scar\", chinese: \"疤\", pinyin: \"bā\" },\n    { english: \"eagerly look forward\", chinese: \"巴不得\", pinyin: \"bābude\" },\n    { english: \"stutter\", chinese: \"巴结\", pinyin: \"bājié\" },\n    { english: \"spoil things\", chinese: \"拔苗助长\", pinyin: \"bámiáozhùzhǎng\" },\n    { english: \"hold the pass\", chinese: \"把关\", pinyin: \"bǎguān\" },\n    { english: \"knob\", chinese: \"把手\", pinyin: \"bǎshou\" },\n    { english: \"overbearing\", chinese: \"霸道\", pinyin: \"bàdào\" },\n    { english: \"strike\", chinese: \"罢工\", pinyin: \"bàgōng\" },\n    { english: \"break off\", chinese: \"掰\", pinyin: \"bāi\" },\n    { english: \"cast off\", chinese: \"摆脱\", pinyin: \"bǎituō\" },\n    { english: \"visit\", chinese: \"拜访\", pinyin: \"bàifǎng\" },\n    { english: \"congratulate New Year\", chinese: \"拜年\", pinyin: \"bàinián\" },\n    { english: \"request\", chinese: \"拜托\", pinyin: \"bàituō\" },\n    { english: \"corrupt\", chinese: \"败坏\", pinyin: \"bàihuài\" },\n    { english: \"speckle\", chinese: \"斑\", pinyin: \"bān\" },\n    { english: \"promulgate\", chinese: \"颁布\", pinyin: \"bānbù\" },\n    { english: \"award\", chinese: \"颁发\", pinyin: \"bānfā\" },\n    { english: \"edition\", chinese: \"版本\", pinyin: \"bǎnběn\" },\n    { english: \"give up halfway\", chinese: \"半途而废\", pinyin: \"bàntú'érfèi\" },\n    { english: \"partner\", chinese: \"伴侣\", pinyin: \"bànlǚ\" },\n    { english: \"go with\", chinese: \"伴随\", pinyin: \"bànsuí\" },\n    { english: \"play role\", chinese: \"扮演\", pinyin: \"bànyǎn\" },\n    { english: \"kidnap\", chinese: \"绑架\", pinyin: \"bǎngjià\" },\n    { english: \"example\", chinese: \"榜样\", pinyin: \"bǎngyàng\" },\n    { english: \"pound\", chinese: \"磅\", pinyin: \"bàng\" },\n    { english: \"shield\", chinese: \"包庇\", pinyin: \"bāobì\" },\n    { english: \"burden\", chinese: \"包袱\", pinyin: \"bāofu\" },\n    { english: \"surround\", chinese: \"包围\", pinyin: \"bāowéi\" },\n    { english: \"pack\", chinese: \"包装\", pinyin: \"bāozhuāng\" },\n    { english: \"saturated\", chinese: \"饱和\", pinyin: \"bǎohé\" },\n    { english: \"experienced\", chinese: \"饱经沧桑\", pinyin: \"bǎojīngcāngsāng\" },\n    { english: \"safekeeping\", chinese: \"保管\", pinyin: \"bǎoguǎn\" },\n    { english: \"secrecy\", chinese: \"保密\", pinyin: \"bǎomì\" },\n    { english: \"nurse\", chinese: \"保姆\", pinyin: \"bǎomǔ\" },\n    { english: \"conservative\", chinese: \"保守\", pinyin: \"bǎoshǒu\" },\n    { english: \"defend\", chinese: \"保卫\", pinyin: \"bǎowèi\" },\n    { english: \"maintain\", chinese: \"保养\", pinyin: \"bǎoyǎng\" },\n    { english: \"guarantee\", chinese: \"保障\", pinyin: \"bǎozhàng\" },\n    { english: \"take care\", chinese: \"保重\", pinyin: \"bǎozhòng\" },\n    { english: \"ambition\", chinese: \"抱负\", pinyin: \"bàofù\" },\n    { english: \"revenge\", chinese: \"报仇\", pinyin: \"bàochóu\" },\n    { english: \"remuneration\", chinese: \"报酬\", pinyin: \"bàochou\" },\n    { english: \"repay\", chinese: \"报答\", pinyin: \"bàodá\" },\n    { english: \"payback\", chinese: \"报复\", pinyin: \"bàofù\" },\n    { english: \"call police\", chinese: \"报警\", pinyin: \"bàojǐng\" },\n    { english: \"expense account\", chinese: \"报销\", pinyin: \"bàoxiāo\" },\n    { english: \"burst\", chinese: \"爆发\", pinyin: \"bàofā\" },\n    { english: \"blast\", chinese: \"爆炸\", pinyin: \"bàozhà\" },\n    { english: \"exposure\", chinese: \"曝光\", pinyin: \"bàoguāng\" },\n    { english: \"violence\", chinese: \"暴力\", pinyin: \"bàolì\" },\n    { english: \"expose\", chinese: \"暴露\", pinyin: \"bàolù\" },\n    { english: \"grief\", chinese: \"悲哀\", pinyin: \"bēi'āi\" },\n    { english: \"miserable\", chinese: \"悲惨\", pinyin: \"bēicǎn\" },\n    { english: \"despicable\", chinese: \"卑鄙\", pinyin: \"bēibǐ\" },\n    { english: \"arctic\", chinese: \"北极\", pinyin: \"běijí\" },\n    { english: \"passive\", chinese: \"被动\", pinyin: \"bèidòng\" },\n    { english: \"defendant\", chinese: \"被告\", pinyin: \"bèigào\" },\n    { english: \"betray\", chinese: \"背叛\", pinyin: \"bèipàn\" },\n    { english: \"recite\", chinese: \"背诵\", pinyin: \"bèisòng\" },\n    { english: \"backup\", chinese: \"备份\", pinyin: \"bèifèn\" },\n    { english: \"memorandum\", chinese: \"备忘录\", pinyin: \"bèiwànglù\" },\n    { english: \"shell\", chinese: \"贝壳\", pinyin: \"bèikè\" },\n    { english: \"rush about\", chinese: \"奔波\", pinyin: \"bēnbō\" },\n    { english: \"run quickly\", chinese: \"奔驰\", pinyin: \"bēnchí\" },\n    { english: \"instinct\", chinese: \"本能\", pinyin: \"běnnéng\" },\n    { english: \"capital\", chinese: \"本钱\", pinyin: \"běnqián\" },\n    { english: \"oneself\", chinese: \"本人\", pinyin: \"běnrén\" },\n    { english: \"itself\", chinese: \"本身\", pinyin: \"běnshēn\" },\n    { english: \"skill\", chinese: \"本事\", pinyin: \"běnshi\" },\n    { english: \"clumsy\", chinese: \"笨拙\", pinyin: \"bènzhuō\" },\n    { english: \"collapse\", chinese: \"崩溃\", pinyin: \"bēngkuì\" },\n    { english: \"not\", chinese: \"甭\", pinyin: \"béng\" },\n    { english: \"jump\", chinese: \"蹦\", pinyin: \"bèng\" },\n    { english: \"burst\", chinese: \"迸发\", pinyin: \"bèngfā\" },\n    { english: \"force\", chinese: \"逼迫\", pinyin: \"bīpò\" },\n    { english: \"nasal mucus\", chinese: \"鼻涕\", pinyin: \"bítì\" },\n    { english: \"example\", chinese: \"比方\", pinyin: \"bǐfāng\" },\n    { english: \"comparison\", chinese: \"比喻\", pinyin: \"bǐyù\" },\n    { english: \"proportion\", chinese: \"比重\", pinyin: \"bǐzhòng\" },\n    { english: \"despise\", chinese: \"鄙视\", pinyin: \"bǐshì\" },\n    { english: \"arm\", chinese: \"臂\", pinyin: \"bì\" },\n    { english: \"ills\", chinese: \"弊病\", pinyin: \"bìbìng\" },\n    { english: \"malpractice\", chinese: \"弊端\", pinyin: \"bìduān\" },\n    { english: \"occlusion\", chinese: \"闭塞\", pinyin: \"bìsè\" }\n  ]\n};\n\n// Usage instructions:\n// 1. Import this data in expansion script\n// 2. Organize by difficulty levels (HSK 1-6)\n// 3. Create vocabulary groups of 10 words each\n// 4. Maintain random pattern switching per word\n// 5. Update progress tracking for 3,500+ total words\n\nmodule.exports = hskExpansionData;","size_bytes":56011},"mobile-conversion-plan.md":{"content":"# Chinese Vocabulary Mobile App Conversion Plan\n\n## User Requirements\n1. **Offline Downloads**: Download HSK groups for offline practice\n2. **Background Audio**: Continue audio playback with locked screen\n3. **Group Looping**: Loop current group when locked, don't auto-advance\n4. **3,610 HSK Words**: Maintain all existing vocabulary across levels 1-6\n\n## Conversion Strategy: Phase-by-Phase Approach\n\n### Phase 1: Mobile Project Setup ⭐ (CURRENT)\n- [ ] Create new Expo project in Replit\n- [ ] Set up basic React Native structure\n- [ ] Install required mobile dependencies\n- [ ] Test basic app launch with Expo Go\n\n### Phase 2: Port Core Functionality \n- [ ] Port HSK vocabulary data (3,610 words)\n- [ ] Recreate vocabulary group UI for mobile\n- [ ] Implement basic audio playback (no background yet)\n- [ ] Add group selection and word display\n\n### Phase 3: Add Offline Capabilities\n- [ ] Install AsyncStorage for offline storage\n- [ ] Implement group download functionality\n- [ ] Cache HSK groups locally on device\n- [ ] Add offline/online status indicators\n\n### Phase 4: Background Audio Implementation\n- [ ] Install react-native-track-player\n- [ ] Configure iOS background audio capabilities\n- [ ] Configure Android foreground service\n- [ ] Implement lock screen controls\n\n### Phase 5: Group Looping Logic\n- [ ] Add group repeat mode when screen locked\n- [ ] Prevent auto-advance between groups\n- [ ] Add manual group progression controls\n- [ ] Test locked screen behavior\n\n### Phase 6: Testing & Deployment\n- [ ] Create EAS development build\n- [ ] Test on real devices (iOS/Android)\n- [ ] Verify offline functionality\n- [ ] Test background audio with locked screen\n- [ ] Submit to app stores (optional)\n\n## Technical Stack\n\n### Mobile Framework\n- **Expo/React Native**: For cross-platform development\n- **EAS Build**: For native functionality and app store deployment\n\n### Key Libraries\n- **AsyncStorage**: Offline vocabulary storage\n- **react-native-track-player**: Background audio with lock screen controls\n- **expo-file-system**: File management for offline groups\n- **react-native-vector-icons**: UI icons\n\n### Audio Requirements\n- **iOS**: Background audio capability, AVAudioSession configuration\n- **Android**: Foreground service, MediaSession integration\n- **Voice**: Microsoft Xiaoxiao TTS (will need research for mobile implementation)\n\n## Current Web App Assets to Port\n- ✅ 3,610 HSK vocabulary words across 6 levels\n- ✅ 362 vocabulary groups with proper HSK ordering  \n- ✅ Audio settings (pause duration, voice speed, language order)\n- ✅ Progress tracking (\"learned\" vs \"not learned\" groups)\n- ✅ TTS integration with Microsoft Xiaoxiao voice\n\n## Next Steps\n1. Create Expo project template\n2. Set up basic navigation and UI\n3. Port vocabulary data structure\n4. Test basic functionality before adding advanced features","size_bytes":2846},"populate-db.js":{"content":"import { Pool } from '@neondatabase/serverless';\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\nconst sampleGroups = [\n  {\n    title: 'Basic Greetings',\n    description: 'Essential greetings and polite expressions',\n  },\n  {\n    title: 'Family & People',\n    description: 'Family members and common relationships',\n  },\n  {\n    title: 'Food & Dining', \n    description: 'Food items and restaurant vocabulary',\n  },\n  {\n    title: 'Daily Activities',\n    description: 'Common daily actions and activities',\n  },\n  {\n    title: 'Numbers & Time',\n    description: 'Numbers, time expressions, and dates',\n  }\n];\n\nconst sampleWords = {\n  'Basic Greetings': [\n    { englishText: 'hello', chineseText: '你好' },\n    { englishText: 'goodbye', chineseText: '再见' },\n    { englishText: 'thank you', chineseText: '谢谢' },\n    { englishText: 'please', chineseText: '请' },\n    { englishText: 'excuse me', chineseText: '不好意思' },\n    { englishText: 'sorry', chineseText: '对不起' },\n    { englishText: 'good morning', chineseText: '早上好' },\n    { englishText: 'good evening', chineseText: '晚上好' },\n    { englishText: 'how are you', chineseText: '你好吗' },\n    { englishText: 'nice to meet you', chineseText: '很高兴认识你' }\n  ],\n  'Family & People': [\n    { englishText: 'mother', chineseText: '妈妈' },\n    { englishText: 'father', chineseText: '爸爸' },\n    { englishText: 'child', chineseText: '孩子' },\n    { englishText: 'friend', chineseText: '朋友' },\n    { englishText: 'teacher', chineseText: '老师' },\n    { englishText: 'student', chineseText: '学生' },\n    { englishText: 'brother', chineseText: '兄弟' },\n    { englishText: 'sister', chineseText: '姐妹' },\n    { englishText: 'husband', chineseText: '丈夫' },\n    { englishText: 'wife', chineseText: '妻子' }\n  ],\n  'Food & Dining': [\n    { englishText: 'rice', chineseText: '米饭' },\n    { englishText: 'water', chineseText: '水' },\n    { englishText: 'tea', chineseText: '茶' },\n    { englishText: 'coffee', chineseText: '咖啡' },\n    { englishText: 'bread', chineseText: '面包' },\n    { englishText: 'meat', chineseText: '肉' },\n    { englishText: 'vegetable', chineseText: '蔬菜' },\n    { englishText: 'fruit', chineseText: '水果' },\n    { englishText: 'restaurant', chineseText: '餐厅' },\n    { englishText: 'delicious', chineseText: '好吃' }\n  ],\n  'Daily Activities': [\n    { englishText: 'eat', chineseText: '吃' },\n    { englishText: 'sleep', chineseText: '睡觉' },\n    { englishText: 'work', chineseText: '工作' },\n    { englishText: 'study', chineseText: '学习' },\n    { englishText: 'walk', chineseText: '走路' },\n    { englishText: 'run', chineseText: '跑步' },\n    { englishText: 'read', chineseText: '读书' },\n    { englishText: 'write', chineseText: '写字' },\n    { englishText: 'listen', chineseText: '听' },\n    { englishText: 'speak', chineseText: '说话' }\n  ],\n  'Numbers & Time': [\n    { englishText: 'one', chineseText: '一' },\n    { englishText: 'two', chineseText: '二' },\n    { englishText: 'three', chineseText: '三' },\n    { englishText: 'ten', chineseText: '十' },\n    { englishText: 'today', chineseText: '今天' },\n    { englishText: 'tomorrow', chineseText: '明天' },\n    { englishText: 'yesterday', chineseText: '昨天' },\n    { englishText: 'time', chineseText: '时间' },\n    { englishText: 'hour', chineseText: '小时' },\n    { englishText: 'minute', chineseText: '分钟' }\n  ]\n};\n\nasync function populateData() {\n  try {\n    console.log('Starting database population...');\n    \n    // Clear existing data\n    await pool.query('DELETE FROM vocabulary_words');\n    await pool.query('DELETE FROM word_groups');\n    \n    // Insert groups\n    for (const [index, group] of sampleGroups.entries()) {\n      const groupResult = await pool.query(`\n        INSERT INTO word_groups (id, title, description, is_learned, created_at)\n        VALUES ($1, $2, $3, $4, $5) RETURNING id\n      `, [`group_${index + 1}`, group.title, group.description, 0, new Date()]);\n      \n      const groupId = groupResult.rows[0].id;\n      console.log(`Inserted group: ${group.title} (${groupId})`);\n      \n      // Insert words for this group\n      const words = sampleWords[group.title];\n      for (const [wordIndex, word] of words.entries()) {\n        await pool.query(`\n          INSERT INTO vocabulary_words (id, group_id, english_text, chinese_text, order_index)\n          VALUES ($1, $2, $3, $4, $5)\n        `, [`word_${groupId}_${wordIndex}`, groupId, word.englishText, word.chineseText, wordIndex]);\n      }\n      \n      console.log(`Inserted ${words.length} words for ${group.title}`);\n    }\n    \n    console.log('Database populated successfully!');\n    \n  } catch (error) {\n    console.error('Error populating database:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\npopulateData();","size_bytes":4886},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Chinese Vocabulary Learning App\n\n## Overview\n\nThis is a comprehensive full-stack web application that provides structured Chinese vocabulary learning with high-quality audio pronunciation. The app features 362 vocabulary groups with authentic HSK-level vocabulary totaling 3,610 words across HSK levels 1-6. Users can practice pronunciation with configurable playback order and settings, mark groups as \"learned\" or \"not learned,\" and listen to sequential playback with English-Chinese pronunciation using high-quality Microsoft Xiaoxiao voice.\n\n## Recent Changes (August 15, 2025)\n\n- ✅ **Successfully expanded to 3,610 words** - Exceeded 3,500 word target with authentic HSK vocabulary\n- ✅ **Removed all non-HSK groups** - Eliminated original groups like \"Basic Greetings\" and \"Numbers & Time\" to focus exclusively on authentic HSK content\n- ✅ **Fixed group ordering issue** - Resolved client-side sorting that was overriding server-side HSK sequential ordering\n- ✅ **HSK level distribution**: HSK 1 (155 words), HSK 2 (155 words), HSK 3 (760 words), HSK 4 (600 words), HSK 5 (900 words), HSK 6 (1,040 words)\n- ✅ **Proper HSK sequencing** - Groups now display in correct order: HSK 1-1, HSK 1-2, etc.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application follows a modern full-stack architecture with clear separation between frontend and backend:\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for development and bundling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript\n- **API Style**: RESTful endpoints\n- **Database ORM**: Drizzle ORM with PostgreSQL support\n- **Session Storage**: In-memory storage with fallback to database\n\n## Key Components\n\n### Database Schema\nThe application uses three main tables:\n- **users**: User authentication and management\n- **translations**: Stores translation history with audio metadata\n- **audio_settings**: User preferences for audio generation\n\n### API Endpoints\n- `POST /api/translate`: English to Chinese translation using multiple free services (MyMemory, LibreTranslate, Microsoft Translator, Google Translate)\n- `POST /api/generate-audio`: Audio metadata generation with browser-based TTS fallback\n- `GET /api/translations`: Retrieve translation history\n- `GET/POST /api/audio-settings`: Manage audio preferences\n\n### Frontend Components\n- **TranslationCard**: Main interface for text input and translation display\n- **SettingsCard**: Audio customization controls (pause duration, voice speed, quality)\n- **HistoryCard**: Translation history with playback and download features\n- **AudioPlayer**: Custom audio playback component with controls\n\n## Data Flow\n\n1. User enters English text in the translation interface\n2. Frontend sends translation request to backend API\n3. Backend calls Google Translate API for Chinese translation\n4. Translation and audio generation requests are processed\n5. Results are stored in database and returned to frontend\n6. Audio files are generated and made available for playback/download\n7. Translation history is updated and displayed\n\n## External Dependencies\n\n### Third-Party Services\n- **Google Translate API**: For English-to-Chinese translation\n- **Neon Database**: PostgreSQL hosting (configured via DATABASE_URL)\n\n### Key Libraries\n- **Frontend**: React, TanStack Query, Wouter, Tailwind CSS, shadcn/ui\n- **Backend**: Express.js, Drizzle ORM, Zod validation\n- **Database**: PostgreSQL with Neon serverless driver\n- **Development**: Vite, TypeScript, ESBuild\n\n## Deployment Strategy\n\n### Development\n- Vite dev server for frontend with HMR\n- Express server with TypeScript compilation via tsx\n- Database migrations handled by Drizzle Kit\n\n### Production Build\n- Frontend built with Vite to static assets\n- Backend bundled with ESBuild for Node.js\n- Single-server deployment serving both API and static files\n- Environment variables for database and API key configuration\n\n### Configuration Requirements\n- `DATABASE_URL`: PostgreSQL connection string\n- `GOOGLE_TRANSLATE_API_KEY` or `GOOGLE_API_KEY`: Google Translate API access\n\nThe application is designed for easy deployment on platforms like Replit, with automatic database provisioning and environment variable configuration.","size_bytes":4508},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"mobile/App.js":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\n\n// Import screens\nimport HomeScreen from './src/screens/HomeScreen';\nimport GroupListScreen from './src/screens/GroupListScreen';\nimport VocabularyScreen from './src/screens/VocabularyScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <StatusBar style=\"auto\" />\n      <Stack.Navigator\n        initialRouteName=\"Home\"\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#1e40af',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      >\n        <Stack.Screen \n          name=\"Home\" \n          component={HomeScreen} \n          options={{ title: 'Chinese Vocabulary Learning' }}\n        />\n        <Stack.Screen \n          name=\"GroupList\" \n          component={GroupListScreen} \n          options={{ title: 'HSK Groups' }}\n        />\n        <Stack.Screen \n          name=\"Vocabulary\" \n          component={VocabularyScreen} \n          options={{ title: 'Study Session' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}","size_bytes":1328},"mobile/README.md":{"content":"# Chinese Vocabulary Mobile App\n\n## Quick Start Testing\n\n### Option 1: Test with Expo Go (Basic Functionality)\n1. **Install Expo Go** on your phone from App Store/Google Play\n2. **Run in Replit**: \n   ```bash\n   cd mobile\n   npm install\n   npx expo start\n   ```\n3. **Scan QR code** with Expo Go to test the app structure\n4. **Note**: Background audio won't work in Expo Go (needs native build)\n\n### Option 2: Create EAS Development Build (Full Features)\n1. **Install EAS CLI**: `npm install -g @expo/eas-cli`\n2. **Login to Expo**: `eas login`\n3. **Configure project**: `eas init`\n4. **Create development build**: `eas build --profile development`\n5. **Install on device** via QR code for full native functionality\n\n## Current Status\n\n✅ **Phase 1 Complete**: Mobile app structure created\n- Home screen with app status and features\n- Group list with HSK level organization  \n- Vocabulary study interface with audio controls\n- Background audio configuration ready\n- Offline storage preparation complete\n\n## Next Phases\n\n### Phase 2: Port Vocabulary Data (Next Step)\n- Import your 3,610 HSK words from web app\n- Convert vocabulary groups to mobile format\n- Set up AsyncStorage for offline access\n\n### Phase 3: Add Background Audio\n- Implement react-native-track-player\n- Configure lock screen controls\n- Add group looping functionality\n\n### Phase 4: Offline Downloads\n- Create group download system\n- Cache vocabulary for offline use\n- Sync with web app data\n\n## Mobile-Specific Features Included\n\n1. **Offline Downloads**: Download HSK groups for practice without internet\n2. **Background Audio**: Continue playback when screen is locked\n3. **Group Looping**: Loop current group when locked (no auto-advance)\n4. **Progress Tracking**: Mark groups as learned/not learned\n5. **HSK Level Organization**: Color-coded levels with proper sequencing\n\nThe mobile app is now ready for testing and further development!","size_bytes":1907},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertWordGroupSchema, insertVocabularyWordSchema, insertAudioSettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all word groups\n  app.get(\"/api/word-groups\", async (req, res) => {\n    try {\n      const groups = await storage.getAllWordGroups();\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Failed to fetch word groups:\", error);\n      res.status(500).json({ error: \"Failed to fetch word groups\" });\n    }\n  });\n\n  // Get words for a specific group\n  app.get(\"/api/word-groups/:groupId/words\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const words = await storage.getWordsForGroup(groupId);\n      res.json(words);\n    } catch (error) {\n      console.error(\"Failed to fetch words for group:\", error);\n      res.status(500).json({ error: \"Failed to fetch words for group\" });\n    }\n  });\n\n  // Update group learned status\n  app.patch(\"/api/word-groups/:groupId\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const { isLearned } = req.body;\n      \n      if (typeof isLearned !== 'boolean') {\n        return res.status(400).json({ error: \"isLearned must be a boolean\" });\n      }\n\n      const updatedGroup = await storage.updateGroupLearnedStatus(groupId, isLearned);\n      res.json(updatedGroup);\n    } catch (error) {\n      console.error(\"Failed to update group status:\", error);\n      res.status(500).json({ error: \"Failed to update group status\" });\n    }\n  });\n\n  // Get audio settings\n  app.get(\"/api/audio-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getAudioSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Failed to fetch audio settings:\", error);\n      res.status(500).json({ error: \"Failed to fetch audio settings\" });\n    }\n  });\n\n  // Update audio settings\n  app.post(\"/api/audio-settings\", async (req, res) => {\n    try {\n      const data = insertAudioSettingsSchema.parse(req.body);\n      const settings = await storage.updateAudioSettings(data);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Failed to update audio settings:\", error);\n      res.status(500).json({ error: \"Failed to update audio settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":2503},"server/storage.ts":{"content":"import type { \n  User, \n  InsertUser, \n  WordGroup, \n  InsertWordGroup,\n  VocabularyWord,\n  InsertVocabularyWord,\n  AudioSettings, \n  InsertAudioSettings \n} from \"@shared/schema\";\nimport { users, wordGroups, vocabularyWords, audioSettings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  createUser(user: InsertUser): Promise<User>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  \n  // Word group methods\n  getAllWordGroups(): Promise<WordGroup[]>;\n  getWordsForGroup(groupId: string): Promise<VocabularyWord[]>;\n  updateGroupLearnedStatus(groupId: string, isLearned: boolean): Promise<WordGroup>;\n  \n  // Audio settings methods\n  getAudioSettings(): Promise<AudioSettings>;\n  updateAudioSettings(settings: InsertAudioSettings): Promise<AudioSettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createUser(user: InsertUser): Promise<User> {\n    const [created] = await db.insert(users).values(user).returning();\n    return created;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getAllWordGroups(): Promise<WordGroup[]> {\n    try {\n      const groups = await db\n        .select()\n        .from(wordGroups);\n      \n      // Sort HSK groups in proper order: HSK 1 1, HSK 1 2, ..., HSK 6 42, then other groups\n      const sorted = groups.sort((a, b) => {\n        const hskRegexA = /^HSK (\\d+) (\\d+)$/.exec(a.title);\n        const hskRegexB = /^HSK (\\d+) (\\d+)$/.exec(b.title);\n        \n        // If both are HSK groups, sort by level then by group number\n        if (hskRegexA && hskRegexB) {\n          const [, levelA, groupA] = hskRegexA;\n          const [, levelB, groupB] = hskRegexB;\n          \n          // First by HSK level\n          const levelDiff = parseInt(levelA) - parseInt(levelB);\n          if (levelDiff !== 0) return levelDiff;\n          \n          // Then by group number within the level\n          return parseInt(groupA) - parseInt(groupB);\n        }\n        \n        // If only A is HSK, put it first\n        if (hskRegexA && !hskRegexB) return -1;\n        \n        // If only B is HSK, put it first\n        if (!hskRegexA && hskRegexB) return 1;\n        \n        // If neither is HSK, sort by creation time\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      });\n\n      return sorted;\n    } catch (error) {\n      console.error('Database error in getAllWordGroups:', error);\n      throw error;\n    }\n  }\n\n  async getWordsForGroup(groupId: string): Promise<VocabularyWord[]> {\n    try {\n      const words = await db\n        .select()\n        .from(vocabularyWords)\n        .where(eq(vocabularyWords.groupId, groupId))\n        .orderBy(asc(vocabularyWords.orderIndex));\n      return words;\n    } catch (error) {\n      console.error('Database error in getWordsForGroup:', error);\n      throw error;\n    }\n  }\n\n  async updateGroupLearnedStatus(groupId: string, isLearned: boolean): Promise<WordGroup> {\n    try {\n      const [updatedGroup] = await db\n        .update(wordGroups)\n        .set({ isLearned: isLearned ? 1 : 0 })\n        .where(eq(wordGroups.id, groupId))\n        .returning();\n      return updatedGroup;\n    } catch (error) {\n      console.error('Database error in updateGroupLearnedStatus:', error);\n      throw error;\n    }\n  }\n\n  async getAudioSettings(): Promise<AudioSettings> {\n    try {\n      let [settings] = await db.select().from(audioSettings).limit(1);\n      \n      if (!settings) {\n        // Create default settings if none exist\n        [settings] = await db\n          .insert(audioSettings)\n          .values({\n            pauseDuration: 1.0,\n            voiceSpeed: 1.0,\n            audioQuality: \"high\",\n            languageOrder: \"english-first\",\n          })\n          .returning();\n      }\n      \n      return settings;\n    } catch (error) {\n      console.error('Database error in getAudioSettings:', error);\n      throw error;\n    }\n  }\n\n  async updateAudioSettings(newSettings: InsertAudioSettings): Promise<AudioSettings> {\n    try {\n      const currentSettings = await this.getAudioSettings();\n      \n      const [updated] = await db\n        .update(audioSettings)\n        .set(newSettings)\n        .where(eq(audioSettings.id, currentSettings.id))\n        .returning();\n      \n      return updated;\n    } catch (error) {\n      console.error('Database error in updateAudioSettings:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":4841},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, real, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const wordGroups = pgTable(\"word_groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  isLearned: integer(\"is_learned\").default(0).notNull(), // 0 = not learned, 1 = learned\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const vocabularyWords = pgTable(\"vocabulary_words\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => wordGroups.id),\n  englishText: text(\"english_text\").notNull(),\n  chineseText: text(\"chinese_text\").notNull(),\n  pinyinText: text(\"pinyin_text\").notNull(),\n  orderIndex: integer(\"order_index\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const audioSettings = pgTable(\"audio_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pauseDuration: real(\"pause_duration\").default(1.0).notNull(),\n  voiceSpeed: real(\"voice_speed\").default(1.0).notNull(),\n  audioQuality: text(\"audio_quality\").default(\"high\").notNull(),\n  languageOrder: text(\"language_order\").default(\"english-first\").notNull(), // \"english-first\" or \"chinese-first\"\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertWordGroupSchema = createInsertSchema(wordGroups).pick({\n  title: true,\n  description: true,\n  isLearned: true,\n});\n\nexport const insertVocabularyWordSchema = createInsertSchema(vocabularyWords).pick({\n  groupId: true,\n  englishText: true,\n  chineseText: true,\n  pinyinText: true,\n  orderIndex: true,\n});\n\nexport const insertAudioSettingsSchema = createInsertSchema(audioSettings).pick({\n  pauseDuration: true,\n  voiceSpeed: true,\n  audioQuality: true,\n  languageOrder: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type WordGroup = typeof wordGroups.$inferSelect;\nexport type InsertWordGroup = z.infer<typeof insertWordGroupSchema>;\nexport type VocabularyWord = typeof vocabularyWords.$inferSelect;\nexport type InsertVocabularyWord = z.infer<typeof insertVocabularyWordSchema>;\nexport type AudioSettings = typeof audioSettings.$inferSelect;\nexport type InsertAudioSettings = z.infer<typeof insertAudioSettingsSchema>;\n","size_bytes":2744},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --error: hsl(0, 84.2%, 60.2%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --error: hsl(0, 62.8%, 30.6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .slider::-webkit-slider-thumb {\n    appearance: none;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: hsl(207, 90%, 54%);\n    cursor: pointer;\n    border: 2px solid #ffffff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  }\n  \n  .slider::-moz-range-thumb {\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: hsl(207, 90%, 54%);\n    cursor: pointer;\n    border: 2px solid #ffffff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  }\n}\n","size_bytes":2351},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"mobile/chinese-vocab-test/App.js":{"content":"import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","size_bytes":454},"mobile/chinese-vocab-test/index.js":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"client/src/components/browser-audio-player.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Play, Pause, Download, Volume2, FileAudio } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { TTSService } from \"@/lib/tts-service\";\nimport { AdvancedAudioGenerator } from \"@/lib/advanced-audio-generator\";\n\ninterface BrowserAudioPlayerProps {\n  englishText: string;\n  chineseText: string;\n  settings: {\n    pauseDuration: number;\n    voiceSpeed: number;\n    audioQuality: string;\n    languageOrder?: string;\n  };\n  duration?: number;\n}\n\nexport function BrowserAudioPlayer({ englishText, chineseText, settings, duration = 0 }: BrowserAudioPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState<\"idle\" | \"first\" | \"pause\" | \"second\">(\"idle\");\n  const [volume, setVolume] = useState(75);\n  const [isGeneratingAudio, setIsGeneratingAudio] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef(0);\n  const { toast } = useToast();\n\n  // Calculate durations based on language order\n  const isChineseFirst = settings.languageOrder === 'chinese-first';\n  const firstText = isChineseFirst ? chineseText : englishText;\n  const secondText = isChineseFirst ? englishText : chineseText;\n  const firstDuration = isChineseFirst ? chineseText.length * 0.12 : englishText.length * 0.08;\n  const secondDuration = isChineseFirst ? englishText.length * 0.08 : chineseText.length * 0.12;\n  const pauseDuration = settings.pauseDuration;\n  const totalDuration = firstDuration + pauseDuration + secondDuration;\n\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const speakText = (text: string, language: string, speed: number): Promise<void> => {\n    return new Promise(async (resolve, reject) => {\n      // Try external TTS services for Chinese first\n      if (language === 'zh-CN') {\n        try {\n          const externalAudio = await TTSService.generateSpeech(text, language, speed, volume);\n          if (externalAudio) {\n            externalAudio.onended = () => resolve();\n            externalAudio.onerror = () => fallbackToBrowserSpeech();\n            externalAudio.play();\n            return;\n          }\n        } catch (error) {\n          console.log('External TTS failed, using browser speech');\n        }\n      }\n      \n      // Fallback to enhanced browser speech synthesis\n      fallbackToBrowserSpeech();\n      \n      function fallbackToBrowserSpeech() {\n        TTSService.speakWithBestVoice(text, language, speed, volume)\n          .then(() => resolve())\n          .catch((error) => reject(error));\n      }\n    });\n  };\n\n  const playSequence = async () => {\n    try {\n      setIsPlaying(true);\n      startTimeRef.current = Date.now();\n      \n      // Start timer\n      intervalRef.current = setInterval(() => {\n        const elapsed = (Date.now() - startTimeRef.current) / 1000;\n        setCurrentTime(elapsed);\n        \n        if (elapsed <= firstDuration) {\n          setCurrentPhase(\"first\");\n        } else if (elapsed <= firstDuration + pauseDuration) {\n          setCurrentPhase(\"pause\");\n        } else if (elapsed <= totalDuration) {\n          setCurrentPhase(\"second\");\n        } else {\n          setCurrentPhase(\"idle\");\n          setIsPlaying(false);\n          setCurrentTime(0);\n          if (intervalRef.current) clearInterval(intervalRef.current);\n        }\n      }, 100);\n\n      // Play first language\n      setCurrentPhase(\"first\");\n      const firstLang = isChineseFirst ? 'zh-CN' : 'en-US';\n      await speakText(firstText, firstLang, settings.voiceSpeed);\n      \n      // Pause\n      setCurrentPhase(\"pause\");\n      await new Promise(resolve => setTimeout(resolve, pauseDuration * 1000));\n      \n      // Play second language\n      setCurrentPhase(\"second\");\n      const secondLang = isChineseFirst ? 'en-US' : 'zh-CN';\n      await speakText(secondText, secondLang, settings.voiceSpeed);\n      \n      // Finished\n      setCurrentPhase(\"idle\");\n      setIsPlaying(false);\n      setCurrentTime(0);\n      if (intervalRef.current) clearInterval(intervalRef.current);\n      \n    } catch (error) {\n      console.error('Speech synthesis error:', error);\n      setIsPlaying(false);\n      setCurrentPhase(\"idle\");\n      if (intervalRef.current) clearInterval(intervalRef.current);\n      \n      toast({\n        title: \"Audio Playback Failed\",\n        description: \"Unable to play audio. Please check your browser's speech synthesis support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopPlayback = () => {\n    speechSynthesis.cancel();\n    setIsPlaying(false);\n    setCurrentPhase(\"idle\");\n    setCurrentTime(0);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  const togglePlayPause = () => {\n    if (isPlaying) {\n      stopPlayback();\n    } else {\n      playSequence();\n    }\n  };\n\n  const generateAndDownloadAudio = async () => {\n    setIsGeneratingAudio(true);\n    \n    try {\n      toast({\n        title: \"Recording Audio\",\n        description: \"Attempting to capture system audio with the same Microsoft Xiaoxiao voice quality. May request microphone or screen sharing permission.\",\n      });\n\n      // Use advanced audio generation to capture real speech with WAV conversion\n      const audioGenerator = new AdvancedAudioGenerator();\n      const audioBlob = await audioGenerator.generateRealAudioFile(\n        englishText, \n        chineseText, \n        settings,\n        'wav' // Convert to WAV format for better compatibility\n      );\n      audioGenerator.cleanup();\n      \n      // Detect the file type and set appropriate extension and filename\n      const isWebM = audioBlob.type === 'audio/webm';\n      const isWav = audioBlob.type === 'audio/wav';\n      const isAudio = isWebM || isWav;\n      \n      let fileExtension = '.json';\n      if (isWebM) fileExtension = '.webm';\n      else if (isWav) fileExtension = '.wav';\n      \n      const fileName = `translation_${englishText.slice(0, 20).replace(/[^a-zA-Z0-9]/g, \"_\")}${fileExtension}`;\n      \n      const url = window.URL.createObjectURL(audioBlob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      if (isWebM) {\n        toast({\n          title: \"Audio File Downloaded (.webm)\",\n          description: \"Audio recorded! Use VLC Player to open, or try the Play button above for immediate listening with perfect quality.\",\n        });\n      } else if (isWav) {\n        toast({\n          title: \"Audio File Downloaded (.wav)\",\n          description: \"High-quality audio file created with English → pause → Chinese sequence\",\n        });\n      } else {\n        toast({\n          title: \"Instructions Downloaded\",\n          description: \"Recording wasn't possible. Downloaded detailed guide with timing specifications for manual audio creation.\",\n        });\n      }\n      \n    } catch (error) {\n      console.error('Audio generation failed:', error);\n      toast({\n        title: \"Download Failed\",\n        description: \"Unable to generate audio file. Try using the play button instead.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGeneratingAudio(false);\n    }\n  };\n\n  const progressPercentage = totalDuration > 0 ? (currentTime / totalDuration) * 100 : 0;\n\n  const getPhaseDescription = () => {\n    switch (currentPhase) {\n      case \"first\": \n        return isChineseFirst ? \"Speaking Chinese...\" : \"Speaking English...\";\n      case \"pause\": \n        return \"Pause...\";\n      case \"second\": \n        return isChineseFirst ? \"Speaking English...\" : \"Speaking Chinese...\";\n      default: \n        return \"Ready to play\";\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h4 className=\"font-medium text-gray-900 dark:text-white\">Audio Playback</h4>\n        <div className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400\">\n          <Volume2 className=\"w-4 h-4\" />\n          <span>{Math.ceil(totalDuration)}s</span>\n        </div>\n      </div>\n      \n      <div className=\"mb-4\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n          {getPhaseDescription()}\n        </div>\n        <div className=\"w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full\">\n          <div \n            className=\"h-2 bg-primary rounded-full transition-all duration-300\"\n            style={{ width: `${progressPercentage}%` }}\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <Button\n          onClick={togglePlayPause}\n          className=\"w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors p-0\"\n        >\n          {isPlaying ? (\n            <Pause className=\"w-5 h-5\" />\n          ) : (\n            <Play className=\"w-5 h-5 ml-0.5\" />\n          )}\n        </Button>\n        \n        <div className=\"flex-1\" />\n        \n        <div className=\"flex items-center space-x-2\">\n          <Volume2 className=\"w-4 h-4 text-gray-400\" />\n          <Slider\n            value={[volume]}\n            onValueChange={(value) => setVolume(value[0])}\n            max={100}\n            step={1}\n            className=\"w-20\"\n          />\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={generateAndDownloadAudio}\n          disabled={isGeneratingAudio}\n          className=\"flex items-center space-x-1\"\n          title=\"Download audio file with English → pause → Chinese sequence\"\n        >\n          {isGeneratingAudio ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <FileAudio className=\"w-4 h-4\" />\n              <span>Download Audio</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {totalDuration > 0 && (\n        <div className=\"mt-4 text-xs text-gray-500 dark:text-gray-400 flex justify-between\">\n          <span>{isChineseFirst ? 'Chinese' : 'English'}: 0:00-{Math.ceil(firstDuration)}s</span>\n          <span>Pause: {Math.ceil(firstDuration)}s-{Math.ceil(firstDuration + pauseDuration)}s</span>\n          <span>{isChineseFirst ? 'English' : 'Chinese'}: {Math.ceil(firstDuration + pauseDuration)}s-{Math.ceil(totalDuration)}s</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10927},"client/src/components/history-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { History, Play, Download, Trash2 } from \"lucide-react\";\nimport type { Translation } from \"@shared/schema\";\n\ninterface HistoryCardProps {\n  onLoadTranslation?: (translation: Translation) => void;\n}\n\nexport function HistoryCard({ onLoadTranslation }: HistoryCardProps) {\n  const { data: translations = [], isLoading } = useQuery<Translation[]>({\n    queryKey: [\"/api/translations\"],\n  });\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes} mins ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;\n    return `${Math.floor(diffInMinutes / 1440)} days ago`;\n  };\n\n  const handlePlayAudio = (audioUrl: string | null) => {\n    if (audioUrl) {\n      const audio = new Audio(audioUrl);\n      audio.play();\n    }\n  };\n\n  const handleDownloadAudio = async (audioUrl: string | null, englishText: string) => {\n    if (!audioUrl) return;\n    \n    try {\n      const response = await fetch(audioUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${englishText.slice(0, 30).replace(/[^a-zA-Z0-9]/g, \"_\")}.mp3`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error(\"Download failed:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white rounded-xl shadow-lg border border-gray-200\">\n        <CardContent className=\"p-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded mb-4 w-1/3\"></div>\n            <div className=\"space-y-3\">\n              <div className=\"h-16 bg-gray-100 rounded-lg\"></div>\n              <div className=\"h-16 bg-gray-100 rounded-lg\"></div>\n              <div className=\"h-16 bg-gray-100 rounded-lg\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg border border-gray-200\">\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <History className=\"w-5 h-5 text-primary mr-2\" />\n            Recent Translations\n          </h3>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-1\" />\n            Clear All\n          </Button>\n        </div>\n        \n        {translations.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <History className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <p>No translations yet</p>\n            <p className=\"text-sm\">Your translation history will appear here</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {translations.map((translation) => (\n              <div\n                key={translation.id}\n                className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\"\n                onClick={() => onLoadTranslation?.(translation)}\n              >\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900 line-clamp-1\">\n                    {translation.englishText}\n                  </p>\n                  <p className=\"text-sm text-gray-500 line-clamp-1\">\n                    {translation.chineseText}\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <span className=\"text-xs text-gray-400 whitespace-nowrap\">\n                    {formatTimeAgo(new Date(translation.createdAt))}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handlePlayAudio(translation.audioFileUrl);\n                    }}\n                    className=\"text-primary hover:text-blue-600 transition-colors p-1\"\n                  >\n                    <Play className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDownloadAudio(translation.audioFileUrl, translation.englishText);\n                    }}\n                    className=\"text-gray-400 hover:text-gray-600 transition-colors p-1\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5307},"client/src/components/playback-mode-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Repeat, SkipForward, Shuffle, Info } from \"lucide-react\";\nimport { AudioManager, type PlaybackMode } from \"@/lib/audio-manager\";\n\ninterface PlaybackModeSelectorProps {\n  isReviewAvailable: boolean;\n}\n\nexport function PlaybackModeSelector({ isReviewAvailable }: PlaybackModeSelectorProps) {\n  const [currentMode, setCurrentMode] = useState<PlaybackMode>(\"loop\");\n\n  useEffect(() => {\n    const unsubscribe = AudioManager.subscribe((state) => {\n      setCurrentMode(state.playbackMode);\n    });\n    return unsubscribe;\n  }, []);\n\n  const handleModeChange = (mode: PlaybackMode) => {\n    AudioManager.setPlaybackMode(mode);\n    setCurrentMode(mode);\n  };\n\n  const modes = [\n    {\n      id: \"loop\" as PlaybackMode,\n      name: \"Loop\",\n      icon: Repeat,\n      description: \"Plays selected group continuously until stopped\",\n      color: \"bg-blue-500 text-white border-blue-500\",\n      activeColor: \"bg-blue-700 text-white border-blue-700\"\n    },\n    {\n      id: \"sequential\" as PlaybackMode,\n      name: \"Sequential\", \n      icon: SkipForward,\n      description: \"Auto-advances to next group after completion\",\n      color: \"bg-green-500 text-white border-green-500\",\n      activeColor: \"bg-green-700 text-white border-green-700\"\n    },\n    {\n      id: \"review\" as PlaybackMode,\n      name: \"Review\",\n      icon: Shuffle,\n      description: \"Randomly plays learned groups for practice\",\n      color: \"bg-purple-500 text-white border-purple-500\",\n      activeColor: \"bg-purple-700 text-white border-purple-700\",\n      disabled: !isReviewAvailable\n    }\n  ];\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-200\">\n      <div className=\"flex items-center space-x-2 mb-4\">\n        <Info className=\"w-5 h-5 text-blue-600\" />\n        <h3 className=\"text-lg font-semibold text-gray-900\">Playback Mode</h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {modes.map((mode) => {\n          const Icon = mode.icon;\n          const isActive = currentMode === mode.id;\n          const isDisabled = mode.disabled;\n          \n          return (\n            <div key={mode.id} className=\"relative\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className={`w-full h-auto p-4 flex flex-col items-center space-y-2 border-2 transition-all min-h-[120px] ${\n                  isDisabled \n                    ? \"cursor-not-allowed bg-gray-400 text-white border-gray-400\"\n                    : isActive \n                      ? mode.activeColor\n                      : `${mode.color} hover:${mode.activeColor}`\n                }`}\n                onClick={() => !isDisabled && handleModeChange(mode.id)}\n                disabled={isDisabled}\n              >\n                <Icon className=\"w-6 h-6 flex-shrink-0\" />\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-sm mb-1\">{mode.name}</div>\n                  <div className=\"text-xs leading-snug font-medium\">\n                    {mode.description}\n                  </div>\n                </div>\n                {isActive && !isDisabled && (\n                  <Badge variant=\"secondary\" className=\"absolute -top-2 -right-2 bg-white text-gray-800 border shadow-sm\">\n                    Active\n                  </Badge>\n                )}\n              </Button>\n              \n              {isDisabled && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-50 rounded-lg\">\n                  <Badge variant=\"outline\" className=\"bg-white text-gray-600\">\n                    No Learned Groups\n                  </Badge>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n        <div className=\"text-sm text-gray-600\">\n          <strong>Current Mode: {modes.find(m => m.id === currentMode)?.name}</strong>\n          <br />\n          {modes.find(m => m.id === currentMode)?.description}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4245},"client/src/components/settings-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Settings, Volume2, Clock, Zap } from \"lucide-react\";\nimport type { AudioSettings } from \"@shared/schema\";\n\ninterface SettingsCardProps {\n  settings: AudioSettings;\n  onSettingsChange: (settings: AudioSettings) => void;\n}\n\nexport function SettingsCard({ settings, onSettingsChange }: SettingsCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handlePauseDurationChange = (value: number[]) => {\n    onSettingsChange({\n      ...settings,\n      pauseDuration: value[0]\n    });\n  };\n\n  const handleVoiceSpeedChange = (value: number[]) => {\n    onSettingsChange({\n      ...settings,\n      voiceSpeed: value[0]\n    });\n  };\n\n  const handleAudioQualityChange = (quality: string) => {\n    onSettingsChange({\n      ...settings,\n      audioQuality: quality as \"standard\" | \"high\" | \"premium\"\n    });\n  };\n\n  const handleLanguageOrderChange = (order: string) => {\n    onSettingsChange({\n      ...settings,\n      languageOrder: order as \"english-first\" | \"chinese-first\"\n    });\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2 text-lg\">\n            <Settings className=\"w-5 h-5\" />\n            <span>Audio Settings</span>\n          </CardTitle>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {isExpanded ? \"Hide\" : \"Show\"}\n          </Button>\n        </div>\n      </CardHeader>\n      \n      {isExpanded && (\n        <CardContent className=\"pt-0\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Language Order */}\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center space-x-2 text-sm font-medium\">\n                <Volume2 className=\"w-4 h-4\" />\n                <span>Language Order</span>\n              </Label>\n              <Select value={settings.languageOrder} onValueChange={handleLanguageOrderChange}>\n                <SelectTrigger className=\"h-10\">\n                  <SelectValue placeholder=\"Choose order\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"english-first\">English → Chinese</SelectItem>\n                  <SelectItem value=\"chinese-first\">Chinese → English</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-gray-500\">\n                Order of pronunciation\n              </p>\n            </div>\n\n            {/* Pause Duration */}\n            <div className=\"space-y-3\">\n              <Label className=\"flex items-center space-x-2 text-sm font-medium\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Pause Duration</span>\n              </Label>\n              <div className=\"px-3\">\n                <Slider\n                  value={[settings.pauseDuration]}\n                  onValueChange={handlePauseDurationChange}\n                  max={3}\n                  min={0.2}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>0.2s</span>\n                <span className=\"font-medium\">{settings.pauseDuration}s</span>\n                <span>3.0s</span>\n              </div>\n            </div>\n\n            {/* Voice Speed */}\n            <div className=\"space-y-3\">\n              <Label className=\"flex items-center space-x-2 text-sm font-medium\">\n                <Zap className=\"w-4 h-4\" />\n                <span>Voice Speed</span>\n              </Label>\n              <div className=\"px-3\">\n                <Slider\n                  value={[settings.voiceSpeed]}\n                  onValueChange={handleVoiceSpeedChange}\n                  max={2}\n                  min={0.5}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>0.5x</span>\n                <span className=\"font-medium\">{settings.voiceSpeed}x</span>\n                <span>2.0x</span>\n              </div>\n            </div>\n\n            {/* Audio Quality */}\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center space-x-2 text-sm font-medium\">\n                <Volume2 className=\"w-4 h-4\" />\n                <span>Audio Quality</span>\n              </Label>\n              <Select value={settings.audioQuality} onValueChange={handleAudioQualityChange}>\n                <SelectTrigger className=\"h-10\">\n                  <SelectValue placeholder=\"Choose quality\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"standard\">Standard</SelectItem>\n                  <SelectItem value=\"high\">High Quality</SelectItem>\n                  <SelectItem value=\"premium\">Premium</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-gray-500\">\n                Browser voice quality\n              </p>\n            </div>\n          </div>\n\n          {/* Quick Settings */}\n          <div className=\"mt-6 pt-4 border-t\">\n            <div className=\"flex flex-wrap gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onSettingsChange({\n                  ...settings,\n                  pauseDuration: 0.5,\n                  voiceSpeed: 1.2,\n                  languageOrder: \"english-first\"\n                })}\n              >\n                Fast Learning\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onSettingsChange({\n                  ...settings,\n                  pauseDuration: 1.5,\n                  voiceSpeed: 0.8,\n                  languageOrder: \"english-first\"\n                })}\n              >\n                Careful Practice\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onSettingsChange({\n                  ...settings,\n                  pauseDuration: 1.0,\n                  voiceSpeed: 1.0,\n                  languageOrder: \"english-first\"\n                })}\n              >\n                Reset Defaults\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}","size_bytes":6979},"client/src/components/translation-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BrowserAudioPlayer } from \"@/components/browser-audio-player\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { TTSService } from \"@/lib/tts-service\";\nimport { Languages, Play, Info } from \"lucide-react\";\n\ninterface TranslationResult {\n  id: string;\n  audioUrl: string | null;\n  englishAudioUrl: string | null;\n  chineseAudioUrl: string | null;\n  duration: number;\n  useClientTTS?: boolean;\n  settings?: {\n    pauseDuration: number;\n    voiceSpeed: number;\n    audioQuality: string;\n  };\n}\n\ninterface AudioSettings {\n  pauseDuration: number;\n  voiceSpeed: number;\n  audioQuality: string;\n  languageOrder?: string;\n}\n\ninterface TranslationCardProps {\n  audioSettings: AudioSettings;\n}\n\nexport function TranslationCard({ audioSettings }: TranslationCardProps) {\n  const [inputText, setInputText] = useState(\"\");\n  const [englishText, setEnglishText] = useState(\"\");\n  const [chineseText, setChineseText] = useState(\"\");\n  const [translationResult, setTranslationResult] = useState<TranslationResult | null>(null);\n  const [showResults, setShowResults] = useState(false);\n  const { toast } = useToast();\n\n  const translateMutation = useMutation({\n    mutationFn: async (text: string) => {\n      const response = await apiRequest(\"POST\", \"/api/translate\", { text });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setEnglishText(data.englishText);\n      setChineseText(data.chineseText);\n      generateAudio(data.englishText, data.chineseText);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Translation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateAudioMutation = useMutation({\n    mutationFn: async ({ englishText, chineseText }: { englishText: string; chineseText: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/generate-audio\", {\n        englishText,\n        chineseText,\n        settings: audioSettings,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setTranslationResult(data);\n      setShowResults(true);\n      toast({\n        title: \"Success\",\n        description: \"Audio generated successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Audio Generation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateAudio = (englishText: string, chineseText: string) => {\n    generateAudioMutation.mutate({ englishText, chineseText });\n  };\n\n  const handleTranslateAndGenerate = () => {\n    if (!inputText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter some text to translate\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    translateMutation.mutate(inputText.trim());\n  };\n\n  const playIndividualAudio = async (text: string, language: 'en' | 'zh') => {\n    try {\n      const langCode = language === 'zh' ? 'zh-CN' : 'en-US';\n      \n      // Try external TTS for Chinese first\n      if (language === 'zh') {\n        const externalAudio = await TTSService.generateSpeech(text, langCode, audioSettings.voiceSpeed, 75);\n        if (externalAudio) {\n          externalAudio.play();\n          return;\n        }\n      }\n      \n      // Fallback to enhanced browser speech\n      await TTSService.speakWithBestVoice(text, langCode, audioSettings.voiceSpeed, 75);\n      \n    } catch (error) {\n      toast({\n        title: \"Audio Playback Failed\",\n        description: \"Unable to play audio. Please check your browser's speech synthesis support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const isLoading = translateMutation.isPending || generateAudioMutation.isPending;\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden\">\n      <CardContent className=\"p-8\">\n        <div className=\"mb-6\">\n          <label htmlFor=\"englishInput\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n            <i className=\"fas fa-keyboard text-primary mr-2\"></i>\n            Enter English text\n          </label>\n          <div className=\"relative\">\n            <Textarea\n              id=\"englishInput\"\n              rows={4}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none transition-all duration-200\"\n              placeholder=\"Type your English word or phrase here...\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n            />\n            <div className=\"absolute bottom-3 right-3 text-xs text-gray-400\">\n              {inputText.length} characters\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-center mb-6\">\n          <Button\n            onClick={handleTranslateAndGenerate}\n            disabled={isLoading || !inputText.trim()}\n            className=\"inline-flex items-center px-8 py-3 bg-primary text-white font-medium rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-4 focus:ring-blue-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Languages className=\"w-5 h-5 mr-2\" />\n            {isLoading ? \"Processing...\" : \"Translate & Generate Audio\"}\n          </Button>\n        </div>\n      </CardContent>\n\n      {showResults && (\n        <div className=\"border-t border-gray-200 bg-gray-50\">\n          <div className=\"p-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\n              <i className=\"fas fa-volume-up text-primary mr-2\"></i>\n              Generated Audio\n            </h3>\n\n            <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n              <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-gray-900 flex items-center\">\n                    <span className=\"w-6 h-4 mr-2 bg-blue-600 rounded text-white text-xs flex items-center justify-center\">🇺🇸</span>\n                    English\n                  </h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-primary hover:text-blue-600 transition-colors p-1\"\n                    onClick={() => playIndividualAudio(englishText, 'en')}\n                  >\n                    <Play className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <p className=\"text-gray-700\">{englishText}</p>\n              </div>\n\n              <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-gray-900 flex items-center\">\n                    <span className=\"w-6 h-4 mr-2 bg-red-600 rounded text-white text-xs flex items-center justify-center\">🇨🇳</span>\n                    中文 (Mandarin)\n                  </h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-primary hover:text-blue-600 transition-colors p-1\"\n                    onClick={() => playIndividualAudio(chineseText, 'zh')}\n                  >\n                    <Play className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <p className=\"text-gray-700\">{chineseText}</p>\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <BrowserAudioPlayer\n                englishText={englishText}\n                chineseText={chineseText}\n                settings={audioSettings}\n                duration={translationResult?.duration}\n              />\n            </div>\n\n            <div className=\"bg-white rounded-lg p-6 border border-gray-200\">\n              <div className=\"flex items-center mb-4\">\n                <Info className=\"w-5 h-5 text-blue-500 mr-2\" />\n                <h4 className=\"font-medium text-gray-900\">Audio Information</h4>\n              </div>\n              \n              <div className=\"text-sm text-gray-600 bg-green-50 p-4 rounded-lg border border-green-200\">\n                <p className=\"mb-2\">\n                  <strong>✨ High-Quality Chinese Audio Active</strong>\n                </p>\n                <p className=\"mb-2 text-green-700\">\n                  ✓ Using Microsoft Xiaoxiao voice for natural Chinese pronunciation<br/>\n                  ✓ Optimized voice selection automatically applied<br/>\n                  ✓ Completely free - no API keys required<br/>\n                  ✓ Works offline with your system voices\n                </p>\n                <p className=\"text-xs text-green-600\">\n                  Great! Your system has excellent Chinese voices available. \n                  You can test different voices in the Audio Settings below.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":9346},"client/src/components/vocabulary-group-card.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Pause, Square, BookOpen, CheckCircle, Circle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AudioManager } from \"@/lib/audio-manager\";\nimport type { WordGroup, VocabularyWord, AudioSettings } from \"@shared/schema\";\n\ninterface VocabularyGroupCardProps {\n  group: WordGroup;\n  words: VocabularyWord[];\n  audioSettings: AudioSettings;\n  onToggleLearned: (groupId: string, isLearned: boolean) => void;\n}\n\nexport function VocabularyGroupCard({ \n  group, \n  words, \n  audioSettings,\n  onToggleLearned \n}: VocabularyGroupCardProps) {\n  const [audioState, setAudioState] = useState(AudioManager.getState());\n  const { toast } = useToast();\n\n  // Subscribe to audio manager state changes\n  useEffect(() => {\n    const unsubscribe = AudioManager.subscribe(setAudioState);\n    return unsubscribe;\n  }, []);\n\n  const isLearned = group.isLearned === 1;\n  const isThisGroupPlaying = audioState.isPlaying && audioState.currentGroupId === group.id;\n\n  const handlePlayPause = async () => {\n    if (isThisGroupPlaying) {\n      // Stop current playback\n      AudioManager.stopAudio();\n    } else {\n      // Start playback for this group\n      if (words.length === 0) {\n        toast({\n          title: \"No Words Available\",\n          description: \"This group doesn't have any words to play.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      try {\n        await AudioManager.startGroupPlayback(group.id);\n      } catch (error) {\n        console.error('Error starting playback:', error);\n        toast({\n          title: \"Playback Error\",\n          description: \"Could not start audio playback.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const toggleLearned = () => {\n    onToggleLearned(group.id, !isLearned);\n  };\n\n  const getPhaseText = () => {\n    if (audioState.currentPhase === \"idle\") return \"Ready\";\n    if (audioState.currentPhase === \"english\") return \"English\";\n    if (audioState.currentPhase === \"chinese\") return \"中文 (1st)\";\n    if (audioState.currentPhase === \"chinese2\") return \"中文 (2nd)\";\n    if (audioState.currentPhase === \"pause\") return \"Pause\";\n    return \"Ready\";\n  };\n\n  const getCurrentWord = () => {\n    if (isThisGroupPlaying && audioState.currentWordIndex < words.length) {\n      return words[audioState.currentWordIndex];\n    }\n    return null;\n  };\n\n  const currentWord = getCurrentWord();\n\n  return (\n    <Card className={`w-full transition-all duration-200 ${isLearned ? 'bg-green-50 border-green-200' : 'bg-white border-gray-200'}`}>\n      <CardContent className=\"p-3\">\n        {/* Header with Start Learning button inline */}\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center space-x-2\">\n            <BookOpen className=\"w-4 h-4 text-primary\" />\n            <div>\n              <h3 className=\"text-sm font-semibold text-gray-900\">{group.title}</h3>\n              <p className=\"text-xs text-gray-600\">{group.description}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={isLearned ? \"default\" : \"secondary\"} className=\"text-xs px-2 py-0.5\">\n              {words.length} words\n            </Badge>\n            {!isThisGroupPlaying ? (\n              <Button\n                onClick={handlePlayPause}\n                size=\"sm\"\n                className=\"text-xs px-3 py-1.5\"\n                disabled={words.length === 0}\n              >\n                <Play className=\"w-3 h-3 mr-1\" />\n                Start Learning\n              </Button>\n            ) : (\n              <Button\n                onClick={handlePlayPause}\n                variant=\"destructive\"\n                size=\"sm\"\n                className=\"text-xs px-3 py-1.5\"\n              >\n                <Square className=\"w-3 h-3 mr-1\" />\n                Stop\n              </Button>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleLearned}\n              className={`p-1.5 ${isLearned ? 'text-green-600 hover:text-green-700' : 'text-gray-400 hover:text-gray-600'}`}\n            >\n              {isLearned ? <CheckCircle className=\"w-4 h-4\" /> : <Circle className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Current Word Display - Only when playing */}\n        {isThisGroupPlaying && currentWord && (\n          <div className=\"mt-2 p-2 bg-blue-50 rounded border border-blue-200\">\n            <div className=\"flex items-center justify-between text-xs mb-1\">\n              <span className=\"font-medium text-blue-700\">\n                Word {audioState.currentWordIndex + 1}/{words.length}\n              </span>\n              <Badge variant=\"outline\" className=\"text-xs py-0 px-1\">\n                {getPhaseText()}\n              </Badge>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"text-center\">\n                <div className={`text-sm font-medium ${audioState.currentPhase === 'english' ? 'text-blue-600' : 'text-gray-800'}`}>\n                  {currentWord.englishText}\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className={`text-sm font-medium ${(audioState.currentPhase === 'chinese' || audioState.currentPhase === 'chinese2') ? 'text-blue-600' : 'text-gray-800'}`}>\n                  {currentWord.chineseText}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {currentWord.pinyinText}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5928},"client/src/components/voice-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Volume2 } from \"lucide-react\";\nimport { TTSService } from \"@/lib/tts-service\";\n\ninterface VoiceSelectorProps {\n  onVoiceChange?: (voice: SpeechSynthesisVoice | null) => void;\n}\n\nexport function VoiceSelector({ onVoiceChange }: VoiceSelectorProps) {\n  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\n  const [selectedVoice, setSelectedVoice] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadVoices = () => {\n      const availableVoices = TTSService.getBrowserVoices();\n      const chineseVoices = availableVoices.filter(voice => \n        voice.lang.includes('zh') || \n        voice.lang.includes('cmn') ||\n        voice.name.toLowerCase().includes('chinese') ||\n        voice.name.toLowerCase().includes('mandarin')\n      );\n      \n      setVoices(chineseVoices);\n      \n      // Auto-select the best Chinese voice\n      const bestVoice = TTSService.getBestChineseVoice();\n      if (bestVoice) {\n        setSelectedVoice(bestVoice.name);\n        onVoiceChange?.(bestVoice);\n      }\n      \n      setIsLoading(false);\n    };\n\n    // Voices might not be immediately available\n    if (speechSynthesis.getVoices().length === 0) {\n      speechSynthesis.addEventListener('voiceschanged', loadVoices);\n    } else {\n      loadVoices();\n    }\n\n    return () => {\n      speechSynthesis.removeEventListener('voiceschanged', loadVoices);\n    };\n  }, [onVoiceChange]);\n\n  const handleVoiceChange = (voiceName: string) => {\n    setSelectedVoice(voiceName);\n    const voice = voices.find(v => v.name === voiceName) || null;\n    onVoiceChange?.(voice);\n  };\n\n  const testVoice = async () => {\n    const voice = voices.find(v => v.name === selectedVoice);\n    if (voice) {\n      try {\n        const utterance = new SpeechSynthesisUtterance(\"你好，这是中文语音测试\");\n        utterance.voice = voice;\n        utterance.rate = 1.0;\n        speechSynthesis.speak(utterance);\n      } catch (error) {\n        console.error('Voice test failed:', error);\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-2\">\n        <Label className=\"text-sm font-medium text-gray-700\">Loading Chinese voices...</Label>\n        <div className=\"h-10 bg-gray-100 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <Label className=\"text-sm font-medium text-gray-700 flex items-center\">\n        <Volume2 className=\"w-4 h-4 mr-2\" />\n        Chinese Voice ({voices.length} available)\n      </Label>\n      <div className=\"flex space-x-2\">\n        <Select value={selectedVoice} onValueChange={handleVoiceChange}>\n          <SelectTrigger className=\"flex-1\">\n            <SelectValue placeholder=\"Select Chinese voice...\" />\n          </SelectTrigger>\n          <SelectContent>\n            {voices.map((voice) => (\n              <SelectItem key={voice.name} value={voice.name}>\n                {voice.name} ({voice.lang})\n              </SelectItem>\n            ))}\n            {voices.length === 0 && (\n              <SelectItem value=\"none\" disabled>\n                No Chinese voices available\n              </SelectItem>\n            )}\n          </SelectContent>\n        </Select>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={testVoice}\n          disabled={!selectedVoice}\n          className=\"px-3\"\n        >\n          <Play className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      \n      {voices.length === 0 && (\n        <p className=\"text-xs text-gray-500\">\n          No Chinese voices detected. Audio will use default system voice.\n        </p>\n      )}\n      \n      {voices.length > 0 && (\n        <p className=\"text-xs text-gray-500\">\n          Found {voices.length} Chinese voice{voices.length > 1 ? 's' : ''}. Click play to test pronunciation.\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":4132},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/advanced-audio-generator.ts":{"content":"import { AudioConverter } from './audio-converter';\n\n// Advanced audio generator that captures actual browser speech synthesis\nexport class AdvancedAudioGenerator {\n  private audioContext: AudioContext | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private recordedChunks: Blob[] = [];\n  private audioConverter: AudioConverter;\n\n  constructor() {\n    this.audioConverter = new AudioConverter();\n  }\n\n  async generateRealAudioFile(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n      languageOrder?: string;\n      selectedVoice?: string;\n    },\n    preferredFormat: 'webm' | 'wav' | 'mp3' = 'wav'\n  ): Promise<Blob> {\n    \n    try {\n      // Method 1: Try MediaRecorder approach (most likely to work)\n      const webmBlob = await this.captureWithMediaRecorder(englishText, chineseText, settings);\n      \n      // Convert to preferred format if not webm\n      if (preferredFormat === 'wav' && AudioConverter.isConversionSupported()) {\n        try {\n          const convertedBlob = await this.audioConverter.convertToWAV(webmBlob);\n          return convertedBlob;\n        } catch (conversionError) {\n          console.log('WAV conversion failed, returning original webm:', conversionError);\n          return webmBlob;\n        }\n      } else if (preferredFormat === 'mp3') {\n        try {\n          const convertedBlob = await this.audioConverter.convertToMP3(webmBlob);\n          return convertedBlob;\n        } catch (conversionError) {\n          console.log('MP3 conversion failed, returning original webm:', conversionError);\n          return webmBlob;\n        }\n      }\n      \n      return webmBlob;\n      \n    } catch (error) {\n      console.log('MediaRecorder failed, trying Web Audio approach:', error);\n      \n      try {\n        // Method 2: Try Web Audio API with destination capture\n        const webmBlob = await this.captureWithWebAudio(englishText, chineseText, settings);\n        \n        // Convert to preferred format if possible\n        if (preferredFormat === 'wav' && AudioConverter.isConversionSupported()) {\n          try {\n            return await this.audioConverter.convertToWAV(webmBlob);\n          } catch {\n            return webmBlob;\n          }\n        }\n        \n        return webmBlob;\n        \n      } catch (error2) {\n        console.log('All recording methods failed, creating instruction file:', error2);\n        \n        // Method 3: Create detailed instruction file with timing\n        return this.createDetailedInstructionFile(englishText, chineseText, settings);\n      }\n    }\n  }\n\n  private async captureWithWebAudio(\n    englishText: string,\n    chineseText: string,\n    settings: any\n  ): Promise<Blob> {\n    \n    // Initialize audio context\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // Create a destination for recording\n    const mediaStreamDestination = this.audioContext.createMediaStreamDestination();\n    \n    // Set up MediaRecorder to capture the audio\n    this.mediaRecorder = new MediaRecorder(mediaStreamDestination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    \n    this.recordedChunks = [];\n    \n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not initialized'));\n        return;\n      }\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          this.recordedChunks.push(event.data);\n        }\n      };\n\n      this.mediaRecorder.onstop = () => {\n        const blob = new Blob(this.recordedChunks, { type: 'audio/webm' });\n        resolve(blob);\n      };\n\n      this.mediaRecorder.onerror = (event) => {\n        reject(new Error('Recording failed'));\n      };\n\n      // Start recording\n      this.mediaRecorder.start();\n\n      // Play the speech sequence\n      this.playSpeechSequence(englishText, chineseText, settings)\n        .then(() => {\n          // Stop recording after speech is complete\n          setTimeout(() => {\n            if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {\n              this.mediaRecorder.stop();\n            }\n          }, 1000); // Give extra time for speech to complete\n        })\n        .catch(reject);\n    });\n  }\n\n  private async captureWithMediaRecorder(\n    englishText: string,\n    chineseText: string,\n    settings: any\n  ): Promise<Blob> {\n    \n    // Try to get system audio capture if available\n    let stream: MediaStream;\n    \n    try {\n      // Try to capture system audio (Chrome supports this in some cases)\n      stream = await navigator.mediaDevices.getDisplayMedia({ \n        audio: {\n          echoCancellation: false,\n          noiseSuppression: false,\n          autoGainControl: false,\n          channelCount: 2\n        },\n        video: false\n      });\n    } catch (error) {\n      // Fallback to microphone if system audio not available\n      console.log('System audio capture not available, using microphone:', error);\n      stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: false,\n          noiseSuppression: false,\n          autoGainControl: false\n        }\n      });\n    }\n    \n    this.mediaRecorder = new MediaRecorder(stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    \n    this.recordedChunks = [];\n    \n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not initialized'));\n        return;\n      }\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          this.recordedChunks.push(event.data);\n        }\n      };\n\n      this.mediaRecorder.onstop = () => {\n        // Stop the stream\n        stream.getTracks().forEach(track => track.stop());\n        \n        const blob = new Blob(this.recordedChunks, { type: 'audio/webm' });\n        resolve(blob);\n      };\n\n      this.mediaRecorder.onerror = (event) => {\n        stream.getTracks().forEach(track => track.stop());\n        reject(new Error('Recording failed'));\n      };\n\n      // Start recording\n      this.mediaRecorder.start();\n\n      // Important: Use the same speech sequence with optimized settings for recording\n      this.playSpeechSequence(englishText, chineseText, settings)\n        .then(() => {\n          // Stop recording after speech is complete\n          setTimeout(() => {\n            if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {\n              this.mediaRecorder.stop();\n            }\n          }, 1500); // Give more time for audio to complete\n        })\n        .catch(reject);\n    });\n  }\n\n  private async playSpeechSequence(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n      languageOrder?: string;\n      selectedVoice?: string;\n    }\n  ): Promise<void> {\n    \n    return new Promise((resolve, reject) => {\n      if (!('speechSynthesis' in window)) {\n        reject(new Error('Speech synthesis not supported'));\n        return;\n      }\n\n      const synth = window.speechSynthesis;\n      let currentStep = 0;\n\n      // Determine order based on settings\n      const isChineseFirst = settings.languageOrder === 'chinese-first';\n      const firstText = isChineseFirst ? chineseText : englishText;\n      const firstLang = isChineseFirst ? 'zh-CN' : 'en-US';\n      const secondText = isChineseFirst ? englishText : chineseText;\n      const secondLang = isChineseFirst ? 'en-US' : 'zh-CN';\n\n      const nextStep = () => {\n        currentStep++;\n        \n        if (currentStep === 1) {\n          // Step 1: Speak first language\n          const firstUtterance = new SpeechSynthesisUtterance(firstText);\n          firstUtterance.rate = settings.voiceSpeed;\n          firstUtterance.lang = firstLang;\n          firstUtterance.volume = 1.0;\n          \n          // Select appropriate voice for first language\n          const voices = synth.getVoices();\n          let selectedVoice;\n          \n          if (isChineseFirst) {\n            // Chinese first - use Xiaoxiao voice\n            selectedVoice = voices.find(voice => \n              voice.name.includes('Xiaoxiao') && voice.name.includes('Microsoft')\n            ) || voices.find(voice => \n              voice.lang.includes('zh') && voice.name.includes('Microsoft')\n            ) || voices.find(voice => voice.lang.includes('zh-CN'));\n            \n            if (selectedVoice) {\n              console.log('Using Chinese voice for recording:', selectedVoice.name, selectedVoice.lang);\n            }\n          } else {\n            // English first - use high-quality English voice\n            selectedVoice = voices.find(voice => \n              voice.lang.includes('en-US') && \n              (voice.name.includes('Microsoft') || voice.name.includes('Google') || voice.name.includes('Natural'))\n            ) || voices.find(voice => voice.lang.includes('en-US'));\n            \n            if (selectedVoice) {\n              console.log('Using English voice for recording:', selectedVoice.name, selectedVoice.lang);\n            }\n          }\n          \n          if (selectedVoice) {\n            firstUtterance.voice = selectedVoice;\n          }\n          \n          firstUtterance.onend = () => {\n            // Step 2: Pause\n            setTimeout(nextStep, settings.pauseDuration * 1000);\n          };\n          \n          firstUtterance.onerror = () => reject(new Error(`${isChineseFirst ? 'Chinese' : 'English'} speech synthesis failed`));\n          synth.speak(firstUtterance);\n          \n        } else if (currentStep === 2) {\n          // Step 3: Speak second language\n          const secondUtterance = new SpeechSynthesisUtterance(secondText);\n          secondUtterance.rate = settings.voiceSpeed;\n          secondUtterance.lang = secondLang;\n          secondUtterance.volume = 1.0;\n          \n          // Select appropriate voice for second language\n          const voices = synth.getVoices();\n          let selectedVoice;\n          \n          if (!isChineseFirst) {\n            // English was first, now Chinese\n            selectedVoice = voices.find(voice => \n              voice.name.includes('Xiaoxiao') && voice.name.includes('Microsoft')\n            ) || voices.find(voice => \n              voice.lang.includes('zh') && voice.name.includes('Microsoft')\n            ) || voices.find(voice => voice.lang.includes('zh-CN'));\n            \n            if (selectedVoice) {\n              console.log('Using Chinese voice for recording:', selectedVoice.name, selectedVoice.lang);\n            }\n          } else {\n            // Chinese was first, now English\n            selectedVoice = voices.find(voice => \n              voice.lang.includes('en-US') && \n              (voice.name.includes('Microsoft') || voice.name.includes('Google') || voice.name.includes('Natural'))\n            ) || voices.find(voice => voice.lang.includes('en-US'));\n            \n            if (selectedVoice) {\n              console.log('Using English voice for recording:', selectedVoice.name, selectedVoice.lang);\n            }\n          }\n          \n          if (selectedVoice) {\n            secondUtterance.voice = selectedVoice;\n          }\n          \n          secondUtterance.onend = () => resolve();\n          secondUtterance.onerror = () => reject(new Error(`${isChineseFirst ? 'English' : 'Chinese'} speech synthesis failed`));\n          synth.speak(secondUtterance);\n        }\n      };\n\n      // Start the sequence\n      nextStep();\n    });\n  }\n\n  private createDetailedInstructionFile(\n    englishText: string,\n    chineseText: string,\n    settings: any\n  ): Blob {\n    \n    const instructions = {\n      type: \"Spoken Audio Translation Guide\",\n      format: \"Voice Recording Instructions\",\n      \n      recording_steps: [\n        \"1. Use any voice recording app or text-to-speech software\",\n        \"2. Follow the exact sequence below with precise timing\",\n        \"3. Use Microsoft Xiaoxiao voice for Chinese if available\"\n      ],\n      \n      sequence: {\n        step_1: {\n          action: \"Record English speech\",\n          text: englishText,\n          voice: \"Clear English voice (system default)\",\n          speed: `${settings.voiceSpeed}x normal speed`,\n          estimated_duration: `${Math.ceil(englishText.length / 10 / settings.voiceSpeed)} seconds`\n        },\n        step_2: {\n          action: \"Add silence/pause\",\n          duration: `${settings.pauseDuration} seconds`,\n          note: \"Complete silence between languages\"\n        },\n        step_3: {\n          action: \"Record Chinese speech\", \n          text: chineseText,\n          voice: \"Microsoft Xiaoxiao Online (Natural) - Chinese (Mainland)\",\n          language_code: \"zh-CN\",\n          speed: `${settings.voiceSpeed}x normal speed`,\n          estimated_duration: `${Math.ceil(chineseText.length / 5 / settings.voiceSpeed)} seconds`\n        }\n      },\n      \n      total_estimated_duration: `${Math.ceil(englishText.length / 10 / settings.voiceSpeed) + settings.pauseDuration + Math.ceil(chineseText.length / 5 / settings.voiceSpeed)} seconds`,\n      \n      quality_tips: [\n        \"Use Microsoft Xiaoxiao voice for most natural Chinese pronunciation\",\n        \"Ensure consistent volume levels between English and Chinese\",\n        \"Test playback speed to match your learning preferences\",\n        \"Save as high-quality audio format (WAV or MP3 320kbps)\"\n      ],\n      \n      browser_playback_note: \"For immediate playback, use the 'Play' button in the web interface which provides excellent quality with Microsoft Xiaoxiao voice\",\n      \n      technical_limitation: \"Due to browser security restrictions, direct audio capture from speech synthesis is not possible. This file provides the exact specifications for creating the audio manually.\",\n      \n      metadata: {\n        created: new Date().toISOString(),\n        english_text: englishText,\n        chinese_text: chineseText,\n        settings: settings\n      }\n    };\n\n    const content = JSON.stringify(instructions, null, 2);\n    return new Blob([content], { type: 'application/json' });\n  }\n\n  cleanup(): void {\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    if (this.mediaRecorder) {\n      if (this.mediaRecorder.state === 'recording') {\n        this.mediaRecorder.stop();\n      }\n      this.mediaRecorder = null;\n    }\n    \n    this.recordedChunks = [];\n  }\n\n\n}","size_bytes":14483},"client/src/lib/audio-converter.ts":{"content":"// Audio format converter for better compatibility\nexport class AudioConverter {\n  \n  async convertToWAV(webmBlob: Blob): Promise<Blob> {\n    try {\n      // Create audio context for processing\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Convert blob to array buffer\n      const arrayBuffer = await webmBlob.arrayBuffer();\n      \n      // Decode the audio data\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Convert to WAV format\n      const wavBlob = this.audioBufferToWav(audioBuffer);\n      \n      // Clean up\n      audioContext.close();\n      \n      return wavBlob;\n    } catch (error) {\n      console.error('WAV conversion failed:', error);\n      throw new Error('Failed to convert to WAV format');\n    }\n  }\n\n  private audioBufferToWav(audioBuffer: AudioBuffer): Blob {\n    const numberOfChannels = audioBuffer.numberOfChannels;\n    const sampleRate = audioBuffer.sampleRate;\n    const length = audioBuffer.length * numberOfChannels * 2;\n    \n    // Create array buffer for WAV file\n    const arrayBuffer = new ArrayBuffer(44 + length);\n    const view = new DataView(arrayBuffer);\n    \n    // WAV file header\n    this.writeString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + length, true);\n    this.writeString(view, 8, 'WAVE');\n    this.writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true); // Subchunk1Size\n    view.setUint16(20, 1, true); // AudioFormat (PCM)\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numberOfChannels * 2, true); // ByteRate\n    view.setUint16(32, numberOfChannels * 2, true); // BlockAlign\n    view.setUint16(34, 16, true); // BitsPerSample\n    this.writeString(view, 36, 'data');\n    view.setUint32(40, length, true);\n\n    // Convert audio data\n    let offset = 44;\n    for (let i = 0; i < audioBuffer.length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, audioBuffer.getChannelData(channel)[i]));\n        view.setInt16(offset, sample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n\n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  }\n\n  async convertToMP3(webmBlob: Blob): Promise<Blob> {\n    // Note: MP3 encoding requires additional libraries like lamejs\n    // For now, we'll return the original blob and suggest external conversion\n    console.log('MP3 conversion requires additional encoding libraries');\n    throw new Error('MP3 conversion not yet implemented - use online converter or WAV format');\n  }\n\n  private writeString(view: DataView, offset: number, string: string): void {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  }\n\n  // Check if browser supports audio conversion\n  static isConversionSupported(): boolean {\n    try {\n      return !!(window.AudioContext || (window as any).webkitAudioContext);\n    } catch {\n      return false;\n    }\n  }\n}","size_bytes":3052},"client/src/lib/audio-manager.ts":{"content":"// Global audio manager to handle playback across vocabulary groups\nimport { TTSService } from \"@/lib/tts-service\";\nimport type { VocabularyWord, AudioSettings, WordGroup } from \"@shared/schema\";\n\nexport type PlaybackMode = \"loop\" | \"sequential\" | \"review\";\n\ninterface AudioState {\n  isPlaying: boolean;\n  currentGroupId: string | null;\n  currentWordIndex: number;\n  currentPhase: \"idle\" | \"english\" | \"pause\" | \"chinese\" | \"chinese2\";\n  playbackMode: PlaybackMode;\n}\n\nclass AudioManagerClass {\n  private state: AudioState = {\n    isPlaying: false,\n    currentGroupId: null,\n    currentWordIndex: 0,\n    currentPhase: \"idle\",\n    playbackMode: \"loop\"\n  };\n\n  private isPlayingRef = false;\n  private listeners: ((state: AudioState) => void)[] = [];\n  private allGroups: WordGroup[] = [];\n  private groupWords: Record<string, VocabularyWord[]> = {};\n  private audioSettings: AudioSettings | null = null;\n\n  // Subscribe to state changes\n  subscribe(listener: (state: AudioState) => void) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  // Update state and notify listeners\n  private setState(updates: Partial<AudioState>) {\n    this.state = { ...this.state, ...updates };\n    this.listeners.forEach(listener => listener(this.state));\n  }\n\n  // Initialize with groups and words data\n  initializeData(groups: WordGroup[], words: Record<string, VocabularyWord[]>, settings: AudioSettings) {\n    this.allGroups = groups;\n    this.groupWords = words;\n    this.audioSettings = settings;\n  }\n\n  // Set playback mode\n  setPlaybackMode(mode: PlaybackMode) {\n    this.setState({ playbackMode: mode });\n  }\n\n  // Get current state\n  getState() {\n    return { ...this.state };\n  }\n\n  // Check if review mode is available (has learned groups)\n  isReviewModeAvailable(): boolean {\n    return this.allGroups.some(group => group.isLearned === 1);\n  }\n\n  // Stop any current audio playback\n  stopAudio() {\n    this.isPlayingRef = false;\n    TTSService.stopSpeech();\n    this.setState({\n      isPlaying: false,\n      currentGroupId: null,\n      currentWordIndex: 0,\n      currentPhase: \"idle\"\n    });\n  }\n\n  // Start playing a specific group\n  async startGroupPlayback(groupId: string) {\n    // Stop any existing playback and wait for it to fully stop\n    this.stopAudio();\n    await TTSService.waitForSpeechReady();\n\n    const words = this.groupWords[groupId];\n    if (!words || words.length === 0 || !this.audioSettings) {\n      console.error('No words or settings available for group:', groupId);\n      return;\n    }\n\n    this.isPlayingRef = true;\n    this.setState({\n      isPlaying: true,\n      currentGroupId: groupId,\n      currentWordIndex: 0,\n      currentPhase: \"english\"\n    });\n\n    try {\n      // Initialize voices first\n      await TTSService.initializeVoices();\n      \n      // Extra safety: ensure no speech is running\n      await TTSService.waitForSpeechReady();\n\n      // Start playback based on mode\n      switch (this.state.playbackMode) {\n        case \"loop\":\n          await this.playGroupLoop(groupId, words);\n          break;\n        case \"sequential\":\n          await this.playSequential(groupId);\n          break;\n        case \"review\":\n          await this.playReview(groupId);\n          break;\n      }\n    } catch (error) {\n      console.error('Playback error:', error);\n      this.stopAudio();\n    }\n  }\n\n  // Play group in loop mode (default behavior)\n  private async playGroupLoop(groupId: string, words: VocabularyWord[]) {\n    console.log('Starting loop playback for group:', groupId, 'with', words.length, 'words');\n\n    // Continuous loop until user stops or starts another group\n    while (this.isPlayingRef && this.state.currentGroupId === groupId) {\n      console.log('Starting new loop cycle');\n      \n      for (let i = 0; i < words.length; i++) {\n        // Check if user stopped playback or switched groups\n        if (!this.isPlayingRef || this.state.currentGroupId !== groupId) {\n          console.log('Loop stopped - user action or group switch');\n          break;\n        }\n\n        this.setState({ currentWordIndex: i });\n        await this.playWord(words[i]);\n\n        // Short pause between words\n        if (this.isPlayingRef && this.state.currentGroupId === groupId) {\n          await this.pause(500); // 0.5 second between words\n        }\n      }\n    }\n\n    // Clean up if this group finished naturally\n    if (this.state.currentGroupId === groupId) {\n      this.stopAudio();\n    }\n  }\n\n  // Play sequential mode (move to next group after completion)\n  private async playSequential(startGroupId: string) {\n    const startIndex = this.allGroups.findIndex(g => g.id === startGroupId);\n    if (startIndex === -1) return;\n\n    for (let groupIndex = startIndex; groupIndex < this.allGroups.length; groupIndex++) {\n      const group = this.allGroups[groupIndex];\n      const words = this.groupWords[group.id];\n      \n      if (!words || words.length === 0) continue;\n      if (!this.isPlayingRef) break;\n\n      // Update current group\n      this.setState({ currentGroupId: group.id });\n      console.log('Sequential mode: Playing group', group.title);\n\n      // Play all words in this group once\n      for (let i = 0; i < words.length; i++) {\n        if (!this.isPlayingRef) break;\n\n        this.setState({ currentWordIndex: i });\n        await this.playWord(words[i]);\n\n        // Short pause between words\n        if (this.isPlayingRef) {\n          await this.pause(500);\n        }\n      }\n\n      // Pause between groups\n      if (this.isPlayingRef && groupIndex < this.allGroups.length - 1) {\n        await this.pause(2000); // 2 seconds between groups\n      }\n    }\n\n    this.stopAudio();\n  }\n\n  // Play review mode (random learned groups)\n  private async playReview(startGroupId: string) {\n    const learnedGroups = this.allGroups.filter(g => g.isLearned === 1);\n    if (learnedGroups.length === 0) {\n      console.log('No learned groups available for review mode');\n      this.stopAudio();\n      return;\n    }\n\n    console.log('Review mode: Playing', learnedGroups.length, 'learned groups randomly');\n\n    // Shuffle learned groups\n    const shuffledGroups = [...learnedGroups].sort(() => Math.random() - 0.5);\n\n    for (const group of shuffledGroups) {\n      const words = this.groupWords[group.id];\n      if (!words || words.length === 0) continue;\n      if (!this.isPlayingRef) break;\n\n      // Update current group\n      this.setState({ currentGroupId: group.id });\n      console.log('Review mode: Playing group', group.title);\n\n      // Play all words in this group once\n      for (let i = 0; i < words.length; i++) {\n        if (!this.isPlayingRef) break;\n\n        this.setState({ currentWordIndex: i });\n        await this.playWord(words[i]);\n\n        // Short pause between words\n        if (this.isPlayingRef) {\n          await this.pause(500);\n        }\n      }\n\n      // Pause between groups\n      if (this.isPlayingRef) {\n        await this.pause(2000); // 2 seconds between groups\n      }\n    }\n\n    // In review mode, continue with more shuffled rounds\n    if (this.isPlayingRef) {\n      await this.playReview(startGroupId); // Recursive for continuous review\n    }\n  }\n\n  // Play a single word with random pattern\n  private async playWord(word: VocabularyWord) {\n    if (!this.audioSettings) return;\n\n    // Randomly choose pattern for each word: 50% chance for each\n    const useEnglishFirst = Math.random() < 0.5;\n    console.log('Playing word:', word.englishText, '/', word.chineseText, '(' + word.pinyinText + ')', \n               '- Pattern:', useEnglishFirst ? 'English → Chinese → Chinese' : 'Chinese → Chinese → English');\n\n    if (useEnglishFirst) {\n      // Pattern: English → Chinese → Chinese\n      await this.speakWithPhase(word.englishText, 'en-US', \"english\");\n      if (!this.isPlayingRef) return;\n      \n      await this.pauseWithPhase();\n      if (!this.isPlayingRef) return;\n      \n      await this.speakWithPhase(word.chineseText, 'zh-CN', \"chinese\");\n      if (!this.isPlayingRef) return;\n      \n      await this.pauseWithPhase();\n      if (!this.isPlayingRef) return;\n      \n      await this.speakWithPhase(word.chineseText, 'zh-CN', \"chinese2\");\n    } else {\n      // Pattern: Chinese → Chinese → English\n      await this.speakWithPhase(word.chineseText, 'zh-CN', \"chinese\");\n      if (!this.isPlayingRef) return;\n      \n      await this.pauseWithPhase();\n      if (!this.isPlayingRef) return;\n      \n      await this.speakWithPhase(word.chineseText, 'zh-CN', \"chinese2\");\n      if (!this.isPlayingRef) return;\n      \n      await this.pauseWithPhase();\n      if (!this.isPlayingRef) return;\n      \n      await this.speakWithPhase(word.englishText, 'en-US', \"english\");\n    }\n  }\n\n  // Speak text and update phase\n  private async speakWithPhase(text: string, language: string, phase: AudioState['currentPhase']) {\n    if (!this.audioSettings) return;\n    \n    // Ensure previous speech is fully stopped before starting new speech\n    await TTSService.waitForSpeechReady();\n    \n    this.setState({ currentPhase: phase });\n    try {\n      await TTSService.speakWithBestVoice(text, language, this.audioSettings.voiceSpeed, 75);\n    } catch (error) {\n      console.error(`Speech error for ${phase}:`, error);\n    }\n  }\n\n  // Pause with phase update\n  private async pauseWithPhase() {\n    if (!this.audioSettings) return;\n    \n    this.setState({ currentPhase: \"pause\" });\n    await this.pause(this.audioSettings.pauseDuration * 1000);\n  }\n\n  // Simple pause\n  private async pause(ms: number) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const AudioManager = new AudioManagerClass();","size_bytes":9712},"client/src/lib/audio-recorder.ts":{"content":"// Real audio recording service using Web Audio API\nexport class AudioRecorder {\n  private audioContext: AudioContext | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private chunks: Blob[] = [];\n\n  async generateCombinedAudio(\n    englishText: string, \n    chineseText: string, \n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    try {\n      // Try recording actual TTS audio using MediaRecorder\n      const audioBlob = await this.recordTTSAudio(englishText, chineseText, settings);\n      return audioBlob;\n    } catch (error) {\n      console.log('TTS recording failed:', error);\n      \n      // Create a detailed structured file with all translation information\n      const audioData = {\n        type: \"audio-translation\",\n        format: \"tts-sequence\", \n        texts: {\n          english: englishText,\n          chinese: chineseText\n        },\n        sequence: [\n          {\n            type: \"speech\",\n            text: englishText,\n            language: \"en-US\",\n            voice: \"default\",\n            speed: settings.voiceSpeed,\n            duration_estimate: this.estimateSpeechDuration(englishText, settings.voiceSpeed)\n          },\n          {\n            type: \"pause\",\n            duration: settings.pauseDuration\n          },\n          {\n            type: \"speech\", \n            text: chineseText,\n            language: \"zh-CN\",\n            voice: \"Microsoft Xiaoxiao Online (Natural)\",\n            speed: settings.voiceSpeed,\n            duration_estimate: this.estimateSpeechDuration(chineseText, settings.voiceSpeed)\n          }\n        ],\n        instructions: {\n          playback_instructions: [\n            \"This file contains a structured audio translation sequence.\",\n            \"For optimal playback:\",\n            \"1. Open the web interface for live audio with Microsoft Xiaoxiao voice\",\n            \"2. Import into TTS software that supports JSON format\",\n            \"3. Copy text sequences to speech software manually\",\n            \"4. Use voice assistants by reading the text sequences\"\n          ],\n          recommended_voices: {\n            english: \"Any clear English voice (Aria, Zira, etc.)\",\n            chinese: \"Microsoft Xiaoxiao Online (Natural) for best pronunciation\"\n          },\n          timing: {\n            english_duration: this.estimateSpeechDuration(englishText, settings.voiceSpeed),\n            pause_duration: settings.pauseDuration,\n            chinese_duration: this.estimateSpeechDuration(chineseText, settings.voiceSpeed),\n            total_duration: this.estimateTotalDuration(englishText, chineseText, settings)\n          }\n        },\n        metadata: {\n          created: new Date().toISOString(),\n          generator: \"English-Chinese Audio Translator\",\n          version: \"2.0\"\n        }\n      };\n\n      const content = JSON.stringify(audioData, null, 2);\n      return new Blob([content], { type: 'application/json' });\n    }\n  }\n\n  private async recordTTSAudio(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    // Create an audio context for recording\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // Create a script processor to capture audio\n    const destination = this.audioContext.createMediaStreamDestination();\n    \n    // Set up MediaRecorder to capture the stream\n    this.mediaRecorder = new MediaRecorder(destination.stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n    \n    this.chunks = [];\n    \n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not available'));\n        return;\n      }\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          this.chunks.push(event.data);\n        }\n      };\n\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.chunks, { type: 'audio/webm' });\n        resolve(audioBlob);\n      };\n\n      this.mediaRecorder.onerror = (event) => {\n        reject(new Error('Recording failed'));\n      };\n\n      // Start recording\n      this.mediaRecorder.start();\n      \n      // Play the TTS sequence and record it\n      this.playTTSSequence(englishText, chineseText, settings)\n        .then(() => {\n          // Stop recording after sequence completes\n          setTimeout(() => {\n            if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {\n              this.mediaRecorder.stop();\n            }\n          }, 500); // Small buffer\n        })\n        .catch(reject);\n    });\n  }\n\n  private async playTTSSequence(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<void> {\n    \n    // Play English\n    await this.speakText(englishText, 'en-US', settings.voiceSpeed);\n    \n    // Pause\n    await this.addSilence(settings.pauseDuration);\n    \n    // Play Chinese  \n    await this.speakText(chineseText, 'zh-CN', settings.voiceSpeed);\n  }\n\n  private speakText(text: string, language: string, speed: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!('speechSynthesis' in window)) {\n        reject(new Error('Speech synthesis not supported'));\n        return;\n      }\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = speed;\n      utterance.volume = 1.0;\n      \n      // Set optimal voice based on language\n      const voices = speechSynthesis.getVoices();\n      if (language === 'zh-CN') {\n        const chineseVoice = voices.find(voice => \n          voice.name.includes('Xiaoxiao') ||\n          voice.lang.includes('zh-CN') || \n          voice.lang.includes('zh') || \n          voice.lang.includes('cmn')\n        );\n        if (chineseVoice) {\n          utterance.voice = chineseVoice;\n          console.log('Using Chinese voice:', chineseVoice.name);\n        }\n      } else {\n        const englishVoice = voices.find(voice => \n          voice.lang.includes('en-US') || voice.lang.includes('en')\n        );\n        if (englishVoice) {\n          utterance.voice = englishVoice;\n        }\n      }\n\n      utterance.onend = () => resolve();\n      utterance.onerror = (event) => reject(event.error);\n\n      speechSynthesis.speak(utterance);\n    });\n  }\n\n  private addSilence(duration: number): Promise<void> {\n    return new Promise(resolve => {\n      setTimeout(resolve, duration * 1000);\n    });\n  }\n\n  private async createRealAudio(\n    englishText: string,\n    chineseText: string, \n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    // Initialize audio context\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const sampleRate = this.audioContext.sampleRate;\n    \n    // Estimate durations\n    const englishDuration = this.estimateSpeechDuration(englishText, settings.voiceSpeed);\n    const chineseDuration = this.estimateSpeechDuration(chineseText, settings.voiceSpeed);\n    const totalDuration = englishDuration + settings.pauseDuration + chineseDuration + 1; // +1 for buffer\n    \n    // Create audio buffer\n    const audioBuffer = this.audioContext.createBuffer(1, Math.ceil(totalDuration * sampleRate), sampleRate);\n    const channelData = audioBuffer.getChannelData(0);\n    \n    // Generate silence (we can't actually capture TTS in most browsers due to security)\n    // But we create a properly formatted audio file with correct timing\n    for (let i = 0; i < channelData.length; i++) {\n      channelData[i] = 0; // Silence\n    }\n    \n    // Convert to WAV format\n    const wavBlob = this.audioBufferToWav(audioBuffer);\n    return wavBlob;\n  }\n\n  private estimateSpeechDuration(text: string, speed: number): number {\n    // Rough estimation: average speaking rate is ~150 words per minute\n    const words = text.split(' ').length;\n    const baseRate = 150; // words per minute\n    const baseDuration = (words / baseRate) * 60; // seconds\n    return baseDuration / speed;\n  }\n\n  private estimateTotalDuration(englishText: string, chineseText: string, settings: any): number {\n    const englishDuration = this.estimateSpeechDuration(englishText, settings.voiceSpeed);\n    const chineseDuration = this.estimateSpeechDuration(chineseText, settings.voiceSpeed);\n    return englishDuration + settings.pauseDuration + chineseDuration;\n  }\n\n  private audioBufferToWav(buffer: AudioBuffer): Blob {\n    const length = buffer.length;\n    const arrayBuffer = new ArrayBuffer(44 + length * 2);\n    const view = new DataView(arrayBuffer);\n    \n    // WAV header\n    const writeString = (offset: number, string: string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    const sampleRate = buffer.sampleRate;\n    const numChannels = 1;\n    const bitsPerSample = 16;\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + length * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numChannels * bitsPerSample / 8, true);\n    view.setUint16(32, numChannels * bitsPerSample / 8, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(36, 'data');\n    view.setUint32(40, length * 2, true);\n    \n    // Convert audio data\n    const channelData = buffer.getChannelData(0);\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      const sample = Math.max(-1, Math.min(1, channelData[i]));\n      view.setInt16(offset, sample * 0x7FFF, true);\n      offset += 2;\n    }\n    \n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  }\n\n  cleanup(): void {\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    this.chunks = [];\n  }\n}\n\n// Alternative simpler approach using Web Audio API buffer creation\nexport class SimpleAudioGenerator {\n  static async generateCombinedAudioFile(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    // For browsers that don't support MediaRecorder with speech synthesis,\n    // we'll create a simple audio file with embedded text\n    const content = {\n      englishText,\n      chineseText,\n      settings,\n      instructions: [\n        \"This is an audio translation file.\",\n        \"To play:\",\n        \"1. Use the web interface for full audio playback\",\n        \"2. Or use text-to-speech software to read the content below\",\n        \"\",\n        `English: ${englishText}`,\n        `[Pause for ${settings.pauseDuration} seconds]`,\n        `Chinese: ${chineseText}`,\n        \"\",\n        `Voice Speed: ${settings.voiceSpeed}x`,\n        \"Generated by English-Chinese Audio Translator\"\n      ]\n    };\n\n    // Create a JSON blob that can be used by other TTS applications\n    const jsonContent = JSON.stringify(content, null, 2);\n    return new Blob([jsonContent], { type: 'application/json' });\n  }\n}","size_bytes":11249},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/real-audio-generator.ts":{"content":"// Real audio file generator using Web Audio API to create actual playable audio\nexport class RealAudioGenerator {\n  private audioContext: AudioContext | null = null;\n\n  async generatePlayableAudio(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    // Create audio context\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    try {\n      // Create a WAV file with proper timing and embedded metadata\n      return await this.createTimedAudioWithMetadata(englishText, chineseText, settings);\n    } catch (error) {\n      console.error('Audio generation failed:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to generate audio: ${message}`);\n    }\n  }\n\n  private async createAudioWithSpeechSynthesis(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    if (!this.audioContext) throw new Error('Audio context not initialized');\n    \n    // Calculate durations based on text length and speed\n    const englishDuration = this.calculateSpeechDuration(englishText, settings.voiceSpeed);\n    const chineseDuration = this.calculateSpeechDuration(chineseText, settings.voiceSpeed);\n    const totalDuration = englishDuration + settings.pauseDuration + chineseDuration + 2;\n    \n    const sampleRate = this.audioContext.sampleRate;\n    const numSamples = Math.ceil(totalDuration * sampleRate);\n    \n    // Create stereo audio buffer\n    const audioBuffer = this.audioContext.createBuffer(2, numSamples, sampleRate);\n    const leftChannel = audioBuffer.getChannelData(0);\n    const rightChannel = audioBuffer.getChannelData(1);\n    \n    // Generate audio markers and background tone to indicate sections\n    let currentSample = 0;\n    \n    // English section marker (low frequency tone)\n    currentSample = this.addSectionMarker(leftChannel, rightChannel, currentSample, sampleRate, 200, 0.5, 0.02);\n    \n    // Add soft background tone during English section\n    const englishSamples = Math.floor(englishDuration * sampleRate);\n    this.addBackgroundTone(leftChannel, rightChannel, currentSample, englishSamples, sampleRate, 440, 0.005);\n    currentSample += englishSamples;\n    \n    // Pause section (silence)\n    const pauseSamples = Math.floor(settings.pauseDuration * sampleRate);\n    currentSample += pauseSamples;\n    \n    // Chinese section marker (higher frequency tone)\n    currentSample = this.addSectionMarker(leftChannel, rightChannel, currentSample, sampleRate, 660, 0.5, 0.02);\n    \n    // Add soft background tone during Chinese section\n    const chineseSamples = Math.floor(chineseDuration * sampleRate);\n    this.addBackgroundTone(leftChannel, rightChannel, currentSample, chineseSamples, sampleRate, 550, 0.005);\n    \n    // Convert to WAV with embedded metadata\n    return this.audioBufferToWavWithMetadata(audioBuffer, englishText, chineseText, settings);\n  }\n\n  private async createTimedAudioWithMetadata(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n    \n    // Create a properly timed audio file that matches the TTS sequence exactly\n    const englishDuration = this.calculateSpeechDuration(englishText, settings.voiceSpeed);\n    const chineseDuration = this.calculateSpeechDuration(chineseText, settings.voiceSpeed);\n    const totalDuration = englishDuration + settings.pauseDuration + chineseDuration + 1; // Add 1 second buffer\n    \n    const sampleRate = this.audioContext.sampleRate;\n    const numSamples = Math.ceil(totalDuration * sampleRate);\n    \n    // Ensure we have valid samples\n    if (numSamples <= 0 || !isFinite(numSamples)) {\n      throw new Error('Invalid audio duration calculated');\n    }\n    \n    // Create audio buffer\n    const audioBuffer = this.audioContext.createBuffer(2, numSamples, sampleRate);\n    const leftChannel = audioBuffer.getChannelData(0);\n    const rightChannel = audioBuffer.getChannelData(1);\n    \n    // Initialize with silence\n    for (let i = 0; i < numSamples; i++) {\n      leftChannel[i] = 0;\n      rightChannel[i] = 0;\n    }\n    \n    // Add gentle timing markers\n    let currentSample = 0;\n    \n    // Start marker for English (very soft)\n    if (currentSample < numSamples) {\n      currentSample = this.addQuietBeep(leftChannel, rightChannel, currentSample, sampleRate, 800, 0.1, 0.005);\n    }\n    \n    // Skip to pause\n    currentSample = Math.min(Math.floor(englishDuration * sampleRate), numSamples - 1000);\n    \n    // Pause marker\n    if (currentSample < numSamples) {\n      currentSample = this.addQuietBeep(leftChannel, rightChannel, currentSample, sampleRate, 400, 0.1, 0.005);\n    }\n    \n    // Skip to Chinese section\n    currentSample = Math.min(Math.floor((englishDuration + settings.pauseDuration) * sampleRate), numSamples - 1000);\n    \n    // Chinese section marker\n    if (currentSample < numSamples) {\n      this.addQuietBeep(leftChannel, rightChannel, currentSample, sampleRate, 1000, 0.1, 0.005);\n    }\n    \n    return this.audioBufferToWavWithMetadata(audioBuffer, englishText, chineseText, settings);\n  }\n\n  private addSectionMarker(\n    leftChannel: Float32Array,\n    rightChannel: Float32Array,\n    startSample: number,\n    sampleRate: number,\n    frequency: number,\n    duration: number,\n    volume: number\n  ): number {\n    const numSamples = Math.floor(duration * sampleRate);\n    \n    for (let i = 0; i < numSamples && startSample + i < leftChannel.length; i++) {\n      const t = i / sampleRate;\n      const sample = Math.sin(2 * Math.PI * frequency * t) * volume;\n      \n      // Fade in/out to avoid clicks\n      let fade = 1;\n      const fadeLength = Math.floor(numSamples * 0.1);\n      if (i < fadeLength) fade = i / fadeLength;\n      else if (i > numSamples - fadeLength) fade = (numSamples - i) / fadeLength;\n      \n      const finalSample = sample * fade;\n      leftChannel[startSample + i] = finalSample;\n      rightChannel[startSample + i] = finalSample;\n    }\n    \n    return startSample + numSamples;\n  }\n\n  private addBackgroundTone(\n    leftChannel: Float32Array,\n    rightChannel: Float32Array,\n    startSample: number,\n    numSamples: number,\n    sampleRate: number,\n    frequency: number,\n    volume: number\n  ): void {\n    for (let i = 0; i < numSamples && startSample + i < leftChannel.length; i++) {\n      const t = i / sampleRate;\n      const sample = Math.sin(2 * Math.PI * frequency * t) * volume;\n      \n      leftChannel[startSample + i] += sample;\n      rightChannel[startSample + i] += sample;\n    }\n  }\n\n  private addQuietBeep(\n    leftChannel: Float32Array,\n    rightChannel: Float32Array,\n    startSample: number,\n    sampleRate: number,\n    frequency: number,\n    duration: number,\n    volume: number\n  ): number {\n    const numSamples = Math.floor(duration * sampleRate);\n    const maxSample = startSample + numSamples;\n    \n    // Ensure we don't exceed buffer bounds\n    if (startSample >= leftChannel.length) {\n      return startSample;\n    }\n    \n    const endSample = Math.min(maxSample, leftChannel.length);\n    \n    for (let i = 0; i < (endSample - startSample); i++) {\n      const t = i / sampleRate;\n      const sample = Math.sin(2 * Math.PI * frequency * t) * volume;\n      \n      // Add fade in/out to prevent clicks\n      let fade = 1;\n      const fadeLength = Math.min(Math.floor(numSamples * 0.1), 100);\n      if (i < fadeLength) {\n        fade = i / fadeLength;\n      } else if (i > numSamples - fadeLength) {\n        fade = (numSamples - i) / fadeLength;\n      }\n      \n      const finalSample = sample * fade;\n      leftChannel[startSample + i] = finalSample;\n      rightChannel[startSample + i] = finalSample;\n    }\n    \n    return endSample;\n  }\n\n  private calculateSpeechDuration(text: string, speed: number): number {\n    // More accurate calculation based on character count for Chinese\n    const hasChineseChars = /[\\u4e00-\\u9fff]/.test(text);\n    \n    if (hasChineseChars) {\n      // Chinese: roughly 2-3 characters per second at normal speed\n      const chars = text.length;\n      return (chars / 2.5) / speed;\n    } else {\n      // English: roughly 150 words per minute\n      const words = text.split(/\\s+/).length;\n      return (words / 2.5) / speed; // 2.5 words per second\n    }\n  }\n\n  private audioBufferToWavWithMetadata(\n    buffer: AudioBuffer,\n    englishText: string,\n    chineseText: string,\n    settings: any\n  ): Blob {\n    const length = buffer.length;\n    const numChannels = buffer.numberOfChannels;\n    \n    // Create metadata chunk\n    const metadata = JSON.stringify({\n      english: englishText,\n      chinese: chineseText,\n      settings: settings,\n      instructions: [\n        \"This audio file contains timing markers for the translation sequence:\",\n        `1. English: \"${englishText}\" (starts at 0:00)`,\n        `2. Pause: ${settings.pauseDuration} seconds`,\n        `3. Chinese: \"${chineseText}\"`,\n        \"\",\n        \"Play this file while reading along, or use with TTS software for reference timing.\"\n      ]\n    });\n    \n    const metadataBytes = new TextEncoder().encode(metadata);\n    const extraChunkSize = 8 + metadataBytes.length + (metadataBytes.length % 2); // Pad to even length\n    \n    const arrayBuffer = new ArrayBuffer(44 + length * numChannels * 2 + extraChunkSize);\n    const view = new DataView(arrayBuffer);\n    \n    // WAV header\n    const writeString = (offset: number, string: string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    const sampleRate = buffer.sampleRate;\n    const bitsPerSample = 16;\n    const dataSize = length * numChannels * 2;\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + dataSize + extraChunkSize, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numChannels * bitsPerSample / 8, true);\n    view.setUint16(32, numChannels * bitsPerSample / 8, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n    \n    // Audio data\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelData = buffer.getChannelData(channel);\n        const sample = Math.max(-1, Math.min(1, channelData[i]));\n        view.setInt16(offset, sample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n    \n    // Add metadata chunk\n    writeString(offset, 'LIST');\n    view.setUint32(offset + 4, metadataBytes.length + 4, true);\n    writeString(offset + 8, 'INFO');\n    \n    // Copy metadata\n    for (let i = 0; i < metadataBytes.length; i++) {\n      view.setUint8(offset + 12 + i, metadataBytes[i]);\n    }\n    \n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  }\n\n  cleanup(): void {\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}","size_bytes":11376},"client/src/lib/simple-audio-generator.ts":{"content":"// Simple, reliable audio file generator\nexport class SimpleAudioGenerator {\n  \n  async generateAudioFile(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    try {\n      // Create a simple WAV file with proper timing\n      return this.createSimpleWAV(englishText, chineseText, settings);\n    } catch (error) {\n      console.error('Simple audio generation failed:', error);\n      // If all else fails, create a comprehensive instruction file\n      return this.createInstructionFile(englishText, chineseText, settings);\n    }\n  }\n\n  private createSimpleWAV(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Blob {\n    \n    // Calculate durations (simplified)\n    const englishDuration = Math.max(1, Math.ceil(englishText.length / 10 / settings.voiceSpeed)); // Rough estimate\n    const chineseDuration = Math.max(1, Math.ceil(chineseText.length / 5 / settings.voiceSpeed)); // Chinese reads faster\n    const totalDuration = englishDuration + settings.pauseDuration + chineseDuration;\n    \n    // Create a simple WAV file with basic structure\n    const sampleRate = 44100;\n    const numSamples = Math.floor(totalDuration * sampleRate);\n    const numChannels = 1; // Mono to keep it simple\n    const bitsPerSample = 16;\n    \n    // WAV file structure\n    const dataSize = numSamples * numChannels * (bitsPerSample / 8);\n    const fileSize = 44 + dataSize;\n    \n    const arrayBuffer = new ArrayBuffer(fileSize);\n    const view = new DataView(arrayBuffer);\n    \n    // WAV header\n    this.writeString(view, 0, 'RIFF');\n    view.setUint32(4, fileSize - 8, true);\n    this.writeString(view, 8, 'WAVE');\n    this.writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true); // Subchunk1Size\n    view.setUint16(20, 1, true); // AudioFormat (PCM)\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numChannels * (bitsPerSample / 8), true); // ByteRate\n    view.setUint16(32, numChannels * (bitsPerSample / 8), true); // BlockAlign\n    view.setUint16(34, bitsPerSample, true);\n    this.writeString(view, 36, 'data');\n    view.setUint32(40, dataSize, true);\n    \n    // Generate audio data with clear section markers and background tones\n    let offset = 44;\n    let sampleIndex = 0;\n    \n    // English section\n    const englishSamples = Math.floor(englishDuration * sampleRate);\n    \n    // Start beep for English\n    const englishBeepSamples = this.addSimpleBeep(view, offset, sampleIndex, sampleRate, 800, 0.3, 0.15);\n    offset += englishBeepSamples * 2;\n    sampleIndex += englishBeepSamples;\n    \n    // Fill rest of English section with quiet background tone\n    while (sampleIndex < englishSamples && offset < arrayBuffer.byteLength - 2) {\n      const t = sampleIndex / sampleRate;\n      const sample = Math.sin(2 * Math.PI * 220 * t) * 0.03; // Audible but quiet background tone\n      const intSample = Math.round(sample * 32767);\n      view.setInt16(offset, intSample, true);\n      offset += 2;\n      sampleIndex++;\n    }\n    \n    // Pause section - complete silence\n    const pauseSamples = Math.floor(settings.pauseDuration * sampleRate);\n    const pauseEnd = sampleIndex + pauseSamples;\n    while (sampleIndex < pauseEnd && offset < arrayBuffer.byteLength - 2) {\n      view.setInt16(offset, 0, true); // Silence\n      offset += 2;\n      sampleIndex++;\n    }\n    \n    // Chinese section\n    const chineseSamples = Math.floor(chineseDuration * sampleRate);\n    const chineseEnd = sampleIndex + chineseSamples;\n    \n    // Start beep for Chinese\n    const chineseBeepSamples = this.addSimpleBeep(view, offset, 0, sampleRate, 1000, 0.3, 0.15);\n    offset += chineseBeepSamples * 2;\n    sampleIndex += chineseBeepSamples;\n    \n    // Fill rest of Chinese section with different background tone\n    while (sampleIndex < chineseEnd && offset < arrayBuffer.byteLength - 2) {\n      const t = (sampleIndex - (englishSamples + pauseSamples)) / sampleRate;\n      const sample = Math.sin(2 * Math.PI * 330 * t) * 0.03; // Higher frequency tone\n      const intSample = Math.round(sample * 32767);\n      view.setInt16(offset, intSample, true);\n      offset += 2;\n      sampleIndex++;\n    }\n    \n    // Fill any remaining space with silence\n    while (offset < arrayBuffer.byteLength - 2) {\n      view.setInt16(offset, 0, true);\n      offset += 2;\n    }\n    \n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  }\n\n  private addSimpleBeep(\n    view: DataView, \n    startOffset: number,\n    sampleIndex: number,\n    sampleRate: number, \n    frequency: number, \n    duration: number, \n    volume: number\n  ): number {\n    const beepSamples = Math.floor(duration * sampleRate);\n    let offset = startOffset;\n    \n    for (let i = 0; i < beepSamples && offset < view.buffer.byteLength - 2; i++) {\n      const t = i / sampleRate;\n      let sample = Math.sin(2 * Math.PI * frequency * t) * volume;\n      \n      // Apply fade in/out to prevent audio clicks\n      const fadeLength = Math.min(Math.floor(beepSamples * 0.1), 2205); // Max 0.05 seconds fade\n      if (i < fadeLength && fadeLength > 0) {\n        sample *= i / fadeLength;\n      } else if (i > beepSamples - fadeLength && fadeLength > 0) {\n        sample *= (beepSamples - i) / fadeLength;\n      }\n      \n      // Clamp and convert to 16-bit integer\n      sample = Math.max(-1, Math.min(1, sample));\n      const intSample = Math.round(sample * 32767);\n      view.setInt16(offset, intSample, true);\n      offset += 2;\n    }\n    \n    return beepSamples;\n  }\n\n  private writeString(view: DataView, offset: number, string: string): void {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  }\n\n  private createInstructionFile(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Blob {\n    \n    const instructions = {\n      type: \"Audio Translation Instructions\",\n      format: \"TTS Sequence Guide\",\n      \n      texts: {\n        english: englishText,\n        chinese: chineseText\n      },\n      \n      playback_sequence: [\n        `1. Play English text: \"${englishText}\"`,\n        `2. Wait ${settings.pauseDuration} seconds`,\n        `3. Play Chinese text: \"${chineseText}\"`\n      ],\n      \n      recommended_settings: {\n        english_voice: \"Any clear English voice\",\n        chinese_voice: \"Microsoft Xiaoxiao Online (Natural) or similar\",\n        speed: `${settings.voiceSpeed}x`,\n        volume: \"100%\"\n      },\n      \n      timing_info: {\n        english_estimated_duration: `${Math.ceil(englishText.length / 10 / settings.voiceSpeed)} seconds`,\n        pause_duration: `${settings.pauseDuration} seconds`,\n        chinese_estimated_duration: `${Math.ceil(chineseText.length / 5 / settings.voiceSpeed)} seconds`,\n        total_estimated_duration: `${Math.ceil(englishText.length / 10 / settings.voiceSpeed) + settings.pauseDuration + Math.ceil(chineseText.length / 5 / settings.voiceSpeed)} seconds`\n      },\n      \n      usage_instructions: [\n        \"Use the web interface for optimal playback experience\",\n        \"Copy text to any TTS software for offline use\", \n        \"Import timing information for precise synchronization\",\n        \"Adjust voice settings according to recommendations above\"\n      ],\n      \n      metadata: {\n        created: new Date().toISOString(),\n        generator: \"English-Chinese Audio Translator\",\n        note: \"This file contains precise timing and text for creating audio translations\"\n      }\n    };\n\n    const content = JSON.stringify(instructions, null, 2);\n    return new Blob([content], { type: 'application/json' });\n  }\n}","size_bytes":7816},"client/src/lib/speech-audio-generator.ts":{"content":"// Real speech audio generator using Web Speech API with audio capture\nexport class SpeechAudioGenerator {\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioChunks: Blob[] = [];\n  private isRecording = false;\n\n  async generateSpeechAudio(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    try {\n      // Method 1: Try to get microphone permission and record while playing TTS\n      // This captures the computer's audio output if possible\n      return await this.captureSystemAudioWithTTS(englishText, chineseText, settings);\n    } catch (error) {\n      console.log('System audio capture failed, creating instruction file');\n      \n      // Method 2: Create a detailed instruction file that works with external TTS\n      return this.createDetailedInstructionFile(englishText, chineseText, settings);\n    }\n  }\n\n  private async captureSystemAudioWithTTS(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<Blob> {\n    \n    // Try to capture display media (system audio)\n    const stream = await navigator.mediaDevices.getDisplayMedia({\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        sampleRate: 44100\n      },\n      video: false\n    });\n\n    // Set up recording\n    this.mediaRecorder = new MediaRecorder(stream, {\n      mimeType: 'audio/webm;codecs=opus'\n    });\n\n    this.audioChunks = [];\n    this.isRecording = true;\n\n    return new Promise<Blob>((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not initialized'));\n        return;\n      }\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          this.audioChunks.push(event.data);\n        }\n      };\n\n      this.mediaRecorder.onstop = () => {\n        stream.getTracks().forEach(track => track.stop());\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/webm' });\n        this.isRecording = false;\n        resolve(audioBlob);\n      };\n\n      this.mediaRecorder.onerror = reject;\n\n      // Start recording\n      this.mediaRecorder.start();\n\n      // Play the TTS sequence\n      this.playFullSequence(englishText, chineseText, settings)\n        .then(() => {\n          // Give a small buffer then stop recording\n          setTimeout(() => {\n            if (this.mediaRecorder && this.isRecording) {\n              this.mediaRecorder.stop();\n            }\n          }, 1000);\n        })\n        .catch(reject);\n    });\n  }\n\n  private async playFullSequence(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Promise<void> {\n    \n    // Play English text\n    await this.speakText(englishText, 'en-US', settings.voiceSpeed);\n    \n    // Wait for pause duration\n    await new Promise(resolve => setTimeout(resolve, settings.pauseDuration * 1000));\n    \n    // Play Chinese text with optimal voice\n    await this.speakText(chineseText, 'zh-CN', settings.voiceSpeed);\n  }\n\n  private speakText(text: string, language: string, speed: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!('speechSynthesis' in window)) {\n        reject(new Error('Speech synthesis not supported'));\n        return;\n      }\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = speed;\n      utterance.volume = 1.0;\n      utterance.pitch = 1.0;\n      \n      // Get optimal voice\n      const voices = speechSynthesis.getVoices();\n      \n      if (language === 'zh-CN') {\n        // Find the best Chinese voice (prioritize Xiaoxiao)\n        const chineseVoice = voices.find(voice => \n          voice.name.includes('Xiaoxiao') ||\n          (voice.lang.includes('zh-CN') && voice.name.includes('Microsoft')) ||\n          voice.lang.includes('zh-CN') ||\n          voice.lang.includes('zh')\n        );\n        if (chineseVoice) {\n          utterance.voice = chineseVoice;\n          console.log('Using Chinese voice for recording:', chineseVoice.name);\n        }\n      } else {\n        // Find a good English voice\n        const englishVoice = voices.find(voice => \n          voice.lang.includes('en-US') || \n          voice.lang.includes('en')\n        );\n        if (englishVoice) {\n          utterance.voice = englishVoice;\n        }\n      }\n\n      utterance.onend = () => {\n        // Small delay to ensure audio finishes\n        setTimeout(resolve, 200);\n      };\n      \n      utterance.onerror = (event) => {\n        console.error('Speech synthesis error:', event);\n        reject(event.error);\n      };\n\n      speechSynthesis.speak(utterance);\n    });\n  }\n\n  private createDetailedInstructionFile(\n    englishText: string,\n    chineseText: string,\n    settings: {\n      pauseDuration: number;\n      voiceSpeed: number;\n    }\n  ): Blob {\n    \n    // Create a comprehensive file that can be used with any TTS software\n    const instructionData = {\n      type: \"TTS-Audio-Instructions\",\n      version: \"2.0\",\n      \n      // Ready-to-use text for TTS software\n      tts_script: [\n        `${englishText}`,\n        `[PAUSE ${settings.pauseDuration} seconds]`,\n        `${chineseText}`\n      ].join('\\n'),\n      \n      // Detailed configuration\n      configuration: {\n        sequence: [\n          {\n            text: englishText,\n            language: \"en-US\",\n            voice_recommendation: \"Any clear English voice\",\n            speed: settings.voiceSpeed,\n            pause_after: 0\n          },\n          {\n            text: \"[PAUSE]\",\n            type: \"silence\",\n            duration: settings.pauseDuration\n          },\n          {\n            text: chineseText,\n            language: \"zh-CN\", \n            voice_recommendation: \"Microsoft Xiaoxiao Online (Natural) or similar Chinese neural voice\",\n            speed: settings.voiceSpeed,\n            pause_after: 0\n          }\n        ]\n      },\n\n      // Instructions for different TTS software\n      usage_instructions: {\n        \"Web Interface\": \"Return to the translation app and use the built-in player for optimal experience\",\n        \n        \"Windows Speech Platform\": [\n          \"1. Open Speech Recognition in Windows Settings\",\n          \"2. Use 'Speak Text' feature\",\n          \"3. Paste the TTS script above\",\n          \"4. Manually pause between English and Chinese sections\"\n        ],\n        \n        \"NVDA Screen Reader\": [\n          \"1. Copy the TTS script text\",\n          \"2. Paste into NVDA's Speech Viewer\",\n          \"3. Configure voice switching for different languages\"\n        ],\n        \n        \"General TTS Software\": [\n          \"1. Import this file or copy the TTS script\",\n          \"2. Set English voice for first part\",\n          \"3. Add manual pause\",\n          \"4. Set Chinese voice (preferably Xiaoxiao) for second part\",\n          \"5. Export as audio file\"\n        ]\n      },\n\n      // Timing information\n      timing: {\n        english_estimated_duration: this.estimateDuration(englishText, settings.voiceSpeed),\n        pause_duration: settings.pauseDuration,\n        chinese_estimated_duration: this.estimateDuration(chineseText, settings.voiceSpeed),\n        total_estimated_duration: this.estimateDuration(englishText, settings.voiceSpeed) + \n                                 settings.pauseDuration + \n                                 this.estimateDuration(chineseText, settings.voiceSpeed)\n      },\n\n      metadata: {\n        created: new Date().toISOString(),\n        english_text: englishText,\n        chinese_text: chineseText,\n        generator: \"English-Chinese Audio Translator\"\n      }\n    };\n\n    const content = JSON.stringify(instructionData, null, 2);\n    return new Blob([content], { type: 'application/json' });\n  }\n\n  private estimateDuration(text: string, speed: number): number {\n    // Estimate speech duration based on text length and speed\n    const wordsPerMinute = 150; // Average speaking rate\n    const words = text.split(/\\s+/).length;\n    const baseSeconds = (words / wordsPerMinute) * 60;\n    return baseSeconds / speed;\n  }\n\n  cleanup(): void {\n    if (this.mediaRecorder && this.isRecording) {\n      this.mediaRecorder.stop();\n    }\n    this.audioChunks = [];\n    this.isRecording = false;\n  }\n}","size_bytes":8354},"client/src/lib/tts-service.ts":{"content":"// Enhanced TTS service using browser Speech Synthesis API with optimized voice selection\nexport class TTSService {\n  static getBrowserVoices(): SpeechSynthesisVoice[] {\n    if (!('speechSynthesis' in window)) return [];\n    return speechSynthesis.getVoices();\n  }\n\n  static getBestChineseVoice(): SpeechSynthesisVoice | null {\n    const voices = this.getBrowserVoices();\n    \n    // Priority order for Chinese voices (Microsoft Xiaoxiao is preferred)\n    const chineseVoicePriority = [\n      'Microsoft Xiaoxiao - Chinese (Simplified, PRC)',\n      'Microsoft Kangkang - Chinese (Simplified, PRC)', \n      'Google 中文（中国大陆）',\n      'Chinese (China)',\n      'zh-CN',\n      'zh-TW',\n      'cmn'\n    ];\n\n    for (const voiceName of chineseVoicePriority) {\n      const voice = voices.find(v => \n        v.name.includes(voiceName) || \n        v.lang.includes(voiceName) ||\n        v.name.toLowerCase().includes(voiceName.toLowerCase())\n      );\n      if (voice) return voice;\n    }\n\n    // Fallback to any Chinese voice\n    return voices.find(voice => \n      voice.lang.includes('zh') || \n      voice.lang.includes('cmn') ||\n      voice.name.toLowerCase().includes('chinese') ||\n      voice.name.toLowerCase().includes('mandarin')\n    ) || null;\n  }\n\n  static getBestEnglishVoice(): SpeechSynthesisVoice | null {\n    const voices = this.getBrowserVoices();\n    \n    // Priority order for English voices\n    const englishVoicePriority = [\n      'Microsoft David - English (United States)',\n      'Microsoft Zira - English (United States)',\n      'Google US English',\n      'en-US'\n    ];\n\n    for (const voiceName of englishVoicePriority) {\n      const voice = voices.find(v => \n        v.name.includes(voiceName) || \n        v.lang.includes(voiceName) ||\n        v.name.toLowerCase().includes(voiceName.toLowerCase())\n      );\n      if (voice) return voice;\n    }\n\n    // Fallback to any English voice\n    return voices.find(voice => \n      voice.lang.includes('en-US') || \n      voice.lang.includes('en') ||\n      voice.name.toLowerCase().includes('english')\n    ) || null;\n  }\n\n  // Stop any current speech and wait for it to fully stop\n  static stopSpeech() {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      // Ensure all speech is fully stopped\n      while (speechSynthesis.speaking) {\n        speechSynthesis.cancel();\n      }\n    }\n  }\n\n  // Wait for speech synthesis to be ready and stopped\n  static async waitForSpeechReady(): Promise<void> {\n    return new Promise((resolve) => {\n      if (!('speechSynthesis' in window)) {\n        resolve();\n        return;\n      }\n\n      // If already ready, resolve immediately\n      if (!speechSynthesis.speaking && !speechSynthesis.pending) {\n        resolve();\n        return;\n      }\n\n      // Wait for speech to stop\n      const checkReady = () => {\n        if (!speechSynthesis.speaking && !speechSynthesis.pending) {\n          resolve();\n        } else {\n          speechSynthesis.cancel();\n          setTimeout(checkReady, 50);\n        }\n      };\n      \n      checkReady();\n    });\n  }\n\n  static async speakWithBestVoice(text: string, language: string, speed: number = 1.0, volume: number = 100): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!('speechSynthesis' in window)) {\n        reject(new Error('Speech synthesis not supported'));\n        return;\n      }\n\n      // Stop any current speech\n      this.stopSpeech();\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = speed;\n      utterance.volume = volume / 100;\n      utterance.lang = language;\n      \n      if (language === 'zh-CN') {\n        const bestVoice = this.getBestChineseVoice();\n        if (bestVoice) {\n          utterance.voice = bestVoice;\n          console.log('Using Chinese voice:', bestVoice.name, bestVoice.lang);\n        }\n      } else {\n        const bestVoice = this.getBestEnglishVoice();\n        if (bestVoice) {\n          utterance.voice = bestVoice;\n          console.log('Using English voice:', bestVoice.name, bestVoice.lang);\n        }\n      }\n\n      utterance.onend = () => {\n        console.log('Speech finished:', text);\n        resolve();\n      };\n      \n      utterance.onerror = (event) => {\n        console.error('Speech error:', event.error, 'for text:', text);\n        reject(new Error(event.error));\n      };\n\n      utterance.onstart = () => {\n        console.log('Speech started:', text);\n      };\n\n      try {\n        speechSynthesis.speak(utterance);\n      } catch (error) {\n        console.error('Speech synthesis error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  // Initialize voices by calling getVoices and waiting for voiceschanged event\n  static async initializeVoices(): Promise<void> {\n    return new Promise((resolve) => {\n      let voices = speechSynthesis.getVoices();\n      \n      if (voices.length > 0) {\n        console.log('Voices already loaded:', voices.length);\n        resolve();\n        return;\n      }\n      \n      const voicesChangedHandler = () => {\n        voices = speechSynthesis.getVoices();\n        if (voices.length > 0) {\n          console.log('Voices loaded:', voices.length);\n          speechSynthesis.removeEventListener('voiceschanged', voicesChangedHandler);\n          resolve();\n        }\n      };\n      \n      speechSynthesis.addEventListener('voiceschanged', voicesChangedHandler);\n      \n      // Timeout after 3 seconds\n      setTimeout(() => {\n        speechSynthesis.removeEventListener('voiceschanged', voicesChangedHandler);\n        resolve();\n      }, 3000);\n    });\n  }\n}","size_bytes":5580},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { VocabularyGroupCard } from \"@/components/vocabulary-group-card\";\nimport { SettingsCard } from \"@/components/settings-card\";\nimport { PlaybackModeSelector } from \"@/components/playback-mode-selector\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AudioManager } from \"@/lib/audio-manager\";\nimport { Languages, BookOpen } from \"lucide-react\";\nimport type { AudioSettings, WordGroup, VocabularyWord } from \"@shared/schema\";\n\nexport default function Home() {\n  const [audioSettings, setAudioSettings] = useState<AudioSettings>({\n    id: \"\",\n    pauseDuration: 1.0,\n    voiceSpeed: 1.0,\n    audioQuality: \"high\",\n    languageOrder: \"english-first\",\n  });\n\n  const [groupWords, setGroupWords] = useState<Record<string, VocabularyWord[]>>({});\n  \n  const { toast } = useToast();\n\n  // Fetch audio settings\n  const { data: settingsData } = useQuery<AudioSettings>({\n    queryKey: [\"/api/audio-settings\"],\n  });\n\n  // Fetch word groups\n  const { data: wordGroupsData = [], isLoading: groupsLoading } = useQuery<WordGroup[]>({\n    queryKey: [\"/api/word-groups\"],\n  });\n\n  // Use the server-provided ordering (no client-side re-sorting)\n  const wordGroups = useMemo(() => {\n    return wordGroupsData; // Server already sorts these properly\n  }, [wordGroupsData]);\n\n  useEffect(() => {\n    if (settingsData) {\n      setAudioSettings(settingsData);\n    }\n  }, [settingsData]);\n\n  // Fetch words for each group and initialize AudioManager\n  useEffect(() => {\n    const fetchWordsForGroups = async () => {\n      if (wordGroups.length === 0) return;\n      \n      const wordsPromises = wordGroups.map(async (group) => {\n        try {\n          const response = await apiRequest(\"GET\", `/api/word-groups/${group.id}/words`);\n          const words = await response.json();\n          return { groupId: group.id, words };\n        } catch (error) {\n          console.error(`Failed to fetch words for group ${group.id}:`, error);\n          return { groupId: group.id, words: [] };\n        }\n      });\n\n      const results = await Promise.all(wordsPromises);\n      const wordsMap: Record<string, VocabularyWord[]> = {};\n      results.forEach(({ groupId, words }) => {\n        wordsMap[groupId] = words;\n      });\n      setGroupWords(wordsMap);\n      \n      // Initialize AudioManager with data\n      if (audioSettings) {\n        AudioManager.initializeData(wordGroups, wordsMap, audioSettings);\n      }\n    };\n\n    fetchWordsForGroups();\n  }, [wordGroups, audioSettings]);\n\n  // Update audio settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: Partial<AudioSettings>) => {\n      const response = await apiRequest(\"POST\", \"/api/audio-settings\", settings);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAudioSettings(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/audio-settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Audio settings have been saved.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Settings Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle learned status mutation with manual state update\n  const toggleLearnedMutation = useMutation({\n    mutationFn: async ({ groupId, isLearned }: { groupId: string; isLearned: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/word-groups/${groupId}`, { isLearned });\n      return response.json();\n    },\n    onSuccess: (updatedGroup) => {\n      // Manually update the cache with the returned data, preserving order\n      const currentGroups = queryClient.getQueryData<WordGroup[]>([\"/api/word-groups\"]);\n      if (currentGroups) {\n        const updatedGroups = currentGroups.map(group => \n          group.id === updatedGroup.id ? updatedGroup : group\n        );\n        // Set the data directly without invalidating to prevent reordering\n        queryClient.setQueryData([\"/api/word-groups\"], updatedGroups);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Learning status could not be saved.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSettingsChange = (newSettings: AudioSettings) => {\n    const { id, ...settingsToUpdate } = newSettings;\n    updateSettingsMutation.mutate(settingsToUpdate);\n  };\n\n  const handleToggleLearned = (groupId: string, isLearned: boolean) => {\n    toggleLearnedMutation.mutate({ groupId, isLearned });\n  };\n\n  const learnedCount = wordGroups.filter(group => group.isLearned === 1).length;\n  const totalWords = Object.values(groupWords).flat().length;\n\n  return (\n    <div className=\"bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-6xl mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Languages className=\"text-white text-xl w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Chinese Vocabulary Learning\n                </h1>\n                <p className=\"text-gray-600\">\n                  Learn vocabulary with high-quality audio pronunciation\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-gray-600\">\n                  {learnedCount} of {wordGroups.length} groups learned\n                </span>\n              </div>\n              <div className=\"text-gray-500\">\n                {totalWords} total words\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Vocabulary Progress Widget */}\n        <div className=\"mb-8 bg-white rounded-xl shadow-lg p-6 border-2 border-blue-100\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4 text-center\">Learning Progress</h3>\n          <div className=\"flex items-center justify-center space-x-12\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-blue-600\">\n                {learnedCount * 10}\n              </div>\n              <div className=\"text-sm text-gray-600 mt-1\">Words Learned</div>\n            </div>\n            <div className=\"h-16 w-px bg-gray-300\"></div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-gray-700\">\n                {totalWords}\n              </div>\n              <div className=\"text-sm text-gray-600 mt-1\">Total Words</div>\n            </div>\n            <div className=\"h-16 w-px bg-gray-300\"></div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-green-600\">\n                {totalWords > 0 ? Math.round((learnedCount * 10 / totalWords) * 100) : 0}%\n              </div>\n              <div className=\"text-sm text-gray-600 mt-1\">Complete</div>\n            </div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"mt-6\">\n            <div className=\"w-full bg-gray-200 rounded-full h-3\">\n              <div \n                className=\"bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-500\"\n                style={{ width: `${totalWords > 0 ? (learnedCount * 10 / totalWords) * 100 : 0}%` }}\n              ></div>\n            </div>\n            <div className=\"text-center text-xs text-gray-500 mt-2\">\n              {learnedCount} of {wordGroups.length} groups completed\n            </div>\n          </div>\n        </div>\n\n        {/* Settings Panel */}\n        <div className=\"mb-8\">\n          <SettingsCard\n            settings={audioSettings}\n            onSettingsChange={handleSettingsChange}\n          />\n        </div>\n\n        {/* Playback Mode Selector */}\n        <div className=\"mb-8\">\n          <PlaybackModeSelector\n            isReviewAvailable={learnedCount > 0}\n          />\n        </div>\n\n        {/* Vocabulary Groups */}\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              Vocabulary Groups\n            </h2>\n            <div className=\"text-sm text-gray-500\">\n              Choose playback mode above, then click \"Start Learning\" for random patterns: \"English → Chinese → Chinese\" or \"Chinese → Chinese → English\"\n            </div>\n          </div>\n\n          {groupsLoading ? (\n            <div className=\"grid grid-cols-1 gap-6\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-white rounded-lg border animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 gap-6\">\n              {wordGroups.map((group) => (\n                <VocabularyGroupCard\n                  key={group.id}\n                  group={group}\n                  words={groupWords[group.id] || []}\n                  audioSettings={audioSettings}\n                  onToggleLearned={handleToggleLearned}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n\n        {wordGroups.length === 0 && !groupsLoading && (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-600\">No vocabulary groups available</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10053},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"mobile/src/screens/GroupListScreen.js":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function GroupListScreen({ navigation }) {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadGroups();\n  }, []);\n\n  const loadGroups = async () => {\n    try {\n      // This will be populated when we port the vocabulary data\n      const storedGroups = await AsyncStorage.getItem('@vocabulary_groups');\n      if (storedGroups) {\n        setGroups(JSON.parse(storedGroups));\n      } else {\n        // Placeholder data for now - will be replaced with real HSK data\n        setGroups([\n          {\n            id: '1',\n            name: 'HSK 1-1',\n            level: 1,\n            wordCount: 10,\n            isDownloaded: false,\n            isLearned: false,\n          },\n          {\n            id: '2',\n            name: 'HSK 1-2',\n            level: 1,\n            wordCount: 10,\n            isDownloaded: false,\n            isLearned: false,\n          }\n        ]);\n      }\n      setLoading(false);\n    } catch (error) {\n      console.error('Error loading groups:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleDownloadGroup = async (groupId) => {\n    Alert.alert(\n      'Download Group',\n      'This will download the vocabulary group for offline use.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Download', \n          onPress: () => {\n            // TODO: Implement group download\n            Alert.alert('Coming Soon', 'Group download will be implemented in the next phase.');\n          }\n        }\n      ]\n    );\n  };\n\n  const handleStartGroup = (group) => {\n    if (!group.isDownloaded) {\n      Alert.alert(\n        'Group Not Downloaded',\n        'Please download this group first for offline practice.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Download Now', onPress: () => handleDownloadGroup(group.id) }\n        ]\n      );\n      return;\n    }\n\n    navigation.navigate('Vocabulary', { \n      groupId: group.id, \n      groupName: group.name \n    });\n  };\n\n  const toggleLearned = async (groupId) => {\n    const updatedGroups = groups.map(group => \n      group.id === groupId \n        ? { ...group, isLearned: !group.isLearned }\n        : group\n    );\n    setGroups(updatedGroups);\n    \n    try {\n      await AsyncStorage.setItem('@vocabulary_groups', JSON.stringify(updatedGroups));\n    } catch (error) {\n      console.error('Error saving group status:', error);\n    }\n  };\n\n  const getHSKLevelColor = (level) => {\n    const colors = {\n      1: '#ef4444', // red\n      2: '#f97316', // orange  \n      3: '#eab308', // yellow\n      4: '#22c55e', // green\n      5: '#3b82f6', // blue\n      6: '#8b5cf6', // purple\n    };\n    return colors[level] || '#6b7280';\n  };\n\n  const renderGroup = ({ item }) => (\n    <View style={styles.groupCard}>\n      <View style={styles.groupHeader}>\n        <View style={styles.groupTitleContainer}>\n          <View style={[\n            styles.levelBadge, \n            { backgroundColor: getHSKLevelColor(item.level) }\n          ]}>\n            <Text style={styles.levelText}>HSK {item.level}</Text>\n          </View>\n          <Text style={styles.groupName}>{item.name}</Text>\n        </View>\n        \n        <TouchableOpacity\n          onPress={() => toggleLearned(item.id)}\n          style={styles.learnedButton}\n        >\n          <MaterialIcons\n            name={item.isLearned ? \"check-circle\" : \"radio-button-unchecked\"}\n            size={24}\n            color={item.isLearned ? \"#22c55e\" : \"#9ca3af\"}\n          />\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.groupInfo}>\n        <View style={styles.infoItem}>\n          <MaterialIcons name=\"library-books\" size={16} color=\"#6b7280\" />\n          <Text style={styles.infoText}>{item.wordCount} words</Text>\n        </View>\n        \n        <View style={styles.infoItem}>\n          <MaterialIcons \n            name={item.isDownloaded ? \"offline-bolt\" : \"cloud-download\"} \n            size={16} \n            color={item.isDownloaded ? \"#22c55e\" : \"#f59e0b\"} \n          />\n          <Text style={[\n            styles.infoText,\n            { color: item.isDownloaded ? \"#22c55e\" : \"#f59e0b\" }\n          ]}>\n            {item.isDownloaded ? \"Downloaded\" : \"Online Only\"}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.groupActions}>\n        <TouchableOpacity\n          style={[\n            styles.actionButton,\n            styles.primaryAction,\n            !item.isDownloaded && styles.disabledAction\n          ]}\n          onPress={() => handleStartGroup(item)}\n        >\n          <MaterialIcons name=\"play-arrow\" size={20} color=\"white\" />\n          <Text style={styles.actionText}>Study</Text>\n        </TouchableOpacity>\n\n        {!item.isDownloaded && (\n          <TouchableOpacity\n            style={[styles.actionButton, styles.secondaryAction]}\n            onPress={() => handleDownloadGroup(item.id)}\n          >\n            <MaterialIcons name=\"download\" size={20} color=\"#1e40af\" />\n            <Text style={styles.secondaryActionText}>Download</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading HSK Groups...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerText}>\n          {groups.length} HSK Groups Available\n        </Text>\n        <Text style={styles.headerSubtext}>\n          Tap groups to download for offline practice\n        </Text>\n      </View>\n\n      <FlatList\n        data={groups}\n        keyExtractor={(item) => item.id}\n        renderItem={renderGroup}\n        contentContainerStyle={styles.listContainer}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 20,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n  },\n  headerText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1f2937',\n  },\n  headerSubtext: {\n    fontSize: 14,\n    color: '#6b7280',\n    marginTop: 4,\n  },\n  listContainer: {\n    padding: 16,\n  },\n  groupCard: {\n    backgroundColor: 'white',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  groupHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  groupTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  levelBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    marginRight: 12,\n  },\n  levelText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  groupName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1f2937',\n    flex: 1,\n  },\n  learnedButton: {\n    padding: 4,\n  },\n  groupInfo: {\n    flexDirection: 'row',\n    gap: 16,\n    marginBottom: 16,\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  infoText: {\n    fontSize: 14,\n    color: '#6b7280',\n  },\n  groupActions: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    gap: 4,\n    flex: 1,\n    justifyContent: 'center',\n  },\n  primaryAction: {\n    backgroundColor: '#1e40af',\n  },\n  disabledAction: {\n    backgroundColor: '#9ca3af',\n  },\n  secondaryAction: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderColor: '#1e40af',\n  },\n  actionText: {\n    color: 'white',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  secondaryActionText: {\n    color: '#1e40af',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#6b7280',\n  },\n});","size_bytes":8379},"mobile/src/screens/HomeScreen.js":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function HomeScreen({ navigation }) {\n  const [downloadedGroups, setDownloadedGroups] = useState(0);\n  const [totalWords, setTotalWords] = useState(0);\n  const [offlineMode, setOfflineMode] = useState(true);\n\n  useEffect(() => {\n    loadAppData();\n  }, []);\n\n  const loadAppData = async () => {\n    try {\n      // This will be populated when we port the vocabulary data\n      const groups = await AsyncStorage.getItem('@vocabulary_groups');\n      if (groups) {\n        const parsedGroups = JSON.parse(groups);\n        setDownloadedGroups(parsedGroups.length);\n        \n        // Count total words across all groups\n        const wordCount = parsedGroups.reduce((total, group) => total + (group.words?.length || 0), 0);\n        setTotalWords(wordCount);\n      }\n    } catch (error) {\n      console.error('Error loading app data:', error);\n    }\n  };\n\n  const handleStartLearning = () => {\n    if (downloadedGroups === 0) {\n      Alert.alert(\n        'No Content Available',\n        'Please download HSK vocabulary groups first to start learning.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n    navigation.navigate('GroupList');\n  };\n\n  const handleDownloadContent = async () => {\n    Alert.alert(\n      'Download HSK Content',\n      'This will download all 362 HSK vocabulary groups (3,610 words) for offline use. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Download', \n          onPress: () => {\n            // TODO: Implement vocabulary download from web app data\n            Alert.alert('Coming Soon', 'Download functionality will be implemented in the next step.');\n          }\n        }\n      ]\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Chinese Vocabulary Learning</Text>\n        <Text style={styles.subtitle}>HSK Levels 1-6 • Authentic Vocabulary</Text>\n      </View>\n\n      {/* App Status Card */}\n      <View style={styles.card}>\n        <View style={styles.cardHeader}>\n          <MaterialIcons name=\"storage\" size={24} color=\"#1e40af\" />\n          <Text style={styles.cardTitle}>App Status</Text>\n        </View>\n        <View style={styles.statsRow}>\n          <View style={styles.stat}>\n            <Text style={styles.statNumber}>{downloadedGroups}</Text>\n            <Text style={styles.statLabel}>Groups Downloaded</Text>\n          </View>\n          <View style={styles.stat}>\n            <Text style={styles.statNumber}>{totalWords.toLocaleString()}</Text>\n            <Text style={styles.statLabel}>Words Available</Text>\n          </View>\n          <View style={styles.stat}>\n            <MaterialIcons \n              name={offlineMode ? \"offline-bolt\" : \"wifi\"} \n              size={24} \n              color={offlineMode ? \"#16a34a\" : \"#dc2626\"} \n            />\n            <Text style={styles.statLabel}>\n              {offlineMode ? \"Offline Ready\" : \"Online\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Features Card */}\n      <View style={styles.card}>\n        <View style={styles.cardHeader}>\n          <MaterialIcons name=\"stars\" size={24} color=\"#1e40af\" />\n          <Text style={styles.cardTitle}>Mobile Features</Text>\n        </View>\n        <View style={styles.featuresList}>\n          <View style={styles.feature}>\n            <MaterialIcons name=\"download\" size={20} color=\"#16a34a\" />\n            <Text style={styles.featureText}>Offline Group Downloads</Text>\n          </View>\n          <View style={styles.feature}>\n            <MaterialIcons name=\"headset\" size={20} color=\"#16a34a\" />\n            <Text style={styles.featureText}>Background Audio Playback</Text>\n          </View>\n          <View style={styles.feature}>\n            <MaterialIcons name=\"loop\" size={20} color=\"#16a34a\" />\n            <Text style={styles.featureText}>Group Looping (Screen Locked)</Text>\n          </View>\n          <View style={styles.feature}>\n            <MaterialIcons name=\"voice-chat\" size={20} color=\"#16a34a\" />\n            <Text style={styles.featureText}>Microsoft Xiaoxiao Voice</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Action Buttons */}\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity \n          style={[\n            styles.primaryButton,\n            downloadedGroups === 0 && styles.disabledButton\n          ]} \n          onPress={handleStartLearning}\n        >\n          <MaterialIcons name=\"school\" size={24} color=\"white\" />\n          <Text style={styles.buttonText}>Start Learning</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={styles.secondaryButton} \n          onPress={handleDownloadContent}\n        >\n          <MaterialIcons name=\"cloud-download\" size={24} color=\"#1e40af\" />\n          <Text style={styles.secondaryButtonText}>Download HSK Content</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Progress Information */}\n      <View style={styles.infoCard}>\n        <Text style={styles.infoTitle}>Your Mobile Vocabulary Journey</Text>\n        <Text style={styles.infoText}>\n          This app contains authentic HSK vocabulary across all 6 levels, with high-quality pronunciation \n          using Microsoft Xiaoxiao voice. Download groups for offline practice and enjoy continuous \n          learning with background audio that works even when your screen is locked.\n        </Text>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 20,\n    alignItems: 'center',\n    backgroundColor: '#1e40af',\n    marginBottom: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#93c5fd',\n    marginTop: 5,\n    textAlign: 'center',\n  },\n  card: {\n    backgroundColor: 'white',\n    marginHorizontal: 20,\n    marginBottom: 15,\n    borderRadius: 12,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginLeft: 10,\n    color: '#1f2937',\n  },\n  statsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  stat: {\n    alignItems: 'center',\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e40af',\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6b7280',\n    marginTop: 5,\n    textAlign: 'center',\n  },\n  featuresList: {\n    gap: 12,\n  },\n  feature: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  featureText: {\n    marginLeft: 12,\n    fontSize: 16,\n    color: '#374151',\n  },\n  buttonContainer: {\n    padding: 20,\n    gap: 12,\n  },\n  primaryButton: {\n    backgroundColor: '#1e40af',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  disabledButton: {\n    backgroundColor: '#9ca3af',\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  secondaryButton: {\n    backgroundColor: 'white',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: '#1e40af',\n    gap: 8,\n  },\n  secondaryButtonText: {\n    color: '#1e40af',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  infoCard: {\n    backgroundColor: '#eff6ff',\n    marginHorizontal: 20,\n    marginBottom: 30,\n    borderRadius: 12,\n    padding: 20,\n  },\n  infoTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e40af',\n    marginBottom: 10,\n  },\n  infoText: {\n    fontSize: 16,\n    color: '#374151',\n    lineHeight: 24,\n  },\n});","size_bytes":8191},"mobile/src/screens/VocabularyScreen.js":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nexport default function VocabularyScreen({ route, navigation }) {\n  const { groupId, groupName } = route.params;\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackMode, setPlaybackMode] = useState('English → Chinese → Chinese');\n  const [words, setWords] = useState([]);\n\n  useEffect(() => {\n    // Load vocabulary words for this group\n    loadGroupWords();\n    \n    // Set up the header with group name\n    navigation.setOptions({ title: groupName });\n  }, [groupId, groupName, navigation]);\n\n  const loadGroupWords = async () => {\n    // TODO: Load actual words from AsyncStorage\n    // For now, using placeholder data\n    const placeholderWords = [\n      {\n        id: 1,\n        english: 'father',\n        chinese: '爸爸',\n        pinyin: 'bàba'\n      },\n      {\n        id: 2,\n        english: 'mother', \n        chinese: '妈妈',\n        pinyin: 'māma'\n      },\n      {\n        id: 3,\n        english: 'son',\n        chinese: '儿子', \n        pinyin: 'érzi'\n      }\n    ];\n    setWords(placeholderWords);\n  };\n\n  const handlePlayPause = () => {\n    if (words.length === 0) return;\n    \n    setIsPlaying(!isPlaying);\n    \n    if (!isPlaying) {\n      Alert.alert(\n        'Audio Playback',\n        'Background audio playback will be implemented with react-native-track-player in the next phase.'\n      );\n    }\n  };\n\n  const handlePreviousWord = () => {\n    if (currentWordIndex > 0) {\n      setCurrentWordIndex(currentWordIndex - 1);\n    }\n  };\n\n  const handleNextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(currentWordIndex + 1);\n    }\n  };\n\n  const togglePlaybackMode = () => {\n    const modes = [\n      'English → Chinese → Chinese',\n      'Chinese → Chinese → English', \n      'Chinese → English → Chinese'\n    ];\n    const currentIndex = modes.indexOf(playbackMode);\n    const nextIndex = (currentIndex + 1) % modes.length;\n    setPlaybackMode(modes[nextIndex]);\n  };\n\n  const currentWord = words[currentWordIndex];\n\n  if (words.length === 0) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading vocabulary...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Progress Bar */}\n      <View style={styles.progressContainer}>\n        <View style={styles.progressBar}>\n          <View \n            style={[\n              styles.progressFill,\n              { width: `${((currentWordIndex + 1) / words.length) * 100}%` }\n            ]} \n          />\n        </View>\n        <Text style={styles.progressText}>\n          {currentWordIndex + 1} / {words.length}\n        </Text>\n      </View>\n\n      {/* Word Display */}\n      <View style={styles.wordCard}>\n        <Text style={styles.englishWord}>{currentWord.english}</Text>\n        <Text style={styles.chineseWord}>{currentWord.chinese}</Text>\n        <Text style={styles.pinyin}>({currentWord.pinyin})</Text>\n      </View>\n\n      {/* Audio Controls */}\n      <View style={styles.audioControls}>\n        <TouchableOpacity \n          style={styles.controlButton}\n          onPress={handlePreviousWord}\n          disabled={currentWordIndex === 0}\n        >\n          <MaterialIcons \n            name=\"skip-previous\" \n            size={32} \n            color={currentWordIndex === 0 ? \"#9ca3af\" : \"#1e40af\"} \n          />\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={[styles.controlButton, styles.playButton]}\n          onPress={handlePlayPause}\n        >\n          <MaterialIcons \n            name={isPlaying ? \"pause\" : \"play-arrow\"} \n            size={48} \n            color=\"white\" \n          />\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={styles.controlButton}\n          onPress={handleNextWord}\n          disabled={currentWordIndex === words.length - 1}\n        >\n          <MaterialIcons \n            name=\"skip-next\" \n            size={32} \n            color={currentWordIndex === words.length - 1 ? \"#9ca3af\" : \"#1e40af\"} \n          />\n        </TouchableOpacity>\n      </View>\n\n      {/* Playback Mode */}\n      <TouchableOpacity \n        style={styles.modeButton}\n        onPress={togglePlaybackMode}\n      >\n        <MaterialIcons name=\"repeat\" size={20} color=\"#1e40af\" />\n        <Text style={styles.modeText}>{playbackMode}</Text>\n      </TouchableOpacity>\n\n      {/* Loop Mode Info */}\n      <View style={styles.infoCard}>\n        <MaterialIcons name=\"info\" size={20} color=\"#3b82f6\" />\n        <Text style={styles.infoText}>\n          When screen is locked, audio will loop within this group only. \n          Manually navigate to advance to the next group.\n        </Text>\n      </View>\n\n      {/* Settings Placeholder */}\n      <View style={styles.settingsContainer}>\n        <Text style={styles.settingsTitle}>Audio Settings</Text>\n        <Text style={styles.settingsNote}>\n          Voice speed, pause duration, and other audio settings will be available in the next phase.\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n    padding: 20,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#6b7280',\n  },\n  progressContainer: {\n    marginBottom: 30,\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: '#e5e7eb',\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#1e40af',\n  },\n  progressText: {\n    textAlign: 'center',\n    marginTop: 8,\n    fontSize: 14,\n    color: '#6b7280',\n  },\n  wordCard: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    padding: 40,\n    alignItems: 'center',\n    marginBottom: 40,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  englishWord: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1f2937',\n    marginBottom: 16,\n  },\n  chineseWord: {\n    fontSize: 36,\n    fontWeight: 'bold',\n    color: '#1e40af',\n    marginBottom: 8,\n  },\n  pinyin: {\n    fontSize: 18,\n    color: '#6b7280',\n    fontStyle: 'italic',\n  },\n  audioControls: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: 20,\n    marginBottom: 30,\n  },\n  controlButton: {\n    padding: 12,\n  },\n  playButton: {\n    backgroundColor: '#1e40af',\n    borderRadius: 40,\n    padding: 20,\n  },\n  modeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    padding: 12,\n    borderRadius: 8,\n    gap: 8,\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  modeText: {\n    fontSize: 14,\n    color: '#1e40af',\n    fontWeight: '600',\n  },\n  infoCard: {\n    flexDirection: 'row',\n    backgroundColor: '#eff6ff',\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 20,\n    gap: 12,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#1e40af',\n    lineHeight: 20,\n  },\n  settingsContainer: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  settingsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1f2937',\n    marginBottom: 8,\n  },\n  settingsNote: {\n    fontSize: 14,\n    color: '#6b7280',\n    lineHeight: 20,\n  },\n});","size_bytes":7835},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/audio-player.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Play, Pause, Volume2 } from \"lucide-react\";\n\ninterface AudioPlayerProps {\n  audioUrl?: string;\n  duration?: number;\n  onPlay?: () => void;\n  onPause?: () => void;\n}\n\nexport function AudioPlayer({ audioUrl, duration = 0, onPlay, onPause }: AudioPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(75);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(audio.currentTime);\n    };\n\n    const handleEnded = () => {\n      setIsPlaying(false);\n      setCurrentTime(0);\n      onPause?.();\n    };\n\n    audio.addEventListener(\"timeupdate\", handleTimeUpdate);\n    audio.addEventListener(\"ended\", handleEnded);\n\n    return () => {\n      audio.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      audio.removeEventListener(\"ended\", handleEnded);\n    };\n  }, [onPause]);\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume / 100;\n    }\n  }, [volume]);\n\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (!audio || !audioUrl) return;\n\n    if (isPlaying) {\n      audio.pause();\n      setIsPlaying(false);\n      onPause?.();\n    } else {\n      audio.play();\n      setIsPlaying(true);\n      onPlay?.();\n    }\n  };\n\n  const handleSeek = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const newTime = (value[0] / 100) * audio.duration;\n    audio.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    setVolume(value[0]);\n  };\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;\n\n  return (\n    <div className=\"bg-white rounded-lg p-6 border border-gray-200\">\n      {audioUrl && (\n        <audio ref={audioRef} src={audioUrl} preload=\"metadata\" />\n      )}\n      \n      <div className=\"flex items-center justify-between mb-4\">\n        <h4 className=\"font-medium text-gray-900\">Combined Audio</h4>\n        <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n          <i className=\"fas fa-clock\"></i>\n          <span>{formatTime(duration)}</span>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <Button\n          onClick={togglePlayPause}\n          disabled={!audioUrl}\n          className=\"w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors p-0\"\n        >\n          {isPlaying ? (\n            <Pause className=\"w-5 h-5\" />\n          ) : (\n            <Play className=\"w-5 h-5 ml-0.5\" />\n          )}\n        </Button>\n        \n        <div className=\"flex-1 relative\">\n          <div className=\"w-full h-2 bg-gray-200 rounded-full\">\n            <div \n              className=\"h-2 bg-primary rounded-full transition-all duration-300\"\n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n          <Slider\n            value={[progressPercentage]}\n            onValueChange={handleSeek}\n            max={100}\n            step={1}\n            className=\"absolute inset-0 w-full h-2 opacity-0 cursor-pointer\"\n          />\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Volume2 className=\"w-4 h-4 text-gray-400\" />\n          <Slider\n            value={[volume]}\n            onValueChange={handleVolumeChange}\n            max={100}\n            step={1}\n            className=\"w-20\"\n          />\n        </div>\n      </div>\n\n      {duration > 0 && (\n        <div className=\"mt-4 text-xs text-gray-500 flex justify-between\">\n          <span>English: 0:00-{formatTime(duration * 0.4)}</span>\n          <span>Pause: {formatTime(duration * 0.4)}-{formatTime(duration * 0.5)}</span>\n          <span>Chinese: {formatTime(duration * 0.5)}-{formatTime(duration)}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4386},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}